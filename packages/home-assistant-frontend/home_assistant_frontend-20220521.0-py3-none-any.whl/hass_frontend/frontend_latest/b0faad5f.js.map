{"version":3,"file":"b0faad5f.js","mappings":";;AAoGA;AAMA;;AAEA;;;AAIA;AACA;;AAEA;;AAxBA;AACA;AACA;;;;AAmFA;;AAOA;;AAEA;;AAGA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;;;;AAMA;AAGA;AAcA;AAKA;AAGA;AAQA;AAIA;;;;AAQA;;;;AAOA;AACA;;;AAGA;;;AAKA;AAYA;AACA;;AAIA;;;;;;;AA2BA;;AAqCA;AACA;;AAEA;AAPA;AAsCA;AAIA;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjXA","sources":["webpack://home-assistant-frontend/./src/panels/logbook/ha-logbook-renderer.ts"],"sourcesContent":["import \"@lit-labs/virtualizer\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { DOMAINS_WITH_DYNAMIC_PICTURE } from \"../../common/const\";\nimport { formatDate } from \"../../common/datetime/format_date\";\nimport { formatTimeWithSeconds } from \"../../common/datetime/format_time\";\nimport { restoreScroll } from \"../../common/decorators/restore-scroll\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { computeRTL, emitRTLDirection } from \"../../common/util/compute_rtl\";\nimport \"../../components/entity/state-badge\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-relative-time\";\nimport { LogbookEntry } from \"../../data/logbook\";\nimport { TraceContexts } from \"../../data/trace\";\nimport {\n  haStyle,\n  haStyleScrollbar,\n  buttonLinkStyle,\n} from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport { brandsUrl } from \"../../util/brands-url\";\n\nconst EVENT_LOCALIZE_MAP = {\n  script_started: \"from_script\",\n};\n\n@customElement(\"ha-logbook-renderer\")\nclass HaLogbookRenderer extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public userIdToName = {};\n\n  @property({ attribute: false })\n  public traceContexts: TraceContexts = {};\n\n  @property({ attribute: false }) public entries: LogbookEntry[] = [];\n\n  @property({ type: Boolean, attribute: \"narrow\" })\n  public narrow = false;\n\n  @property({ attribute: \"rtl\", type: Boolean })\n  private _rtl = false;\n\n  @property({ type: Boolean, attribute: \"virtualize\", reflect: true })\n  public virtualize = false;\n\n  @property({ type: Boolean, attribute: \"no-icon\" })\n  public noIcon = false;\n\n  @property({ type: Boolean, attribute: \"no-name\" })\n  public noName = false;\n\n  @property({ type: Boolean, attribute: \"relative-time\" })\n  public relativeTime = false;\n\n  // @ts-ignore\n  @restoreScroll(\".container\") private _savedScrollPos?: number;\n\n  protected shouldUpdate(changedProps: PropertyValues<this>) {\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const languageChanged =\n      oldHass === undefined || oldHass.locale !== this.hass.locale;\n\n    return (\n      changedProps.has(\"entries\") ||\n      changedProps.has(\"traceContexts\") ||\n      languageChanged\n    );\n  }\n\n  protected updated(_changedProps: PropertyValues) {\n    const oldHass = _changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (oldHass === undefined || oldHass.language !== this.hass.language) {\n      this._rtl = computeRTL(this.hass);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entries?.length) {\n      return html`\n        <div class=\"container no-entries\" .dir=${emitRTLDirection(this._rtl)}>\n          ${this.hass.localize(\"ui.components.logbook.entries_not_found\")}\n        </div>\n      `;\n    }\n\n    return html`\n      <div\n        class=\"container ha-scrollbar ${classMap({\n          narrow: this.narrow,\n          rtl: this._rtl,\n          \"no-name\": this.noName,\n          \"no-icon\": this.noIcon,\n        })}\"\n        @scroll=${this._saveScrollPos}\n      >\n        ${this.virtualize\n          ? html`<lit-virtualizer\n              scroller\n              class=\"ha-scrollbar\"\n              .items=${this.entries}\n              .renderItem=${this._renderLogbookItem}\n            >\n            </lit-virtualizer>`\n          : this.entries.map((item, index) =>\n              this._renderLogbookItem(item, index)\n            )}\n      </div>\n    `;\n  }\n\n  private _renderLogbookItem = (\n    item: LogbookEntry,\n    index: number\n  ): TemplateResult => {\n    if (!item || index === undefined) {\n      return html``;\n    }\n\n    const seenEntityIds: string[] = [];\n    const previous = this.entries[index - 1];\n    const currentStateObj = item.entity_id\n      ? this.hass.states[item.entity_id]\n      : undefined;\n    const item_username =\n      item.context_user_id && this.userIdToName[item.context_user_id];\n    const domain = item.entity_id\n      ? computeDomain(item.entity_id)\n      : // Domain is there if there is no entity ID.\n        item.domain!;\n    const historicStateObj = item.entity_id ? <HassEntity>(<unknown>{\n          entity_id: item.entity_id,\n          state: item.state,\n          attributes: {\n            // Rebuild the historical state by copying static attributes only\n            device_class: currentStateObj?.attributes.device_class,\n            source_type: currentStateObj?.attributes.source_type,\n            has_date: currentStateObj?.attributes.has_date,\n            has_time: currentStateObj?.attributes.has_time,\n            // We do not want to use dynamic entity pictures (e.g., from media player) for the log book rendering,\n            // as they would present a false state in the log (played media right now vs actual historic data).\n            entity_picture_local: DOMAINS_WITH_DYNAMIC_PICTURE.has(domain)\n              ? undefined\n              : currentStateObj?.attributes.entity_picture_local,\n            entity_picture: DOMAINS_WITH_DYNAMIC_PICTURE.has(domain)\n              ? undefined\n              : currentStateObj?.attributes.entity_picture,\n          },\n        }) : undefined;\n    const overrideImage =\n      !historicStateObj &&\n      !item.icon &&\n      domain &&\n      isComponentLoaded(this.hass, domain)\n        ? brandsUrl({\n            domain: domain!,\n            type: \"icon\",\n            useFallback: true,\n            darkOptimized: this.hass.themes?.darkMode,\n          })\n        : undefined;\n\n    return html`\n      <div class=\"entry-container\">\n        ${index === 0 ||\n        (item?.when &&\n          previous?.when &&\n          new Date(item.when * 1000).toDateString() !==\n            new Date(previous.when * 1000).toDateString())\n          ? html`\n              <h4 class=\"date\">\n                ${formatDate(new Date(item.when * 1000), this.hass.locale)}\n              </h4>\n            `\n          : html``}\n\n        <div class=\"entry ${classMap({ \"no-entity\": !item.entity_id })}\">\n          <div class=\"icon-message\">\n            ${!this.noIcon\n              ? html`\n                  <state-badge\n                    .hass=${this.hass}\n                    .overrideIcon=${item.icon}\n                    .overrideImage=${overrideImage}\n                    .stateObj=${item.icon ? undefined : historicStateObj}\n                    .stateColor=${false}\n                  ></state-badge>\n                `\n              : \"\"}\n            <div class=\"message-relative_time\">\n              <div class=\"message\">\n                ${!this.noName // Used for more-info panel (single entity case)\n                  ? this._renderEntity(item.entity_id, item.name)\n                  : \"\"}\n                ${item.message\n                  ? html`${this._formatMessageWithPossibleEntity(\n                      item.message,\n                      seenEntityIds,\n                      item.entity_id\n                    )}`\n                  : item.source\n                  ? html` ${this._formatMessageWithPossibleEntity(\n                      item.source,\n                      seenEntityIds,\n                      undefined,\n                      \"ui.components.logbook.by\"\n                    )}`\n                  : \"\"}\n                ${item_username\n                  ? ` ${this.hass.localize(\n                      \"ui.components.logbook.by_user\"\n                    )} ${item_username}`\n                  : ``}\n                ${item.context_event_type\n                  ? this._formatEventBy(item, seenEntityIds)\n                  : \"\"}\n                ${item.context_message\n                  ? html` ${this._formatMessageWithPossibleEntity(\n                      item.context_message,\n                      seenEntityIds,\n                      item.context_entity_id,\n                      \"ui.components.logbook.for\"\n                    )}`\n                  : \"\"}\n                ${item.context_entity_id &&\n                !seenEntityIds.includes(item.context_entity_id)\n                  ? // Another entity such as an automation or script\n                    html` ${this.hass.localize(\"ui.components.logbook.for\")}\n                    ${this._renderEntity(\n                      item.context_entity_id,\n                      item.context_entity_id_name\n                    )}`\n                  : \"\"}\n              </div>\n              <div class=\"secondary\">\n                <span\n                  >${formatTimeWithSeconds(\n                    new Date(item.when * 1000),\n                    this.hass.locale\n                  )}</span\n                >\n                -\n                <ha-relative-time\n                  .hass=${this.hass}\n                  .datetime=${item.when * 1000}\n                  capitalize\n                ></ha-relative-time>\n                ${[\"script\", \"automation\"].includes(item.domain!) &&\n                item.context_id! in this.traceContexts\n                  ? html`\n                      -\n                      <a\n                        href=${`/config/${\n                          this.traceContexts[item.context_id!].domain\n                        }/trace/${\n                          this.traceContexts[item.context_id!].domain ===\n                          \"script\"\n                            ? `script.${\n                                this.traceContexts[item.context_id!].item_id\n                              }`\n                            : this.traceContexts[item.context_id!].item_id\n                        }?run_id=${\n                          this.traceContexts[item.context_id!].run_id\n                        }`}\n                        @click=${this._close}\n                        >${this.hass.localize(\n                          \"ui.components.logbook.show_trace\"\n                        )}</a\n                      >\n                    `\n                  : \"\"}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  };\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _formatEventBy(item: LogbookEntry, seenEntities: string[]) {\n    if (item.context_event_type === \"call_service\") {\n      return `${this.hass.localize(\"ui.components.logbook.from_service\")} ${\n        item.context_domain\n      }.${item.context_service}`;\n    }\n    if (item.context_event_type === \"automation_triggered\") {\n      if (seenEntities.includes(item.context_entity_id!)) {\n        return \"\";\n      }\n      seenEntities.push(item.context_entity_id!);\n      return html`${this.hass.localize(\"ui.components.logbook.from_automation\")}\n      ${this._renderEntity(item.context_entity_id, item.context_name)}`;\n    }\n    if (item.context_name) {\n      return `${this.hass.localize(\"ui.components.logbook.from\")} ${\n        item.context_name\n      }`;\n    }\n    if (item.context_event_type === \"state_changed\") {\n      return \"\";\n    }\n    if (item.context_event_type! in EVENT_LOCALIZE_MAP) {\n      return `${this.hass.localize(\n        `ui.components.logbook.${EVENT_LOCALIZE_MAP[item.context_event_type!]}`\n      )}`;\n    }\n    return `${this.hass.localize(\n      \"ui.components.logbook.from\"\n    )} ${this.hass.localize(\"ui.components.logbook.event\")} ${\n      item.context_event_type\n    }`;\n  }\n\n  private _renderEntity(\n    entityId: string | undefined,\n    entityName: string | undefined\n  ) {\n    const hasState = entityId && entityId in this.hass.states;\n    const displayName =\n      entityName ||\n      (hasState\n        ? this.hass.states[entityId].attributes.friendly_name || entityId\n        : entityId);\n    if (!hasState) {\n      return displayName;\n    }\n    return html`<button\n      class=\"link\"\n      @click=${this._entityClicked}\n      .entityId=${entityId}\n    >\n      ${displayName}\n    </button>`;\n  }\n\n  private _formatMessageWithPossibleEntity(\n    message: string,\n    seenEntities: string[],\n    possibleEntity?: string,\n    localizePrefix?: string\n  ) {\n    //\n    // As we are looking at a log(book), we are doing entity_id\n    // \"highlighting\"/\"colorizing\". The goal is to make it easy for\n    // the user to access the entity that caused the event.\n    //\n    // If there is an entity_id in the message that is also in the\n    // state machine, we search the message for the entity_id and\n    // replace it with _renderEntity\n    //\n    if (message.indexOf(\".\") !== -1) {\n      const messageParts = message.split(\" \");\n      for (let i = 0, size = messageParts.length; i < size; i++) {\n        if (messageParts[i] in this.hass.states) {\n          const entityId = messageParts[i];\n          if (seenEntities.includes(entityId)) {\n            return \"\";\n          }\n          seenEntities.push(entityId);\n          const messageEnd = messageParts.splice(i);\n          messageEnd.shift(); // remove the entity\n          return html` ${messageParts.join(\" \")}\n          ${this._renderEntity(\n            entityId,\n            this.hass.states[entityId].attributes.friendly_name\n          )}\n          ${messageEnd.join(\" \")}`;\n        }\n      }\n    }\n    //\n    // When we have a message has a specific entity_id attached to\n    // it, and the entity_id is not in the message, we look\n    // for the friendly name of the entity and replace that with\n    // _renderEntity if its there so the user can quickly get to\n    // that entity.\n    //\n    if (possibleEntity && possibleEntity in this.hass.states) {\n      const possibleEntityName =\n        this.hass.states[possibleEntity].attributes.friendly_name;\n      if (possibleEntityName && message.endsWith(possibleEntityName)) {\n        if (seenEntities.includes(possibleEntity)) {\n          return \"\";\n        }\n        seenEntities.push(possibleEntity);\n        message = message.substring(\n          0,\n          message.length - possibleEntityName.length\n        );\n        return html` ${localizePrefix ? this.hass.localize(localizePrefix) : \"\"}\n        ${message} ${this._renderEntity(possibleEntity, possibleEntityName)}`;\n      }\n    }\n    return message;\n  }\n\n  private _entityClicked(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    if (!entityId) {\n      return;\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n    fireEvent(this, \"hass-more-info\", {\n      entityId: entityId,\n    });\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"closed\"), 500);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleScrollbar,\n      buttonLinkStyle,\n      css`\n        :host([virtualize]) {\n          display: block;\n          height: 100%;\n        }\n\n        .rtl {\n          direction: ltr;\n        }\n\n        .entry-container {\n          width: 100%;\n        }\n\n        .entry {\n          display: flex;\n          width: 100%;\n          line-height: 2em;\n          padding: 8px 16px;\n          box-sizing: border-box;\n          border-top: 1px solid var(--divider-color);\n        }\n\n        .entry.no-entity,\n        .no-name .entry {\n          cursor: default;\n        }\n\n        .entry:hover {\n          background-color: rgba(var(--rgb-primary-text-color), 0.04);\n        }\n\n        .narrow:not(.no-icon) .time {\n          margin-left: 32px;\n        }\n\n        .message-relative_time {\n          display: flex;\n          flex-direction: column;\n        }\n\n        .secondary {\n          font-size: 12px;\n          line-height: 1.7;\n        }\n\n        .secondary a {\n          color: var(--secondary-text-color);\n        }\n\n        .date {\n          margin: 8px 0;\n          padding: 0 16px;\n        }\n\n        .narrow .date {\n          padding: 0 8px;\n        }\n\n        .rtl .date {\n          direction: rtl;\n        }\n\n        .icon-message {\n          display: flex;\n          align-items: center;\n        }\n\n        .no-entries {\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n\n        state-badge {\n          margin-right: 16px;\n          flex-shrink: 0;\n          color: var(--state-icon-color);\n        }\n\n        .message {\n          color: var(--primary-text-color);\n        }\n\n        .no-name .message:first-letter {\n          text-transform: capitalize;\n        }\n\n        a {\n          color: var(--primary-color);\n        }\n\n        .container {\n          max-height: var(--logbook-max-height);\n        }\n\n        .container,\n        lit-virtualizer {\n          height: 100%;\n        }\n\n        lit-virtualizer {\n          contain: size layout !important;\n        }\n\n        .narrow .entry {\n          line-height: 1.5;\n          padding: 8px;\n        }\n\n        .narrow .icon-message state-badge {\n          margin-left: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-logbook-renderer\": HaLogbookRenderer;\n  }\n}\n"],"names":[],"sourceRoot":""}