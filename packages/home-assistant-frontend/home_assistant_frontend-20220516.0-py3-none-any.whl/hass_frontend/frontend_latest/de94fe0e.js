"use strict";(self.webpackChunkhome_assistant_frontend=self.webpackChunkhome_assistant_frontend||[]).push([[55424],{92306:(t,e,n)=>{n.d(e,{v:()=>s});const s=(t,e)=>{const n={};for(const s of t){const t=e(s);t in n?n[t].push(s):n[t]=[s]}return n}},11950:(t,e,n)=>{n.d(e,{l:()=>s});const s=async(t,e)=>new Promise((n=>{const s=e(t,(t=>{s(),n(t)}))}))},81582:(t,e,n)=>{n.d(e,{LZ:()=>s,pB:()=>i,SO:()=>r,iJ:()=>a,Nn:()=>o,Ny:()=>_,T0:()=>u});const s=["migration_error","setup_error","setup_retry"],i=(t,e)=>{const n=new URLSearchParams;return e&&(e.type&&n.append("type",e.type),e.domain&&n.append("domain",e.domain)),t.callApi("GET",`config/config_entries/entry?${n.toString()}`)},r=(t,e,n)=>t.callWS({type:"config_entries/update",entry_id:e,...n}),a=(t,e)=>t.callApi("DELETE",`config/config_entries/entry/${e}`),o=(t,e)=>t.callApi("POST",`config/config_entries/entry/${e}/reload`),_=(t,e)=>t.callWS({type:"config_entries/disable",entry_id:e,disabled_by:"user"}),u=(t,e)=>t.callWS({type:"config_entries/disable",entry_id:e,disabled_by:null})},55424:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{Bm:()=>p,o1:()=>h,iK:()=>b,rl:()=>S,P:()=>v,KU:()=>w,xZ:()=>T,gy:()=>W,ZC:()=>P,_Z:()=>Z,Jj:()=>k,UB:()=>O,jB:()=>j,gM:()=>D,yT:()=>I,_n:()=>$,vR:()=>C,vE:()=>M});var s=n(4535),i=n(59699),r=n(27088),a=n(83008),o=n(70390),_=n(47538),u=n(97330),c=n(92306),l=n(11950),y=n(81582),f=n(74186),d=n(58763),m=t([d]);d=(m.then?await m:m)[0];const g=[],p=()=>({stat_energy_from:"",stat_cost:null,entity_energy_from:null,entity_energy_price:null,number_energy_price:null}),h=()=>({stat_energy_to:"",stat_compensation:null,entity_energy_to:null,entity_energy_price:null,number_energy_price:null}),b=()=>({type:"grid",flow_from:[],flow_to:[],cost_adjustment_day:0}),S=()=>({type:"solar",stat_energy_from:"",config_entry_solar_forecast:null}),v=()=>({type:"battery",stat_energy_from:"",stat_energy_to:""}),w=()=>({type:"gas",stat_energy_from:"",stat_cost:null,entity_energy_from:null,entity_energy_price:null,number_energy_price:null}),T=t=>t.callWS({type:"energy/info"}),W=t=>t.callWS({type:"energy/validate"}),P=t=>t.callWS({type:"energy/get_prefs"}),Z=async(t,e)=>{const n=t.callWS({type:"energy/save_prefs",...e});return E(t),n},k=t=>(0,c.v)(t.energy_sources,(t=>t.type)),E=t=>{g.forEach((e=>{const n=O(t,{key:e});n.clearPrefs(),n._active&&n.refresh()}))},O=(t,e={})=>{let n="_energy";if(e.key){if(!e.key.startsWith("energy_"))throw new Error("Key need to start with energy_");n=`_${e.key}`}if(t.connection[n])return t.connection[n];g.push(e.key);const c=(0,u._)(t.connection,n,(async()=>{if(c.prefs||(c.prefs=await P(t)),c._refreshTimeout&&clearTimeout(c._refreshTimeout),c._active&&(!c.end||c.end>new Date)){const t=new Date;t.getMinutes()>=20&&t.setHours(t.getHours()+1),t.setMinutes(20,0,0),c._refreshTimeout=window.setTimeout((()=>c.refresh()),t.getTime()-Date.now())}return(async(t,e,n,r)=>{const[a,o,_]=await Promise.all([(0,y.pB)(t,{domain:"co2signal"}),(0,l.l)(t.connection,f.LM),T(t)]),u=a.length?a[0]:void 0;let c;if(u)for(const e of o){if(e.config_entry_id!==u.entry_id)continue;const n=t.states[e.entity_id];if(n&&"%"===n.attributes.unit_of_measurement){c=n.entity_id;break}}const m=[],g=[],p=e.energy_sources.filter((t=>"gas"===t.type)),h=await(0,d.Py)(t,p.map((t=>t.stat_energy_from)));for(const n of e.energy_sources)if("solar"!==n.type)if("gas"!==n.type)if("battery"!==n.type){for(const t of n.flow_from){m.push(t.stat_energy_from),g.push(t.stat_energy_from),t.stat_cost&&g.push(t.stat_cost);const e=_.cost_sensors[t.stat_energy_from];e&&g.push(e)}for(const t of n.flow_to){g.push(t.stat_energy_to),t.stat_compensation&&g.push(t.stat_compensation);const e=_.cost_sensors[t.stat_energy_to];e&&g.push(e)}}else g.push(n.stat_energy_from),g.push(n.stat_energy_to);else{if(g.push(n.stat_energy_from),!t.states[n.stat_energy_from])for(const t of h)(null==t?void 0:t.statistic_id)===n.stat_energy_from&&null!=t&&t.unit_of_measurement&&(n.unit_of_measurement="Wh"===(null==t?void 0:t.unit_of_measurement)?"kWh":null==t?void 0:t.unit_of_measurement);n.stat_cost&&g.push(n.stat_cost);const e=_.cost_sensors[n.stat_energy_from];e&&g.push(e)}else g.push(n.stat_energy_from);const b=(0,s.Z)(r||new Date,n),S=(0,i.Z)(n,-1),v=await(0,d.dL)(t,S,r,g,b>35?"month":b>2?"day":"hour");let w;return void 0!==c&&(w=await(async(t,e,n,s,i,r="hour")=>t.callWS({type:"energy/fossil_energy_consumption",start_time:e.toISOString(),end_time:null==i?void 0:i.toISOString(),energy_statistic_ids:n,co2_statistic_id:s,period:r}))(t,n,m,c,r,b>35?"month":b>2?"day":"hour")),Object.values(v).forEach((t=>{t.length&&new Date(t[0].start)>S&&t.unshift({...t[0],start:S.toISOString(),end:S.toISOString(),sum:0,state:0})})),{start:n,end:r,info:_,prefs:e,stats:v,co2SignalConfigEntry:u,co2SignalEntity:c,fossilEnergyConsumption:w}})(t,c.prefs,c.start,c.end)})),m=c.subscribe;c.subscribe=t=>{const e=m(t);return c._active++,()=>{c._active--,c._active<1&&(clearTimeout(c._refreshTimeout),c._refreshTimeout=void 0),e()}},c._active=0,c.prefs=e.prefs;const p=new Date;c.start=p.getHours()>0?(0,r.Z)():(0,a.Z)(),c.end=p.getHours()>0?(0,o.Z)():(0,_.Z)();const h=()=>{c._updatePeriodTimeout=window.setTimeout((()=>{c.start=(0,r.Z)(),c.end=(0,o.Z)(),h()}),(0,i.Z)((0,o.Z)(),1).getTime()-Date.now())};return h(),c.clearPrefs=()=>{c.prefs=void 0},c.setPeriod=(t,e)=>{var n;c.start=t,c.end=e,c.start.getTime()!==(0,r.Z)().getTime()||(null===(n=c.end)||void 0===n?void 0:n.getTime())!==(0,o.Z)().getTime()||c._updatePeriodTimeout?c._updatePeriodTimeout&&(clearTimeout(c._updatePeriodTimeout),c._updatePeriodTimeout=void 0):h()},c},j=t=>t.callWS({type:"energy/solar_forecast"}),D=["m³","ft³"],I=["kWh"],$=[...D,...I],C=(t,e)=>{for(const n of e.energy_sources){if("gas"!==n.type)continue;const e=t.states[n.stat_energy_from];if(e)return D.includes(e.attributes.unit_of_measurement)?"volume":"energy"}},M=(t,e)=>{for(const n of e.energy_sources){if("gas"!==n.type)continue;const e=t.states[n.stat_energy_from];if(null!=e&&e.attributes.unit_of_measurement)return"Wh"===e.attributes.unit_of_measurement?"kWh":e.attributes.unit_of_measurement;if(n.unit_of_measurement)return n.unit_of_measurement}}}))},74186:(t,e,n)=>{n.d(e,{eD:()=>o,Mw:()=>_,vA:()=>u,L3:()=>c,Nv:()=>l,z3:()=>y,hg:()=>f,LM:()=>m,_V:()=>g});var s=n(97330);if(32143==n.j)var i=n(91741);if(32143==n.j)var r=n(85415);var a=n(38346);const o=(t,e)=>e.find((e=>t.states[e.entity_id]&&"battery"===t.states[e.entity_id].attributes.device_class)),_=(t,e)=>e.find((e=>t.states[e.entity_id]&&"battery_charging"===t.states[e.entity_id].attributes.device_class)),u=(t,e)=>{if(e.name)return e.name;const n=t.states[e.entity_id];return n?(0,i.C)(n):e.entity_id},c=(t,e)=>t.callWS({type:"config/entity_registry/get",entity_id:e}),l=(t,e,n)=>t.callWS({type:"config/entity_registry/update",entity_id:e,...n}),y=(t,e)=>t.callWS({type:"config/entity_registry/remove",entity_id:e}),f=t=>t.sendMessagePromise({type:"config/entity_registry/list"}),d=(t,e)=>t.subscribeEvents((0,a.D)((()=>f(t).then((t=>e.setState(t,!0)))),500,!0),"entity_registry_updated"),m=(t,e)=>(0,s.B)("_entityRegistry",f,d,t,e),g=t=>t.sort(((t,e)=>(0,r.f)(t.name||"",e.name||"")))},58763:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{iq:()=>l,vq:()=>y,_J:()=>f,Nu:()=>g,uR:()=>p,Py:()=>h,dL:()=>b,h_:()=>S,Cj:()=>v,hN:()=>w,Kj:()=>T,q6:()=>W,Nw:()=>P,j2:()=>Z});var s=n(58831),i=n(29171),r=n(22311),a=n(91741),o=t([i]);i=(o.then?await o:o)[0];const _=["climate","humidifier","water_heater"],u=["climate","humidifier","input_datetime","thermostat","water_heater"],c=["temperature","current_temperature","target_temp_low","target_temp_high","hvac_action","humidity","mode"],l=(t,e)=>!t.states[e]||u.includes((0,s.M)(e)),y=(t,e,n,s,i=!1,r,a=!0,o)=>{let _="history/period";return n&&(_+="/"+n.toISOString()),_+="?filter_entity_id="+e,s&&(_+="&end_time="+s.toISOString()),i&&(_+="&skip_initial_state"),void 0!==r&&(_+=`&significant_changes_only=${Number(r)}`),a&&(_+="&minimal_response"),o&&(_+="&no_attributes"),t.callApi("GET",_)},f=(t,e,n,s)=>t.callApi("GET",`history/period/${e.toISOString()}?end_time=${n.toISOString()}&minimal_response${s?`&filter_entity_id=${s}`:""}${s&&!l(t,s)?"&no_attributes":""}`),d=(t,e)=>t.state===e.state&&(!t.attributes||!e.attributes||c.every((n=>t.attributes[n]===e.attributes[n]))),m=t=>"unit_of_measurement"in t.attributes||"state_class"in t.attributes,g=(t,e,n)=>{const o={},u=[];if(!e)return{line:[],timeline:[]};e.forEach((e=>{if(0===e.length)return;const r=e[0].entity_id,_=r in t.states?t.states[r]:void 0,c=!_&&e.find((t=>t.attributes&&m(t)));let l;l=_&&m(_)?_.attributes.unit_of_measurement||" ":c?c.attributes.unit_of_measurement||" ":{climate:t.config.unit_system.temperature,counter:"#",humidifier:"%",input_number:"#",number:"#",water_heater:t.config.unit_system.temperature}[(0,s.M)(r)],l?l in o?o[l].push(e):o[l]=[e]:u.push(((t,e,n)=>{const s=[],r=n.length-1;for(const a of n)s.length>0&&a.state===s[s.length-1].state||(a.entity_id||(a.attributes=n[r].attributes,a.entity_id=n[r].entity_id),s.push({state_localize:(0,i.D)(t,a,e),state:a.state,last_changed:a.last_changed}));return{name:(0,a.C)(n[0]),entity_id:n[0].entity_id,data:s}})(n,t.locale,e))}));return{line:Object.keys(o).map((t=>((t,e)=>{const n=[];for(const t of e){const e=t[t.length-1],s=(0,r.N)(e),i=[];for(const e of t){let t;if(_.includes(s)){t={state:e.state,last_changed:e.last_updated,attributes:{}};for(const n of c)n in e.attributes&&(t.attributes[n]=e.attributes[n])}else t=e;i.length>1&&d(t,i[i.length-1])&&d(t,i[i.length-2])||i.push(t)}n.push({domain:s,name:(0,a.C)(e),entity_id:e.entity_id,states:i})}return{unit:t,identifier:e.map((t=>t[0].entity_id)).join(""),data:n}})(t,o[t]))),timeline:u}},p=(t,e)=>t.callWS({type:"history/list_statistic_ids",statistic_type:e}),h=(t,e)=>t.callWS({type:"recorder/get_statistics_metadata",statistic_ids:e}),b=(t,e,n,s,i="hour")=>t.callWS({type:"history/statistics_during_period",start_time:e.toISOString(),end_time:null==n?void 0:n.toISOString(),statistic_ids:s,period:i}),S=t=>t.callWS({type:"recorder/validate_statistics"}),v=(t,e,n)=>t.callWS({type:"recorder/update_statistics_metadata",statistic_id:e,unit_of_measurement:n}),w=(t,e)=>t.callWS({type:"recorder/clear_statistics",statistic_ids:e}),T=t=>{if(!t||t.length<2)return null;const e=t[t.length-1].sum;if(null===e)return null;const n=t[0].sum;return null===n?e:e-n},W=(t,e)=>{let n=null;for(const s of e){if(!(s in t))continue;const e=T(t[s]);null!==e&&(null===n?n=e:n+=e)}return n},P=(t,e)=>t.some((t=>null!==t[e])),Z=(t,e,n,s)=>t.callWS({type:"recorder/adjust_sum_statistics",statistic_id:e,start_time:n,adjustment:s})}))}}]);