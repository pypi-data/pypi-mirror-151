{"version":3,"file":"640ac12f.js","mappings":";;AA2LA;AACA;;;AAGA;;AAGA;;AAIA;;;;;AAcA;AACA;AACA;;AAEA;;AAGA;;AArBA;;;AAKA;;;;;AA3BA;;AAEA;;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhJA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-logbook-card.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { throttle } from \"../../../common/util/throttle\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport { fetchUsers } from \"../../../data/user\";\nimport { getLogbookData, LogbookEntry } from \"../../../data/logbook\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../../logbook/ha-logbook\";\nimport { findEntities } from \"../common/find-entities\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport \"../components/hui-warning\";\nimport type { EntityConfig } from \"../entity-rows/types\";\nimport type { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport type { LogbookCardConfig } from \"./types\";\n\n@customElement(\"hui-logbook-card\")\nexport class HuiLogbookCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-logbook-card-editor\");\n    return document.createElement(\"hui-logbook-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFill: string[]\n  ) {\n    const includeDomains = [\"light\", \"switch\"];\n    const maxEntities = 3;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFill,\n      includeDomains\n    );\n\n    return {\n      entities: foundEntities,\n    };\n  }\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config?: LogbookCardConfig;\n\n  @state() private _logbookEntries?: LogbookEntry[];\n\n  @state() private _configEntities?: EntityConfig[];\n\n  @state() private _userIdToName = {};\n\n  private _lastLogbookDate?: Date;\n\n  private _fetchUserPromise?: Promise<void>;\n\n  private _error?: string;\n\n  private _throttleGetLogbookEntries = throttle(() => {\n    this._getLogBookData();\n  }, 10000);\n\n  public getCardSize(): number {\n    return 9 + (this._config?.title ? 1 : 0);\n  }\n\n  public setConfig(config: LogbookCardConfig): void {\n    if (!config.entities.length) {\n      throw new Error(\"Entities must be specified\");\n    }\n\n    this._configEntities = processConfigEntities<EntityConfig>(config.entities);\n\n    this._config = {\n      hours_to_show: 24,\n      ...config,\n    };\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (\n      changedProps.has(\"_config\") ||\n      changedProps.has(\"_persons\") ||\n      changedProps.has(\"_logbookEntries\")\n    ) {\n      return true;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      !this._configEntities ||\n      !oldHass ||\n      oldHass.themes !== this.hass!.themes ||\n      oldHass.locale !== this.hass!.locale\n    ) {\n      return true;\n    }\n\n    for (const entity of this._configEntities) {\n      if (oldHass.states[entity.entity] !== this.hass!.states[entity.entity]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  protected firstUpdated(): void {\n    this._fetchUserPromise = this._fetchUserNames();\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const configChanged = changedProperties.has(\"_config\");\n    const hassChanged = changedProperties.has(\"hass\");\n    const oldHass = changedProperties.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProperties.get(\"_config\") as LogbookCardConfig;\n\n    if (\n      (hassChanged && oldHass?.themes !== this.hass.themes) ||\n      (configChanged && oldConfig?.theme !== this._config.theme)\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n\n    if (\n      configChanged &&\n      (oldConfig?.entities !== this._config.entities ||\n        oldConfig?.hours_to_show !== this._config!.hours_to_show)\n    ) {\n      this._logbookEntries = undefined;\n      this._lastLogbookDate = undefined;\n\n      if (!this._configEntities) {\n        return;\n      }\n\n      this._throttleGetLogbookEntries();\n      return;\n    }\n\n    if (\n      oldHass &&\n      this._configEntities!.some(\n        (entity) =>\n          oldHass.states[entity.entity] !== this.hass!.states[entity.entity]\n      )\n    ) {\n      // wait for commit of data (we only account for the default setting of 1 sec)\n      setTimeout(this._throttleGetLogbookEntries, 1000);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    if (!isComponentLoaded(this.hass, \"logbook\")) {\n      return html`\n        <hui-warning>\n          ${this.hass.localize(\n            \"ui.components.logbook.component_not_loaded\"\n          )}</hui-warning\n        >\n      `;\n    }\n\n    return html`\n      <ha-card\n        .header=${this._config!.title}\n        class=${classMap({ \"no-header\": !this._config!.title })}\n      >\n        <div class=\"content\">\n          ${this._error\n            ? html`\n                <div class=\"no-entries\">\n                  ${`${this.hass.localize(\n                    \"ui.components.logbook.retrieval_error\"\n                  )}: ${this._error}`}\n                </div>\n              `\n            : !this._logbookEntries\n            ? html`\n                <ha-circular-progress\n                  active\n                  alt=${this.hass.localize(\"ui.common.loading\")}\n                ></ha-circular-progress>\n              `\n            : this._logbookEntries.length\n            ? html`\n                <ha-logbook\n                  narrow\n                  relative-time\n                  virtualize\n                  .hass=${this.hass}\n                  .entries=${this._logbookEntries}\n                  .userIdToName=${this._userIdToName}\n                ></ha-logbook>\n              `\n            : html`\n                <div class=\"no-entries\">\n                  ${this.hass.localize(\n                    \"ui.components.logbook.entries_not_found\"\n                  )}\n                </div>\n              `}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private async _getLogBookData() {\n    if (\n      !this.hass ||\n      !this._config ||\n      !isComponentLoaded(this.hass, \"logbook\")\n    ) {\n      return;\n    }\n\n    const hoursToShowDate = new Date(\n      new Date().getTime() - this._config!.hours_to_show! * 60 * 60 * 1000\n    );\n    const lastDate = this._lastLogbookDate || hoursToShowDate;\n    const now = new Date();\n    let newEntries: LogbookEntry[];\n\n    try {\n      [newEntries] = await Promise.all([\n        getLogbookData(\n          this.hass,\n          lastDate.toISOString(),\n          now.toISOString(),\n          this._configEntities!.map((entity) => entity.entity).toString()\n        ),\n        this._fetchUserPromise,\n      ]);\n    } catch (err: any) {\n      this._error = err.message;\n      return;\n    }\n\n    const logbookEntries = this._logbookEntries\n      ? [...newEntries, ...this._logbookEntries]\n      : newEntries;\n\n    this._logbookEntries = logbookEntries.filter(\n      (logEntry) => new Date(logEntry.when * 1000) > hoursToShowDate\n    );\n\n    this._lastLogbookDate = now;\n  }\n\n  private async _fetchUserNames() {\n    const userIdToName = {};\n\n    // Start loading users\n    const userProm = this.hass.user?.is_admin && fetchUsers(this.hass);\n\n    // Process persons\n    Object.values(this.hass!.states).forEach((entity) => {\n      if (\n        entity.attributes.user_id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        this._userIdToName[entity.attributes.user_id] =\n          entity.attributes.friendly_name;\n      }\n    });\n\n    // Process users\n    if (userProm) {\n      const users = await userProm;\n      for (const user of users) {\n        if (!(user.id in userIdToName)) {\n          userIdToName[user.id] = user.name;\n        }\n      }\n    }\n\n    this._userIdToName = userIdToName;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-card {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n        }\n\n        .content {\n          padding: 0 16px 16px;\n        }\n\n        .no-header .content {\n          padding-top: 16px;\n        }\n\n        .no-entries {\n          text-align: center;\n          padding: 16px;\n          color: var(--secondary-text-color);\n        }\n\n        ha-logbook {\n          height: 385px;\n          display: block;\n        }\n\n        ha-circular-progress {\n          display: flex;\n          justify-content: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-logbook-card\": HuiLogbookCard;\n  }\n}\n"],"names":[],"sourceRoot":""}