{"version":3,"file":"44ebf487.js","mappings":";;;;AAMA;ACOA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;ACjBA;;;;;AAAA;ACYA;AACA;AALA;;;AC4FA;AACA;;AAEA;;;;;;;AAOA;;;;;;AAQA;AACA;;AAEA;;AAEA;;;AAIA;;AAIA;;AAEA;AAEA;;;AAIA;;AAIA;;AAEA;;AAGA;;AAKA;AACA;;;AAGA;;;;AAMA;;;AAKA;;;AAIA;AAGA;;;AAKA;AACA;;;AAGA;AAIA;AACA;;AAEA;AAIA;AACA;;;AAGA;AACA;;AAEA;;AAGA;;;AAKA;;;;AAMA;;AAEA;;AAIA;AAEA;;AAGA;AACA;;;AAGA;AACA;;;;;AA9LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACTA;;AAEA;AACA;;;;;AAOA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAlCA;ACgCA;AAGA;AAGA;;;AAYA;;AAEA;AACA;;;;;;;;AAUA;AACA;AACA;AACA;;AAEA;AAEA;AAhCA;;;AAKA;;AA4BA;AA3CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9BA;;ACkFA;AAMA;;AAEA;;;AAIA;AACA;;AAEA;;AAxBA;AACA;AACA;;;;AAoDA;;AAOA;;AAEA;;AAGA;;AAEA;;AAKA;AACA;AAIA;AAIA;AACA;;;;;AAMA;AAGA;AAcA;AAKA;AAGA;AAQA;AAIA;;;;AAQA;;;;AAOA;AACA;;;AAGA;;;AAKA;AAYA;AACA;;AAIA;;;;;;;AA2BA;;AAqCA;AACA;;AAEA;AAPA;AAsCA;AAIA;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1VA","sources":["webpack://home-assistant-frontend/./src/components/ha-circular-progress.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-default.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-dialog.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-history.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-logbook.ts","webpack://home-assistant-frontend/./src/panels/logbook/ha-logbook.ts"],"sourcesContent":["import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 8px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 20px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 20px 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 20px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(\n          --ha-dialog-border-radius,\n          var(--ha-card-border-radius, 4px)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 40px;\n        margin-inline-end: 40px;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../components/ha-attributes\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"more-info-default\")\nclass MoreInfoDefault extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    return html`<ha-attributes\n      .hass=${this.hass}\n      .stateObj=${this.stateObj}\n    ></ha-attributes>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-default\": MoreInfoDefault;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-tab\";\nimport \"@material/mwc-tab-bar\";\nimport { mdiClose, mdiCog, mdiPencil } from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport {\n  DOMAINS_MORE_INFO_NO_HISTORY,\n  DOMAINS_WITH_MORE_INFO,\n} from \"../../common/const\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { navigate } from \"../../common/navigate\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-header-bar\";\nimport \"../../components/ha-icon-button\";\nimport { removeEntityRegistryEntry } from \"../../data/entity_registry\";\nimport { CONTINUOUS_DOMAINS } from \"../../data/logbook\";\nimport { showEntityEditorDialog } from \"../../panels/config/entities/show-dialog-entity-editor\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport \"../../state-summary/state-card-content\";\nimport { HomeAssistant } from \"../../types\";\nimport { showConfirmationDialog } from \"../generic/show-dialog-box\";\nimport { replaceDialog } from \"../make-dialog-manager\";\nimport \"./controls/more-info-default\";\nimport \"./ha-more-info-history\";\nimport \"./ha-more-info-logbook\";\nimport \"./more-info-content\";\n\nconst DOMAINS_NO_INFO = [\"camera\", \"configurator\"];\n/**\n * Entity domains that should be editable *if* they have an id present;\n * {@see shouldShowEditIcon}.\n * */\nconst EDITABLE_DOMAINS_WITH_ID = [\"scene\", \"automation\"];\n/**\n * Entity Domains that should always be editable; {@see shouldShowEditIcon}.\n * */\nconst EDITABLE_DOMAINS = [\"script\"];\n\nexport interface MoreInfoDialogParams {\n  entityId: string | null;\n}\n\n@customElement(\"ha-more-info-dialog\")\nexport class MoreInfoDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public large = false;\n\n  @state() private _entityId?: string | null;\n\n  @state() private _currTabIndex = 0;\n\n  public showDialog(params: MoreInfoDialogParams) {\n    this._entityId = params.entityId;\n    if (!this._entityId) {\n      this.closeDialog();\n      return;\n    }\n    this.large = false;\n  }\n\n  public closeDialog() {\n    this._entityId = undefined;\n    this._currTabIndex = 0;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected shouldShowEditIcon(domain, stateObj): boolean {\n    if (__DEMO__) {\n      return false;\n    }\n    if (EDITABLE_DOMAINS_WITH_ID.includes(domain) && stateObj.attributes.id) {\n      return true;\n    }\n    if (EDITABLE_DOMAINS.includes(domain)) {\n      return true;\n    }\n    if (domain === \"person\" && stateObj.attributes.editable !== \"false\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected render() {\n    if (!this._entityId) {\n      return html``;\n    }\n    const entityId = this._entityId;\n    const stateObj = this.hass.states[entityId];\n\n    if (!stateObj) {\n      return html``;\n    }\n\n    const domain = computeDomain(entityId);\n    const name = computeStateName(stateObj);\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${name}\n        hideActions\n        data-domain=${domain}\n      >\n        <div slot=\"heading\" class=\"heading\">\n          <ha-header-bar>\n            <ha-icon-button\n              slot=\"navigationIcon\"\n              dialogAction=\"cancel\"\n              .label=${this.hass.localize(\n                \"ui.dialogs.more_info_control.dismiss\"\n              )}\n              .path=${mdiClose}\n            ></ha-icon-button>\n            <div\n              slot=\"title\"\n              class=\"main-title\"\n              .title=${name}\n              @click=${this._enlarge}\n            >\n              ${name}\n            </div>\n            ${this.hass.user!.is_admin\n              ? html`\n                  <ha-icon-button\n                    slot=\"actionItems\"\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.settings\"\n                    )}\n                    .path=${mdiCog}\n                    @click=${this._gotoSettings}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n            ${this.shouldShowEditIcon(domain, stateObj)\n              ? html`\n                  <ha-icon-button\n                    slot=\"actionItems\"\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.edit\"\n                    )}\n                    .path=${mdiPencil}\n                    @click=${this._gotoEdit}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n          </ha-header-bar>\n          ${DOMAINS_WITH_MORE_INFO.includes(domain) &&\n          (this._computeShowHistoryComponent(entityId) ||\n            this._computeShowLogBookComponent(entityId))\n            ? html`\n                <mwc-tab-bar\n                  .activeIndex=${this._currTabIndex}\n                  @MDCTabBar:activated=${this._handleTabChanged}\n                >\n                  <mwc-tab\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.details\"\n                    )}\n                    dialogInitialFocus\n                  ></mwc-tab>\n                  <mwc-tab\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.history\"\n                    )}\n                  ></mwc-tab>\n                </mwc-tab-bar>\n              `\n            : \"\"}\n        </div>\n        <div class=\"content\" tabindex=\"-1\" dialogInitialFocus>\n          ${cache(\n            this._currTabIndex === 0\n              ? html`\n                  ${DOMAINS_NO_INFO.includes(domain)\n                    ? \"\"\n                    : html`\n                        <state-card-content\n                          in-dialog\n                          .stateObj=${stateObj}\n                          .hass=${this.hass}\n                        ></state-card-content>\n                      `}\n                  ${DOMAINS_WITH_MORE_INFO.includes(domain) ||\n                  !this._computeShowHistoryComponent(entityId)\n                    ? \"\"\n                    : html`<ha-more-info-history\n                        .hass=${this.hass}\n                        .entityId=${this._entityId}\n                      ></ha-more-info-history>`}\n                  ${DOMAINS_WITH_MORE_INFO.includes(domain) ||\n                  !this._computeShowLogBookComponent(entityId)\n                    ? \"\"\n                    : html`<ha-more-info-logbook\n                        .hass=${this.hass}\n                        .entityId=${this._entityId}\n                      ></ha-more-info-logbook>`}\n                  <more-info-content\n                    .stateObj=${stateObj}\n                    .hass=${this.hass}\n                  ></more-info-content>\n                  ${stateObj.attributes.restored\n                    ? html`\n                        <p>\n                          ${this.hass.localize(\n                            \"ui.dialogs.more_info_control.restored.not_provided\"\n                          )}\n                        </p>\n                        <p>\n                          ${this.hass.localize(\n                            \"ui.dialogs.more_info_control.restored.remove_intro\"\n                          )}\n                        </p>\n                        <mwc-button\n                          class=\"warning\"\n                          @click=${this._removeEntity}\n                        >\n                          ${this.hass.localize(\n                            \"ui.dialogs.more_info_control.restored.remove_action\"\n                          )}\n                        </mwc-button>\n                      `\n                    : \"\"}\n                `\n              : html`\n                  <ha-more-info-history\n                    .hass=${this.hass}\n                    .entityId=${this._entityId}\n                  ></ha-more-info-history>\n                  <ha-more-info-logbook\n                    .hass=${this.hass}\n                    .entityId=${this._entityId}\n                  ></ha-more-info-logbook>\n                `\n          )}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _enlarge() {\n    this.large = !this.large;\n  }\n\n  private _computeShowHistoryComponent(entityId) {\n    return (\n      isComponentLoaded(this.hass, \"history\") &&\n      !DOMAINS_MORE_INFO_NO_HISTORY.includes(computeDomain(entityId))\n    );\n  }\n\n  private _computeShowLogBookComponent(entityId): boolean {\n    if (!isComponentLoaded(this.hass, \"logbook\")) {\n      return false;\n    }\n\n    const stateObj = this.hass.states[entityId];\n    if (!stateObj || stateObj.attributes.unit_of_measurement) {\n      return false;\n    }\n\n    const domain = computeDomain(entityId);\n    if (\n      CONTINUOUS_DOMAINS.includes(domain) ||\n      DOMAINS_MORE_INFO_NO_HISTORY.includes(domain)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private _removeEntity() {\n    const entityId = this._entityId!;\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.dialogs.more_info_control.restored.confirm_remove_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.dialogs.more_info_control.restored.confirm_remove_text\"\n      ),\n      confirmText: this.hass.localize(\"ui.common.remove\"),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirm: () => {\n        removeEntityRegistryEntry(this.hass, entityId);\n      },\n    });\n  }\n\n  private _gotoSettings() {\n    replaceDialog(this);\n    showEntityEditorDialog(this, {\n      entity_id: this._entityId!,\n    });\n    this.closeDialog();\n  }\n\n  private _gotoEdit() {\n    const stateObj = this.hass.states[this._entityId!];\n    const domain = computeDomain(this._entityId!);\n    let idToPassThroughUrl = stateObj.entity_id;\n    if (EDITABLE_DOMAINS_WITH_ID.includes(domain) || domain === \"person\") {\n      idToPassThroughUrl = stateObj.attributes.id;\n    }\n\n    navigate(`/config/${domain}/edit/${idToPassThroughUrl}`);\n    this.closeDialog();\n  }\n\n  private _handleTabChanged(ev: CustomEvent): void {\n    const newTab = ev.detail.index;\n    if (newTab === this._currTabIndex) {\n      return;\n    }\n\n    this._currTabIndex = ev.detail.index;\n  }\n\n  static get styles() {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-surface-position: static;\n          --dialog-content-position: static;\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          display: block;\n        }\n        .content {\n          outline: none;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-header-bar {\n            --mdc-theme-primary: var(--app-header-background-color);\n            --mdc-theme-on-primary: var(--app-header-text-color, white);\n            border-bottom: none;\n          }\n        }\n\n        .heading {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        @media all and (min-width: 451px) and (min-height: 501px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 90vw;\n          }\n\n          .content {\n            width: 352px;\n          }\n\n          ha-header-bar {\n            width: 400px;\n          }\n\n          .main-title {\n            overflow: hidden;\n            text-overflow: ellipsis;\n            cursor: default;\n          }\n\n          ha-dialog[data-domain=\"camera\"] .content,\n          ha-dialog[data-domain=\"camera\"] ha-header-bar {\n            width: auto;\n          }\n\n          :host([large]) .content {\n            width: calc(90vw - 48px);\n          }\n\n          :host([large]) ha-dialog[data-domain=\"camera\"] .content,\n          :host([large]) ha-header-bar {\n            width: 90vw;\n          }\n        }\n\n        ha-dialog[data-domain=\"camera\"] {\n          --dialog-content-padding: 0;\n        }\n\n        state-card-content,\n        ha-more-info-history,\n        ha-more-info-logbook:not(:last-child) {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-dialog\": MoreInfoDialog;\n  }\n}\n","import { startOfYesterday } from \"date-fns\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { throttle } from \"../../common/util/throttle\";\nimport \"../../components/chart/state-history-charts\";\nimport { getRecentWithCache } from \"../../data/cached-history\";\nimport { HistoryResult } from \"../../data/history\";\nimport { HomeAssistant } from \"../../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    closed: undefined;\n  }\n}\n\n@customElement(\"ha-more-info-history\")\nexport class MoreInfoHistory extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  @state() private _stateHistory?: HistoryResult;\n\n  private _showMoreHref = \"\";\n\n  private _throttleGetStateHistory = throttle(() => {\n    this._getStateHistory();\n  }, 10000);\n\n  protected render(): TemplateResult {\n    if (!this.entityId) {\n      return html``;\n    }\n\n    return html`${isComponentLoaded(this.hass, \"history\")\n      ? html` <div class=\"header\">\n            <div class=\"title\">\n              ${this.hass.localize(\"ui.dialogs.more_info_control.history\")}\n            </div>\n            <a href=${this._showMoreHref} @click=${this._close}\n              >${this.hass.localize(\n                \"ui.dialogs.more_info_control.show_more\"\n              )}</a\n            >\n          </div>\n          <state-history-charts\n            up-to-now\n            .hass=${this.hass}\n            .historyData=${this._stateHistory}\n            .isLoadingData=${!this._stateHistory}\n          ></state-history-charts>`\n      : \"\"}`;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"entityId\")) {\n      this._stateHistory = undefined;\n\n      if (!this.entityId) {\n        return;\n      }\n\n      this._showMoreHref = `/history?entity_id=${\n        this.entityId\n      }&start_date=${startOfYesterday().toISOString()}`;\n\n      this._throttleGetStateHistory();\n      return;\n    }\n\n    if (!this.entityId || !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      oldHass &&\n      this.hass.states[this.entityId] !== oldHass?.states[this.entityId]\n    ) {\n      // wait for commit of data (we only account for the default setting of 1 sec)\n      setTimeout(this._throttleGetStateHistory, 1000);\n    }\n  }\n\n  private async _getStateHistory(): Promise<void> {\n    if (!isComponentLoaded(this.hass, \"history\")) {\n      return;\n    }\n    this._stateHistory = await getRecentWithCache(\n      this.hass!,\n      this.entityId,\n      {\n        cacheKey: `more_info.${this.entityId}`,\n        hoursToShow: 24,\n      },\n      this.hass!.localize,\n      this.hass!.language\n    );\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"closed\"), 500);\n  }\n\n  static get styles() {\n    return [\n      css`\n        .header {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        .header > a,\n        a:visited {\n          color: var(--primary-color);\n        }\n        .title {\n          font-family: var(--paper-font-title_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-title_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-subhead_-_font-size);\n          font-weight: var(--paper-font-title_-_font-weight);\n          letter-spacing: var(--paper-font-title_-_letter-spacing);\n          line-height: var(--paper-font-title_-_line-height);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-history\": MoreInfoHistory;\n  }\n}\n","import { startOfYesterday } from \"date-fns\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { throttle } from \"../../common/util/throttle\";\nimport \"../../components/ha-circular-progress\";\nimport { getLogbookData, LogbookEntry } from \"../../data/logbook\";\nimport { loadTraceContexts, TraceContexts } from \"../../data/trace\";\nimport { fetchUsers } from \"../../data/user\";\nimport \"../../panels/logbook/ha-logbook\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-more-info-logbook\")\nexport class MoreInfoLogbook extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  @state() private _logbookEntries?: LogbookEntry[];\n\n  @state() private _traceContexts?: TraceContexts;\n\n  @state() private _userIdToName = {};\n\n  private _lastLogbookDate?: Date;\n\n  private _fetchUserPromise?: Promise<void>;\n\n  private _error?: string;\n\n  private _showMoreHref = \"\";\n\n  private _throttleGetLogbookEntries = throttle(() => {\n    this._getLogBookData();\n  }, 10000);\n\n  protected render(): TemplateResult {\n    if (!this.entityId) {\n      return html``;\n    }\n    const stateObj = this.hass.states[this.entityId];\n\n    if (!stateObj) {\n      return html``;\n    }\n\n    return html`\n      ${isComponentLoaded(this.hass, \"logbook\")\n        ? this._error\n          ? html`<div class=\"no-entries\">\n              ${`${this.hass.localize(\n                \"ui.components.logbook.retrieval_error\"\n              )}: ${this._error}`}\n            </div>`\n          : !this._logbookEntries\n          ? html`\n              <ha-circular-progress\n                active\n                alt=${this.hass.localize(\"ui.common.loading\")}\n              ></ha-circular-progress>\n            `\n          : this._logbookEntries.length\n          ? html`\n              <div class=\"header\">\n                <div class=\"title\">\n                  ${this.hass.localize(\"ui.dialogs.more_info_control.logbook\")}\n                </div>\n                <a href=${this._showMoreHref} @click=${this._close}\n                  >${this.hass.localize(\n                    \"ui.dialogs.more_info_control.show_more\"\n                  )}</a\n                >\n              </div>\n              <ha-logbook\n                narrow\n                no-icon\n                no-name\n                relative-time\n                .hass=${this.hass}\n                .entries=${this._logbookEntries}\n                .traceContexts=${this._traceContexts}\n                .userIdToName=${this._userIdToName}\n              ></ha-logbook>\n            `\n          : html`<div class=\"no-entries\">\n              ${this.hass.localize(\"ui.components.logbook.entries_not_found\")}\n            </div>`\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated(): void {\n    this._fetchUserPromise = this._fetchUserNames();\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"entityId\")) {\n      this._lastLogbookDate = undefined;\n      this._logbookEntries = undefined;\n\n      if (!this.entityId) {\n        return;\n      }\n\n      this._showMoreHref = `/logbook?entity_id=${\n        this.entityId\n      }&start_date=${startOfYesterday().toISOString()}`;\n\n      this._throttleGetLogbookEntries();\n      return;\n    }\n\n    if (!this.entityId || !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      oldHass &&\n      this.hass.states[this.entityId] !== oldHass?.states[this.entityId]\n    ) {\n      // wait for commit of data (we only account for the default setting of 1 sec)\n      setTimeout(this._throttleGetLogbookEntries, 1000);\n    }\n  }\n\n  private async _getLogBookData() {\n    if (!isComponentLoaded(this.hass, \"logbook\")) {\n      return;\n    }\n    const lastDate =\n      this._lastLogbookDate ||\n      new Date(new Date().getTime() - 24 * 60 * 60 * 1000);\n    const now = new Date();\n    let newEntries;\n    let traceContexts;\n\n    try {\n      [newEntries, traceContexts] = await Promise.all([\n        getLogbookData(\n          this.hass,\n          lastDate.toISOString(),\n          now.toISOString(),\n          this.entityId\n        ),\n        this.hass.user?.is_admin ? loadTraceContexts(this.hass) : {},\n        this._fetchUserPromise,\n      ]);\n    } catch (err: any) {\n      this._error = err.message;\n    }\n\n    this._logbookEntries = this._logbookEntries\n      ? [...newEntries, ...this._logbookEntries]\n      : newEntries;\n    this._lastLogbookDate = now;\n    this._traceContexts = traceContexts;\n  }\n\n  private async _fetchUserNames() {\n    const userIdToName = {};\n\n    // Start loading users\n    const userProm = this.hass.user?.is_admin && fetchUsers(this.hass);\n\n    // Process persons\n    Object.values(this.hass.states).forEach((entity) => {\n      if (\n        entity.attributes.user_id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        this._userIdToName[entity.attributes.user_id] =\n          entity.attributes.friendly_name;\n      }\n    });\n\n    // Process users\n    if (userProm) {\n      const users = await userProm;\n      for (const user of users) {\n        if (!(user.id in userIdToName)) {\n          userIdToName[user.id] = user.name;\n        }\n      }\n    }\n\n    this._userIdToName = userIdToName;\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"closed\"), 500);\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        .no-entries {\n          text-align: center;\n          padding: 16px;\n          color: var(--secondary-text-color);\n        }\n        ha-logbook {\n          --logbook-max-height: 250px;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-logbook {\n            --logbook-max-height: unset;\n          }\n        }\n        ha-circular-progress {\n          display: flex;\n          justify-content: center;\n        }\n        .header {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        .header > a,\n        a:visited {\n          color: var(--primary-color);\n        }\n        .title {\n          font-family: var(--paper-font-title_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-title_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-subhead_-_font-size);\n          font-weight: var(--paper-font-title_-_font-weight);\n          letter-spacing: var(--paper-font-title_-_letter-spacing);\n          line-height: var(--paper-font-title_-_line-height);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-logbook\": MoreInfoLogbook;\n  }\n}\n","import \"@lit-labs/virtualizer\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { DOMAINS_WITH_DYNAMIC_PICTURE } from \"../../common/const\";\nimport { formatDate } from \"../../common/datetime/format_date\";\nimport { formatTimeWithSeconds } from \"../../common/datetime/format_time\";\nimport { restoreScroll } from \"../../common/decorators/restore-scroll\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../common/entity/domain_icon\";\nimport { computeRTL, emitRTLDirection } from \"../../common/util/compute_rtl\";\nimport \"../../components/entity/state-badge\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-relative-time\";\nimport { LogbookEntry } from \"../../data/logbook\";\nimport { TraceContexts } from \"../../data/trace\";\nimport {\n  haStyle,\n  haStyleScrollbar,\n  buttonLinkStyle,\n} from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\n\nconst EVENT_LOCALIZE_MAP = {\n  script_started: \"from_script\",\n};\n\n@customElement(\"ha-logbook\")\nclass HaLogbook extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public userIdToName = {};\n\n  @property({ attribute: false })\n  public traceContexts: TraceContexts = {};\n\n  @property({ attribute: false }) public entries: LogbookEntry[] = [];\n\n  @property({ type: Boolean, attribute: \"narrow\" })\n  public narrow = false;\n\n  @property({ attribute: \"rtl\", type: Boolean })\n  private _rtl = false;\n\n  @property({ type: Boolean, attribute: \"virtualize\", reflect: true })\n  public virtualize = false;\n\n  @property({ type: Boolean, attribute: \"no-icon\" })\n  public noIcon = false;\n\n  @property({ type: Boolean, attribute: \"no-name\" })\n  public noName = false;\n\n  @property({ type: Boolean, attribute: \"relative-time\" })\n  public relativeTime = false;\n\n  // @ts-ignore\n  @restoreScroll(\".container\") private _savedScrollPos?: number;\n\n  protected shouldUpdate(changedProps: PropertyValues<this>) {\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const languageChanged =\n      oldHass === undefined || oldHass.locale !== this.hass.locale;\n\n    return (\n      changedProps.has(\"entries\") ||\n      changedProps.has(\"traceContexts\") ||\n      languageChanged\n    );\n  }\n\n  protected updated(_changedProps: PropertyValues) {\n    const oldHass = _changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (oldHass === undefined || oldHass.language !== this.hass.language) {\n      this._rtl = computeRTL(this.hass);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.entries?.length) {\n      return html`\n        <div class=\"container no-entries\" .dir=${emitRTLDirection(this._rtl)}>\n          ${this.hass.localize(\"ui.components.logbook.entries_not_found\")}\n        </div>\n      `;\n    }\n\n    return html`\n      <div\n        class=\"container ha-scrollbar ${classMap({\n          narrow: this.narrow,\n          rtl: this._rtl,\n          \"no-name\": this.noName,\n          \"no-icon\": this.noIcon,\n        })}\"\n        @scroll=${this._saveScrollPos}\n      >\n        ${this.virtualize\n          ? html`<lit-virtualizer\n              scroller\n              class=\"ha-scrollbar\"\n              .items=${this.entries}\n              .renderItem=${this._renderLogbookItem}\n            >\n            </lit-virtualizer>`\n          : this.entries.map((item, index) =>\n              this._renderLogbookItem(item, index)\n            )}\n      </div>\n    `;\n  }\n\n  private _renderLogbookItem = (\n    item: LogbookEntry,\n    index: number\n  ): TemplateResult => {\n    if (!item || index === undefined) {\n      return html``;\n    }\n\n    const seenEntityIds: string[] = [];\n    const previous = this.entries[index - 1];\n    const stateObj = item.entity_id\n      ? this.hass.states[item.entity_id]\n      : undefined;\n    const item_username =\n      item.context_user_id && this.userIdToName[item.context_user_id];\n    const domain = item.entity_id\n      ? computeDomain(item.entity_id)\n      : // Domain is there if there is no entity ID.\n        item.domain!;\n\n    return html`\n      <div class=\"entry-container\">\n        ${index === 0 ||\n        (item?.when &&\n          previous?.when &&\n          new Date(item.when * 1000).toDateString() !==\n            new Date(previous.when * 1000).toDateString())\n          ? html`\n              <h4 class=\"date\">\n                ${formatDate(new Date(item.when * 1000), this.hass.locale)}\n              </h4>\n            `\n          : html``}\n\n        <div class=\"entry ${classMap({ \"no-entity\": !item.entity_id })}\">\n          <div class=\"icon-message\">\n            ${!this.noIcon\n              ? // We do not want to use dynamic entity pictures (e.g., from media player) for the log book rendering,\n                // as they would present a false state in the log (played media right now vs actual historic data).\n                html`\n                  <state-badge\n                    .hass=${this.hass}\n                    .overrideIcon=${item.icon ||\n                    (item.domain && !stateObj\n                      ? domainIcon(item.domain!)\n                      : undefined)}\n                    .overrideImage=${DOMAINS_WITH_DYNAMIC_PICTURE.has(domain)\n                      ? \"\"\n                      : stateObj?.attributes.entity_picture_local ||\n                        stateObj?.attributes.entity_picture}\n                    .stateObj=${stateObj}\n                    .stateColor=${false}\n                  ></state-badge>\n                `\n              : \"\"}\n            <div class=\"message-relative_time\">\n              <div class=\"message\">\n                ${!this.noName // Used for more-info panel (single entity case)\n                  ? this._renderEntity(item.entity_id, item.name)\n                  : \"\"}\n                ${item.message\n                  ? html`${this._formatMessageWithPossibleEntity(\n                      item.message,\n                      seenEntityIds,\n                      item.entity_id\n                    )}`\n                  : item.source\n                  ? html` ${this._formatMessageWithPossibleEntity(\n                      item.source,\n                      seenEntityIds,\n                      undefined,\n                      \"ui.components.logbook.by\"\n                    )}`\n                  : \"\"}\n                ${item_username\n                  ? ` ${this.hass.localize(\n                      \"ui.components.logbook.by_user\"\n                    )} ${item_username}`\n                  : ``}\n                ${item.context_event_type\n                  ? this._formatEventBy(item, seenEntityIds)\n                  : \"\"}\n                ${item.context_message\n                  ? html` ${this._formatMessageWithPossibleEntity(\n                      item.context_message,\n                      seenEntityIds,\n                      item.context_entity_id,\n                      \"ui.components.logbook.for\"\n                    )}`\n                  : \"\"}\n                ${item.context_entity_id &&\n                !seenEntityIds.includes(item.context_entity_id)\n                  ? // Another entity such as an automation or script\n                    html` ${this.hass.localize(\"ui.components.logbook.for\")}\n                    ${this._renderEntity(\n                      item.context_entity_id,\n                      item.context_entity_id_name\n                    )}`\n                  : \"\"}\n              </div>\n              <div class=\"secondary\">\n                <span\n                  >${formatTimeWithSeconds(\n                    new Date(item.when * 1000),\n                    this.hass.locale\n                  )}</span\n                >\n                -\n                <ha-relative-time\n                  .hass=${this.hass}\n                  .datetime=${item.when * 1000}\n                  capitalize\n                ></ha-relative-time>\n                ${[\"script\", \"automation\"].includes(item.domain!) &&\n                item.context_id! in this.traceContexts\n                  ? html`\n                      -\n                      <a\n                        href=${`/config/${\n                          this.traceContexts[item.context_id!].domain\n                        }/trace/${\n                          this.traceContexts[item.context_id!].domain ===\n                          \"script\"\n                            ? `script.${\n                                this.traceContexts[item.context_id!].item_id\n                              }`\n                            : this.traceContexts[item.context_id!].item_id\n                        }?run_id=${\n                          this.traceContexts[item.context_id!].run_id\n                        }`}\n                        @click=${this._close}\n                        >${this.hass.localize(\n                          \"ui.components.logbook.show_trace\"\n                        )}</a\n                      >\n                    `\n                  : \"\"}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  };\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _formatEventBy(item: LogbookEntry, seenEntities: string[]) {\n    if (item.context_event_type === \"call_service\") {\n      return `${this.hass.localize(\"ui.components.logbook.from_service\")} ${\n        item.context_domain\n      }.${item.context_service}`;\n    }\n    if (item.context_event_type === \"automation_triggered\") {\n      if (seenEntities.includes(item.context_entity_id!)) {\n        return \"\";\n      }\n      seenEntities.push(item.context_entity_id!);\n      return html`${this.hass.localize(\"ui.components.logbook.from_automation\")}\n      ${this._renderEntity(item.context_entity_id, item.context_name)}`;\n    }\n    if (item.context_name) {\n      return `${this.hass.localize(\"ui.components.logbook.from\")} ${\n        item.context_name\n      }`;\n    }\n    if (item.context_event_type === \"state_changed\") {\n      return \"\";\n    }\n    if (item.context_event_type! in EVENT_LOCALIZE_MAP) {\n      return `${this.hass.localize(\n        `ui.components.logbook.${EVENT_LOCALIZE_MAP[item.context_event_type!]}`\n      )}`;\n    }\n    return `${this.hass.localize(\n      \"ui.components.logbook.from\"\n    )} ${this.hass.localize(\"ui.components.logbook.event\")} ${\n      item.context_event_type\n    }`;\n  }\n\n  private _renderEntity(\n    entityId: string | undefined,\n    entityName: string | undefined\n  ) {\n    const hasState = entityId && entityId in this.hass.states;\n    const displayName =\n      entityName ||\n      (hasState\n        ? this.hass.states[entityId].attributes.friendly_name || entityId\n        : entityId);\n    if (!hasState) {\n      return displayName;\n    }\n    return html`<button\n      class=\"link\"\n      @click=${this._entityClicked}\n      .entityId=${entityId}\n    >\n      ${displayName}\n    </button>`;\n  }\n\n  private _formatMessageWithPossibleEntity(\n    message: string,\n    seenEntities: string[],\n    possibleEntity?: string,\n    localizePrefix?: string\n  ) {\n    //\n    // As we are looking at a log(book), we are doing entity_id\n    // \"highlighting\"/\"colorizing\". The goal is to make it easy for\n    // the user to access the entity that caused the event.\n    //\n    // If there is an entity_id in the message that is also in the\n    // state machine, we search the message for the entity_id and\n    // replace it with _renderEntity\n    //\n    if (message.indexOf(\".\") !== -1) {\n      const messageParts = message.split(\" \");\n      for (let i = 0, size = messageParts.length; i < size; i++) {\n        if (messageParts[i] in this.hass.states) {\n          const entityId = messageParts[i];\n          if (seenEntities.includes(entityId)) {\n            return \"\";\n          }\n          seenEntities.push(entityId);\n          const messageEnd = messageParts.splice(i);\n          messageEnd.shift(); // remove the entity\n          return html` ${messageParts.join(\" \")}\n          ${this._renderEntity(\n            entityId,\n            this.hass.states[entityId].attributes.friendly_name\n          )}\n          ${messageEnd.join(\" \")}`;\n        }\n      }\n    }\n    //\n    // When we have a message has a specific entity_id attached to\n    // it, and the entity_id is not in the message, we look\n    // for the friendly name of the entity and replace that with\n    // _renderEntity if its there so the user can quickly get to\n    // that entity.\n    //\n    if (possibleEntity && possibleEntity in this.hass.states) {\n      const possibleEntityName =\n        this.hass.states[possibleEntity].attributes.friendly_name;\n      if (possibleEntityName && message.endsWith(possibleEntityName)) {\n        if (seenEntities.includes(possibleEntity)) {\n          return \"\";\n        }\n        seenEntities.push(possibleEntity);\n        message = message.substring(\n          0,\n          message.length - possibleEntityName.length\n        );\n        return html` ${localizePrefix ? this.hass.localize(localizePrefix) : \"\"}\n        ${message} ${this._renderEntity(possibleEntity, possibleEntityName)}`;\n      }\n    }\n    return message;\n  }\n\n  private _entityClicked(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    if (!entityId) {\n      return;\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n    fireEvent(this, \"hass-more-info\", {\n      entityId: entityId,\n    });\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"closed\"), 500);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleScrollbar,\n      buttonLinkStyle,\n      css`\n        :host([virtualize]) {\n          display: block;\n          height: 100%;\n        }\n\n        .rtl {\n          direction: ltr;\n        }\n\n        .entry-container {\n          width: 100%;\n        }\n\n        .entry {\n          display: flex;\n          width: 100%;\n          line-height: 2em;\n          padding: 8px 16px;\n          box-sizing: border-box;\n          border-top: 1px solid var(--divider-color);\n        }\n\n        .entry.no-entity,\n        .no-name .entry {\n          cursor: default;\n        }\n\n        .entry:hover {\n          background-color: rgba(var(--rgb-primary-text-color), 0.04);\n        }\n\n        .narrow:not(.no-icon) .time {\n          margin-left: 32px;\n        }\n\n        .message-relative_time {\n          display: flex;\n          flex-direction: column;\n        }\n\n        .secondary {\n          font-size: 12px;\n          line-height: 1.7;\n        }\n\n        .secondary a {\n          color: var(--secondary-text-color);\n        }\n\n        .date {\n          margin: 8px 0;\n          padding: 0 16px;\n        }\n\n        .narrow .date {\n          padding: 0 8px;\n        }\n\n        .rtl .date {\n          direction: rtl;\n        }\n\n        .icon-message {\n          display: flex;\n          align-items: center;\n        }\n\n        .no-entries {\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n\n        state-badge {\n          margin-right: 16px;\n          flex-shrink: 0;\n          color: var(--state-icon-color);\n        }\n\n        .message {\n          color: var(--primary-text-color);\n        }\n\n        .no-name .message:first-letter {\n          text-transform: capitalize;\n        }\n\n        a {\n          color: var(--primary-color);\n        }\n\n        .container {\n          max-height: var(--logbook-max-height);\n        }\n\n        .container,\n        lit-virtualizer {\n          height: 100%;\n        }\n\n        lit-virtualizer {\n          contain: size layout !important;\n        }\n\n        .narrow .entry {\n          line-height: 1.5;\n          padding: 8px;\n        }\n\n        .narrow .icon-message state-badge {\n          margin-left: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-logbook\": HaLogbook;\n  }\n}\n"],"names":[],"sourceRoot":""}