{"version":3,"file":"af626966.js","mappings":";;;;;AAqFA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;;;AAKA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAGA;AACA;;;;AAIA;;;;AAKA;;;AAGA;;AAGA;AACA;AACA;AACA;;;;;AA7FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/logbook/ha-panel-logbook.ts"],"sourcesContent":["import { mdiRefresh } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  addDays,\n  endOfToday,\n  endOfWeek,\n  endOfYesterday,\n  startOfToday,\n  startOfWeek,\n  startOfYesterday,\n} from \"date-fns\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { navigate } from \"../../common/navigate\";\nimport {\n  createSearchParam,\n  extractSearchParam,\n} from \"../../common/url/search-params\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport \"../../components/entity/ha-entity-picker\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-date-range-picker\";\nimport type { DateRangePickerRanges } from \"../../components/ha-date-range-picker\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-menu-button\";\nimport {\n  clearLogbookCache,\n  getLogbookData,\n  LogbookEntry,\n} from \"../../data/logbook\";\nimport { loadTraceContexts, TraceContexts } from \"../../data/trace\";\nimport { fetchUsers } from \"../../data/user\";\nimport { showAlertDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./ha-logbook\";\n\n@customElement(\"ha-panel-logbook\")\nexport class HaPanelLogbook extends LitElement {\n  @property() hass!: HomeAssistant;\n\n  @property({ reflect: true, type: Boolean }) narrow!: boolean;\n\n  @property() _startDate: Date;\n\n  @property() _endDate: Date;\n\n  @property() _entityId = \"\";\n\n  @property() _isLoading = false;\n\n  @property() _entries: LogbookEntry[] = [];\n\n  @property({ reflect: true, type: Boolean }) rtl = false;\n\n  @state() private _ranges?: DateRangePickerRanges;\n\n  private _fetchUserPromise?: Promise<void>;\n\n  @state() private _userIdToName = {};\n\n  @state() private _traceContexts: TraceContexts = {};\n\n  public constructor() {\n    super();\n\n    const start = new Date();\n    start.setHours(start.getHours() - 2, 0, 0, 0);\n    this._startDate = start;\n\n    const end = new Date();\n    end.setHours(end.getHours() + 1, 0, 0, 0);\n    this._endDate = end;\n  }\n\n  protected render() {\n    return html`\n      <ha-app-layout>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.logbook\")}</div>\n            <ha-icon-button\n              @click=${this._refreshLogbook}\n              .path=${mdiRefresh}\n              .label=${this.hass!.localize(\"ui.common.refresh\")}\n              .disabled=${this._isLoading}\n            ></ha-icon-button>\n          </app-toolbar>\n        </app-header>\n\n        ${this._isLoading ? html`` : \"\"}\n\n        <div class=\"filters\">\n          <ha-date-range-picker\n            .hass=${this.hass}\n            ?disabled=${this._isLoading}\n            .startDate=${this._startDate}\n            .endDate=${this._endDate}\n            .ranges=${this._ranges}\n            @change=${this._dateRangeChanged}\n          ></ha-date-range-picker>\n\n          <ha-entity-picker\n            .hass=${this.hass}\n            .value=${this._entityId}\n            .label=${this.hass.localize(\n              \"ui.components.entity.entity-picker.entity\"\n            )}\n            .disabled=${this._isLoading}\n            @change=${this._entityPicked}\n          ></ha-entity-picker>\n        </div>\n\n        ${this._isLoading\n          ? html`\n              <div class=\"progress-wrapper\">\n                <ha-circular-progress\n                  active\n                  alt=${this.hass.localize(\"ui.common.loading\")}\n                ></ha-circular-progress>\n              </div>\n            `\n          : html`\n              <ha-logbook\n                .hass=${this.hass}\n                .entries=${this._entries}\n                .userIdToName=${this._userIdToName}\n                .traceContexts=${this._traceContexts}\n                virtualize\n              ></ha-logbook>\n            `}\n      </ha-app-layout>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this.hass.loadBackendTranslation(\"title\");\n\n    this._fetchUserPromise = this._fetchUserNames();\n\n    const today = new Date();\n    const weekStart = startOfWeek(today);\n    const weekEnd = endOfWeek(today);\n\n    this._ranges = {\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.today\")]: [\n        startOfToday(),\n        endOfToday(),\n      ],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.yesterday\")]:\n        [startOfYesterday(), endOfYesterday()],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.this_week\")]:\n        [weekStart, weekEnd],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.last_week\")]:\n        [addDays(weekStart, -7), addDays(weekEnd, -7)],\n    };\n\n    this._entityId = extractSearchParam(\"entity_id\") ?? \"\";\n\n    const startDate = extractSearchParam(\"start_date\");\n    if (startDate) {\n      this._startDate = new Date(startDate);\n    }\n    const endDate = extractSearchParam(\"end_date\");\n    if (endDate) {\n      this._endDate = new Date(endDate);\n    }\n  }\n\n  protected updated(changedProps: PropertyValues<this>) {\n    if (\n      changedProps.has(\"_startDate\") ||\n      changedProps.has(\"_endDate\") ||\n      changedProps.has(\"_entityId\")\n    ) {\n      this._getData();\n    }\n\n    if (changedProps.has(\"hass\")) {\n      const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n      if (!oldHass || oldHass.language !== this.hass.language) {\n        this.rtl = computeRTL(this.hass);\n      }\n    }\n  }\n\n  private async _fetchUserNames() {\n    const userIdToName = {};\n\n    // Start loading users\n    const userProm = this.hass.user?.is_admin && fetchUsers(this.hass);\n\n    // Process persons\n    Object.values(this.hass.states).forEach((entity) => {\n      if (\n        entity.attributes.user_id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        this._userIdToName[entity.attributes.user_id] =\n          entity.attributes.friendly_name;\n      }\n    });\n\n    // Process users\n    if (userProm) {\n      const users = await userProm;\n      for (const user of users) {\n        if (!(user.id in userIdToName)) {\n          userIdToName[user.id] = user.name;\n        }\n      }\n    }\n\n    this._userIdToName = userIdToName;\n  }\n\n  private _dateRangeChanged(ev) {\n    this._startDate = ev.detail.startDate;\n    const endDate = ev.detail.endDate;\n    if (endDate.getHours() === 0 && endDate.getMinutes() === 0) {\n      endDate.setDate(endDate.getDate() + 1);\n      endDate.setMilliseconds(endDate.getMilliseconds() - 1);\n    }\n    this._endDate = endDate;\n\n    this._updatePath();\n  }\n\n  private _entityPicked(ev) {\n    this._entityId = ev.target.value;\n\n    this._updatePath();\n  }\n\n  private _updatePath() {\n    const params: Record<string, string> = {};\n\n    if (this._entityId) {\n      params.entity_id = this._entityId;\n    }\n\n    if (this._startDate) {\n      params.start_date = this._startDate.toISOString();\n    }\n\n    if (this._endDate) {\n      params.end_date = this._endDate.toISOString();\n    }\n\n    navigate(`/logbook?${createSearchParam(params)}`, { replace: true });\n  }\n\n  private _refreshLogbook() {\n    this._entries = [];\n    clearLogbookCache(\n      this._startDate.toISOString(),\n      this._endDate.toISOString()\n    );\n    this._getData();\n  }\n\n  private async _getData() {\n    this._isLoading = true;\n    let entries;\n    let traceContexts;\n\n    try {\n      [entries, traceContexts] = await Promise.all([\n        getLogbookData(\n          this.hass,\n          this._startDate.toISOString(),\n          this._endDate.toISOString(),\n          this._entityId\n        ),\n        isComponentLoaded(this.hass, \"trace\") && this.hass.user?.is_admin\n          ? loadTraceContexts(this.hass)\n          : {},\n        this._fetchUserPromise,\n      ]);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\"ui.components.logbook.retrieval_error\"),\n        text: err.message,\n      });\n    }\n\n    this._entries = entries;\n    this._traceContexts = traceContexts;\n    this._isLoading = false;\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        ha-logbook,\n        .progress-wrapper {\n          height: calc(100vh - 136px);\n        }\n\n        :host([narrow]) ha-logbook,\n        :host([narrow]) .progress-wrapper {\n          height: calc(100vh - 198px);\n        }\n\n        ha-date-range-picker {\n          margin-right: 16px;\n          max-width: 100%;\n        }\n\n        :host([narrow]) ha-date-range-picker {\n          margin-right: 0;\n        }\n\n        .progress-wrapper {\n          position: relative;\n        }\n\n        ha-circular-progress {\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n        }\n\n        .filters {\n          display: flex;\n          align-items: flex-end;\n          padding: 8px 16px 0;\n        }\n\n        :host([narrow]) .filters {\n          flex-wrap: wrap;\n        }\n\n        ha-entity-picker {\n          display: inline-block;\n          flex-grow: 1;\n          max-width: 400px;\n        }\n\n        :host([narrow]) ha-entity-picker {\n          max-width: none;\n          width: 100%;\n        }\n      `,\n    ];\n  }\n}\n"],"names":[],"sourceRoot":""}