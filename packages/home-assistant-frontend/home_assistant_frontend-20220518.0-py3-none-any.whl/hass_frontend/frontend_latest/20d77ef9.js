"use strict";(self.webpackChunkhome_assistant_frontend=self.webpackChunkhome_assistant_frontend||[]).push([[55424],{92306:(t,e,n)=>{n.d(e,{v:()=>s});const s=(t,e)=>{const n={};for(const s of t){const t=e(s);t in n?n[t].push(s):n[t]=[s]}return n}},11950:(t,e,n)=>{n.d(e,{l:()=>s});const s=async(t,e)=>new Promise((n=>{const s=e(t,(t=>{s(),n(t)}))}))},81582:(t,e,n)=>{n.d(e,{LZ:()=>s,pB:()=>i,SO:()=>r,iJ:()=>a,Nn:()=>o,Ny:()=>_,T0:()=>c});const s=["migration_error","setup_error","setup_retry"],i=(t,e)=>{const n=new URLSearchParams;return e&&(e.type&&n.append("type",e.type),e.domain&&n.append("domain",e.domain)),t.callApi("GET",`config/config_entries/entry?${n.toString()}`)},r=(t,e,n)=>t.callWS({type:"config_entries/update",entry_id:e,...n}),a=(t,e)=>t.callApi("DELETE",`config/config_entries/entry/${e}`),o=(t,e)=>t.callApi("POST",`config/config_entries/entry/${e}/reload`),_=(t,e)=>t.callWS({type:"config_entries/disable",entry_id:e,disabled_by:"user"}),c=(t,e)=>t.callWS({type:"config_entries/disable",entry_id:e,disabled_by:null})},55424:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{Bm:()=>p,o1:()=>h,iK:()=>S,rl:()=>b,P:()=>v,KU:()=>w,xZ:()=>W,gy:()=>T,ZC:()=>O,_Z:()=>k,Jj:()=>j,UB:()=>Z,jB:()=>E,gM:()=>I,yT:()=>M,_n:()=>D,vR:()=>L,vE:()=>C});var s=n(4535),i=n(59699),r=n(27088),a=n(83008),o=n(70390),_=n(47538),c=n(97330),u=n(92306),l=n(11950),y=n(81582),m=n(74186),f=n(58763),d=t([f]);f=(d.then?await d:d)[0];const g=[],p=()=>({stat_energy_from:"",stat_cost:null,entity_energy_from:null,entity_energy_price:null,number_energy_price:null}),h=()=>({stat_energy_to:"",stat_compensation:null,entity_energy_to:null,entity_energy_price:null,number_energy_price:null}),S=()=>({type:"grid",flow_from:[],flow_to:[],cost_adjustment_day:0}),b=()=>({type:"solar",stat_energy_from:"",config_entry_solar_forecast:null}),v=()=>({type:"battery",stat_energy_from:"",stat_energy_to:""}),w=()=>({type:"gas",stat_energy_from:"",stat_cost:null,entity_energy_from:null,entity_energy_price:null,number_energy_price:null}),W=t=>t.callWS({type:"energy/info"}),T=t=>t.callWS({type:"energy/validate"}),O=t=>t.callWS({type:"energy/get_prefs"}),k=async(t,e)=>{const n=t.callWS({type:"energy/save_prefs",...e});return P(t),n},j=t=>(0,u.v)(t.energy_sources,(t=>t.type)),P=t=>{g.forEach((e=>{const n=Z(t,{key:e});n.clearPrefs(),n._active&&n.refresh()}))},Z=(t,e={})=>{let n="_energy";if(e.key){if(!e.key.startsWith("energy_"))throw new Error("Key need to start with energy_");n=`_${e.key}`}if(t.connection[n])return t.connection[n];g.push(e.key);const u=(0,c._)(t.connection,n,(async()=>{if(u.prefs||(u.prefs=await O(t)),u._refreshTimeout&&clearTimeout(u._refreshTimeout),u._active&&(!u.end||u.end>new Date)){const t=new Date;t.getMinutes()>=20&&t.setHours(t.getHours()+1),t.setMinutes(20,0,0),u._refreshTimeout=window.setTimeout((()=>u.refresh()),t.getTime()-Date.now())}return(async(t,e,n,r)=>{const[a,o,_]=await Promise.all([(0,y.pB)(t,{domain:"co2signal"}),(0,l.l)(t.connection,m.LM),W(t)]),c=a.length?a[0]:void 0;let u;if(c)for(const e of o){if(e.config_entry_id!==c.entry_id)continue;const n=t.states[e.entity_id];if(n&&"%"===n.attributes.unit_of_measurement){u=n.entity_id;break}}const d=[],g=[],p=e.energy_sources.filter((t=>"gas"===t.type)),h=await(0,f.Py)(t,p.map((t=>t.stat_energy_from)));for(const n of e.energy_sources)if("solar"!==n.type)if("gas"!==n.type)if("battery"!==n.type){for(const t of n.flow_from){d.push(t.stat_energy_from),g.push(t.stat_energy_from),t.stat_cost&&g.push(t.stat_cost);const e=_.cost_sensors[t.stat_energy_from];e&&g.push(e)}for(const t of n.flow_to){g.push(t.stat_energy_to),t.stat_compensation&&g.push(t.stat_compensation);const e=_.cost_sensors[t.stat_energy_to];e&&g.push(e)}}else g.push(n.stat_energy_from),g.push(n.stat_energy_to);else{if(g.push(n.stat_energy_from),!t.states[n.stat_energy_from])for(const t of h)(null==t?void 0:t.statistic_id)===n.stat_energy_from&&null!=t&&t.unit_of_measurement&&(n.unit_of_measurement="Wh"===(null==t?void 0:t.unit_of_measurement)?"kWh":null==t?void 0:t.unit_of_measurement);n.stat_cost&&g.push(n.stat_cost);const e=_.cost_sensors[n.stat_energy_from];e&&g.push(e)}else g.push(n.stat_energy_from);const S=(0,s.Z)(r||new Date,n),b=(0,i.Z)(n,-1),v=await(0,f.dL)(t,b,r,g,S>35?"month":S>2?"day":"hour");let w;return void 0!==u&&(w=await(async(t,e,n,s,i,r="hour")=>t.callWS({type:"energy/fossil_energy_consumption",start_time:e.toISOString(),end_time:null==i?void 0:i.toISOString(),energy_statistic_ids:n,co2_statistic_id:s,period:r}))(t,n,d,u,r,S>35?"month":S>2?"day":"hour")),Object.values(v).forEach((t=>{t.length&&new Date(t[0].start)>b&&t.unshift({...t[0],start:b.toISOString(),end:b.toISOString(),sum:0,state:0})})),{start:n,end:r,info:_,prefs:e,stats:v,co2SignalConfigEntry:c,co2SignalEntity:u,fossilEnergyConsumption:w}})(t,u.prefs,u.start,u.end)})),d=u.subscribe;u.subscribe=t=>{const e=d(t);return u._active++,()=>{u._active--,u._active<1&&(clearTimeout(u._refreshTimeout),u._refreshTimeout=void 0),e()}},u._active=0,u.prefs=e.prefs;const p=new Date;u.start=p.getHours()>0?(0,r.Z)():(0,a.Z)(),u.end=p.getHours()>0?(0,o.Z)():(0,_.Z)();const h=()=>{u._updatePeriodTimeout=window.setTimeout((()=>{u.start=(0,r.Z)(),u.end=(0,o.Z)(),h()}),(0,i.Z)((0,o.Z)(),1).getTime()-Date.now())};return h(),u.clearPrefs=()=>{u.prefs=void 0},u.setPeriod=(t,e)=>{var n;u.start=t,u.end=e,u.start.getTime()!==(0,r.Z)().getTime()||(null===(n=u.end)||void 0===n?void 0:n.getTime())!==(0,o.Z)().getTime()||u._updatePeriodTimeout?u._updatePeriodTimeout&&(clearTimeout(u._updatePeriodTimeout),u._updatePeriodTimeout=void 0):h()},u},E=t=>t.callWS({type:"energy/solar_forecast"}),I=["m³","ft³"],M=["kWh"],D=[...I,...M],L=(t,e)=>{for(const n of e.energy_sources){if("gas"!==n.type)continue;const e=t.states[n.stat_energy_from];if(e)return I.includes(e.attributes.unit_of_measurement)?"volume":"energy"}},C=(t,e)=>{for(const n of e.energy_sources){if("gas"!==n.type)continue;const e=t.states[n.stat_energy_from];if(null!=e&&e.attributes.unit_of_measurement)return"Wh"===e.attributes.unit_of_measurement?"kWh":e.attributes.unit_of_measurement;if(n.unit_of_measurement)return n.unit_of_measurement}}}))},74186:(t,e,n)=>{n.d(e,{eD:()=>o,Mw:()=>_,vA:()=>c,L3:()=>u,Nv:()=>l,z3:()=>y,hg:()=>m,LM:()=>d,_V:()=>g});var s=n(97330);if(32143==n.j)var i=n(91741);if(32143==n.j)var r=n(85415);var a=n(38346);const o=(t,e)=>e.find((e=>t.states[e.entity_id]&&"battery"===t.states[e.entity_id].attributes.device_class)),_=(t,e)=>e.find((e=>t.states[e.entity_id]&&"battery_charging"===t.states[e.entity_id].attributes.device_class)),c=(t,e)=>{if(e.name)return e.name;const n=t.states[e.entity_id];return n?(0,i.C)(n):e.entity_id},u=(t,e)=>t.callWS({type:"config/entity_registry/get",entity_id:e}),l=(t,e,n)=>t.callWS({type:"config/entity_registry/update",entity_id:e,...n}),y=(t,e)=>t.callWS({type:"config/entity_registry/remove",entity_id:e}),m=t=>t.sendMessagePromise({type:"config/entity_registry/list"}),f=(t,e)=>t.subscribeEvents((0,a.D)((()=>m(t).then((t=>e.setState(t,!0)))),500,!0),"entity_registry_updated"),d=(t,e)=>(0,s.B)("_entityRegistry",m,f,t,e),g=t=>t.sort(((t,e)=>(0,r.f)(t.name||"",e.name||"")))},58763:(t,e,n)=>{n.a(t,(async t=>{n.d(e,{iq:()=>u,vq:()=>l,MG:()=>y,iz:()=>m,Nu:()=>g,uR:()=>p,Py:()=>h,dL:()=>S,h_:()=>b,Cj:()=>v,hN:()=>w,Kj:()=>W,q6:()=>T,Nw:()=>O,j2:()=>k});var s=n(58831),i=n(29171),r=n(91741),a=t([i]);i=(a.then?await a:a)[0];const o=["climate","humidifier","water_heater"],_=["climate","humidifier","input_datetime","thermostat","water_heater"],c=["temperature","current_temperature","target_temp_low","target_temp_high","hvac_action","humidity","mode"],u=(t,e)=>!t.states[e]||_.includes((0,s.M)(e)),l=(t,e,n,s,i=!1,r,a=!0,o)=>{let _="history/period";return n&&(_+="/"+n.toISOString()),_+="?filter_entity_id="+e,s&&(_+="&end_time="+s.toISOString()),i&&(_+="&skip_initial_state"),void 0!==r&&(_+=`&significant_changes_only=${Number(r)}`),a&&(_+="&minimal_response"),o&&(_+="&no_attributes"),t.callApi("GET",_)},y=(t,e,n,s,i=!1,r,a=!0,o)=>t.callWS({type:"history/history_during_period",start_time:n.toISOString(),end_time:s.toISOString(),significant_changes_only:r||!1,include_start_time_state:!i,minimal_response:a,no_attributes:o||!1,entity_ids:[e]}),m=(t,e,n,s)=>{const i={type:"history/history_during_period",start_time:e.toISOString(),end_time:n.toISOString(),minimal_response:!0,no_attributes:!(!s||u(t,s))};return s?t.callWS({...i,entity_ids:[s]}):t.callWS(i)},f=(t,e)=>t.state===e.state&&(!t.attributes||!e.attributes||c.every((n=>t.attributes[n]===e.attributes[n]))),d=t=>"unit_of_measurement"in t||"state_class"in t,g=(t,e,n)=>{const a={},_=[];if(!e)return{line:[],timeline:[]};Object.keys(e).forEach((o=>{const c=e[o];if(0===c.length)return;const u=o in t.states?t.states[o]:void 0,l=!u&&c.find((t=>t.a&&d(t.a)));let y;y=u&&d(u.attributes)?u.attributes.unit_of_measurement||" ":l?l.a.unit_of_measurement||" ":{climate:t.config.unit_system.temperature,counter:"#",humidifier:"%",input_number:"#",number:"#",water_heater:t.config.unit_system.temperature}[(0,s.M)(o)],y?y in a&&o in a[y]?a[y][o].push(...c):(y in a||(a[y]={}),a[y][o]=c):_.push(((t,e,n,s)=>{const a=[],o=s[s.length-1];for(const r of s)a.length>0&&r.s===a[a.length-1].state||a.push({state_localize:(0,i.c)(t,e,n,r.a||o.a,r.s),state:r.s,last_changed:1e3*(r.lc?r.lc:r.lu)});return{name:(0,r.a)(n,s[0].a),entity_id:n,data:a}})(n,t.locale,o,c))}));return{line:Object.keys(a).map((t=>((t,e)=>{const n=[];return Object.keys(e).forEach((t=>{const i=e[t],a=i[i.length-1],_=(0,s.M)(t),u=[];for(const t of i){let e;if(o.includes(_)){e={state:t.s,last_changed:1e3*t.lu,attributes:{}};for(const n of c)n in t.a&&(e.attributes[n]=t.a[n])}else e={state:t.s,last_changed:1e3*(t.lc?t.lc:t.lu),attributes:{}};u.length>1&&f(e,u[u.length-1])&&f(e,u[u.length-2])||u.push(e)}n.push({domain:_,name:(0,r.a)(t,a.a),entity_id:t,states:u})})),{unit:t,identifier:Object.keys(e).join(""),data:n}})(t,a[t]))),timeline:_}},p=(t,e)=>t.callWS({type:"history/list_statistic_ids",statistic_type:e}),h=(t,e)=>t.callWS({type:"recorder/get_statistics_metadata",statistic_ids:e}),S=(t,e,n,s,i="hour")=>t.callWS({type:"history/statistics_during_period",start_time:e.toISOString(),end_time:null==n?void 0:n.toISOString(),statistic_ids:s,period:i}),b=t=>t.callWS({type:"recorder/validate_statistics"}),v=(t,e,n)=>t.callWS({type:"recorder/update_statistics_metadata",statistic_id:e,unit_of_measurement:n}),w=(t,e)=>t.callWS({type:"recorder/clear_statistics",statistic_ids:e}),W=t=>{if(!t||t.length<2)return null;const e=t[t.length-1].sum;if(null===e)return null;const n=t[0].sum;return null===n?e:e-n},T=(t,e)=>{let n=null;for(const s of e){if(!(s in t))continue;const e=W(t[s]);null!==e&&(null===n?n=e:n+=e)}return n},O=(t,e)=>t.some((t=>null!==t[e])),k=(t,e,n,s)=>t.callWS({type:"recorder/adjust_sum_statistics",statistic_id:e,start_time:n,adjustment:s})}))}}]);