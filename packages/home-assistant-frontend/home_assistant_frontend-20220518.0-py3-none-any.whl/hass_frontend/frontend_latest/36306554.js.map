{"version":3,"file":"36306554.js","mappings":";;;;;AAgEA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAGA;AACA;;;;;AAKA;AACA;AACA;;;;AAlEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/logbook/ha-panel-logbook.ts"],"sourcesContent":["import { mdiRefresh } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  addDays,\n  endOfToday,\n  endOfWeek,\n  endOfYesterday,\n  startOfToday,\n  startOfWeek,\n  startOfYesterday,\n} from \"date-fns/esm\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { navigate } from \"../../common/navigate\";\nimport {\n  createSearchParam,\n  extractSearchParamsObject,\n} from \"../../common/url/search-params\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport \"../../components/entity/ha-entity-picker\";\nimport type { HaEntityPickerEntityFilterFunc } from \"../../components/entity/ha-entity-picker\";\nimport \"../../components/ha-date-range-picker\";\nimport type { DateRangePickerRanges } from \"../../components/ha-date-range-picker\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-menu-button\";\nimport \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./ha-logbook\";\n\n@customElement(\"ha-panel-logbook\")\nexport class HaPanelLogbook extends LitElement {\n  @property() hass!: HomeAssistant;\n\n  @property({ reflect: true, type: Boolean }) narrow!: boolean;\n\n  @state() _time: { range: [Date, Date] };\n\n  @state() _entityId = \"\";\n\n  @property({ reflect: true, type: Boolean }) rtl = false;\n\n  @state() private _ranges?: DateRangePickerRanges;\n\n  public constructor() {\n    super();\n\n    const start = new Date();\n    start.setHours(start.getHours() - 2, 0, 0, 0);\n\n    const end = new Date();\n    end.setHours(end.getHours() + 1, 0, 0, 0);\n\n    this._time = { range: [start, end] };\n  }\n\n  protected render() {\n    return html`\n      <ha-app-layout>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.logbook\")}</div>\n            <ha-icon-button\n              @click=${this._refreshLogbook}\n              .path=${mdiRefresh}\n              .label=${this.hass!.localize(\"ui.common.refresh\")}\n            ></ha-icon-button>\n          </app-toolbar>\n        </app-header>\n\n        <div class=\"filters\">\n          <ha-date-range-picker\n            .hass=${this.hass}\n            .startDate=${this._time.range[0]}\n            .endDate=${this._time.range[1]}\n            .ranges=${this._ranges}\n            @change=${this._dateRangeChanged}\n          ></ha-date-range-picker>\n\n          <ha-entity-picker\n            .hass=${this.hass}\n            .value=${this._entityId}\n            .label=${this.hass.localize(\n              \"ui.components.entity.entity-picker.entity\"\n            )}\n            .entityFilter=${this._entityFilter}\n            @change=${this._entityPicked}\n          ></ha-entity-picker>\n        </div>\n\n        <ha-logbook\n          .hass=${this.hass}\n          .time=${this._time}\n          .entityId=${this._entityId}\n          virtualize\n        ></ha-logbook>\n      </ha-app-layout>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n\n    if (this.hasUpdated) {\n      return;\n    }\n\n    const today = new Date();\n    const weekStart = startOfWeek(today);\n    const weekEnd = endOfWeek(today);\n\n    this._ranges = {\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.today\")]: [\n        startOfToday(),\n        endOfToday(),\n      ],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.yesterday\")]:\n        [startOfYesterday(), endOfYesterday()],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.this_week\")]:\n        [weekStart, weekEnd],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.last_week\")]:\n        [addDays(weekStart, -7), addDays(weekEnd, -7)],\n    };\n\n    this._applyURLParams();\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this.hass.loadBackendTranslation(\"title\");\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    window.addEventListener(\"location-changed\", this._locationChanged);\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    window.removeEventListener(\"location-changed\", this._locationChanged);\n  }\n\n  private _locationChanged = () => {\n    this._applyURLParams();\n  };\n\n  protected updated(changedProps: PropertyValues<this>) {\n    if (changedProps.has(\"hass\")) {\n      const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n      if (!oldHass || oldHass.language !== this.hass.language) {\n        this.rtl = computeRTL(this.hass);\n      }\n    }\n\n    this._applyURLParams();\n  }\n\n  private _applyURLParams() {\n    const searchParams = new URLSearchParams(location.search);\n\n    if (searchParams.has(\"entity_id\")) {\n      this._entityId = searchParams.get(\"entity_id\") ?? \"\";\n    }\n\n    const startDateStr = searchParams.get(\"start_date\");\n    const endDateStr = searchParams.get(\"end_date\");\n\n    if (startDateStr || endDateStr) {\n      const startDate = startDateStr\n        ? new Date(startDateStr)\n        : this._time.range[0];\n      const endDate = endDateStr ? new Date(endDateStr) : this._time.range[1];\n\n      // Only set if date has changed.\n      if (\n        startDate.getTime() !== this._time.range[0].getTime() ||\n        endDate.getTime() !== this._time.range[1].getTime()\n      ) {\n        this._time = {\n          range: [\n            startDateStr ? new Date(startDateStr) : this._time.range[0],\n            endDateStr ? new Date(endDateStr) : this._time.range[1],\n          ],\n        };\n      }\n    }\n  }\n\n  private _dateRangeChanged(ev) {\n    const startDate = ev.detail.startDate;\n    const endDate = ev.detail.endDate;\n    if (endDate.getHours() === 0 && endDate.getMinutes() === 0) {\n      endDate.setDate(endDate.getDate() + 1);\n      endDate.setMilliseconds(endDate.getMilliseconds() - 1);\n    }\n    this._time = { range: [startDate, endDate] };\n    this._updatePath({\n      start_date: this._time.range[0].toISOString(),\n      end_date: this._time.range[1].toISOString(),\n    });\n  }\n\n  private _entityPicked(ev) {\n    this._entityId = ev.target.value;\n    this._updatePath({ entity_id: this._entityId });\n  }\n\n  private _updatePath(update: Record<string, string>) {\n    const params = extractSearchParamsObject();\n    for (const [key, value] of Object.entries(update)) {\n      if (value === undefined) {\n        delete params[key];\n      } else {\n        params[key] = value;\n      }\n    }\n    navigate(`/logbook?${createSearchParam(params)}`, { replace: true });\n  }\n\n  private _refreshLogbook() {\n    this.shadowRoot!.querySelector(\"ha-logbook\")?.refresh();\n  }\n\n  private _entityFilter: HaEntityPickerEntityFilterFunc = (entity) => {\n    if (computeStateDomain(entity) !== \"sensor\") {\n      return true;\n    }\n\n    return (\n      entity.attributes.unit_of_measurement === undefined &&\n      entity.attributes.state_class === undefined\n    );\n  };\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        ha-logbook {\n          height: calc(100vh - 136px);\n        }\n\n        :host([narrow]) ha-logbook {\n          height: calc(100vh - 198px);\n        }\n\n        ha-date-range-picker {\n          margin-right: 16px;\n          max-width: 100%;\n        }\n\n        :host([narrow]) ha-date-range-picker {\n          margin-right: 0;\n        }\n\n        .filters {\n          display: flex;\n          align-items: flex-end;\n          padding: 8px 16px 0;\n        }\n\n        :host([narrow]) .filters {\n          flex-wrap: wrap;\n        }\n\n        ha-entity-picker {\n          display: inline-block;\n          flex-grow: 1;\n          max-width: 400px;\n        }\n\n        :host([narrow]) ha-entity-picker {\n          max-width: none;\n          width: 100%;\n        }\n      `,\n    ];\n  }\n}\n"],"names":[],"sourceRoot":""}