{"version":3,"file":"8c4feed9.js","mappings":";;;;AAMA;;AC6CA;AACA;;;;AAIA;;;AAIA;AACA;;;;AAIA;AAnBA;;;;;;;;;;;;;AArBA","sources":["webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-camera.ts"],"sourcesContent":["import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport \"../../../components/ha-camera-stream\";\nimport type { HaCheckbox } from \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-checkbox\";\nimport {\n  CameraEntity,\n  CameraPreferences,\n  CAMERA_SUPPORT_STREAM,\n  fetchCameraPrefs,\n  STREAM_TYPE_HLS,\n  updateCameraPrefs,\n} from \"../../../data/camera\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../../../components/ha-formfield\";\n\nclass MoreInfoCamera extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: CameraEntity;\n\n  @state() private _cameraPrefs?: CameraPreferences;\n\n  @state() private _attached = false;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._attached = true;\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._attached = false;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._attached || !this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    return html`\n      <ha-camera-stream\n        .hass=${this.hass}\n        .stateObj=${this.stateObj}\n        allow-exoplayer\n        controls\n      ></ha-camera-stream>\n      ${this._cameraPrefs\n        ? html`\n            <ha-formfield label=\"Preload stream\">\n              <ha-checkbox\n                .checked=${this._cameraPrefs.preload_stream}\n                @change=${this._handleCheckboxChanged}\n              >\n              </ha-checkbox>\n            </ha-formfield>\n          `\n        : undefined}\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (!changedProps.has(\"stateObj\")) {\n      return;\n    }\n\n    const oldState = changedProps.get(\"stateObj\") as this[\"stateObj\"];\n    const oldEntityId = oldState ? oldState.entity_id : undefined;\n    const curEntityId = this.stateObj ? this.stateObj.entity_id : undefined;\n\n    // Same entity, ignore.\n    if (curEntityId === oldEntityId) {\n      return;\n    }\n\n    if (\n      curEntityId &&\n      isComponentLoaded(this.hass!, \"stream\") &&\n      supportsFeature(this.stateObj!, CAMERA_SUPPORT_STREAM) &&\n      // The stream component for HLS streams supports a server-side pre-load\n      // option that client initiated WebRTC streams do not\n      this.stateObj!.attributes.frontend_stream_type === STREAM_TYPE_HLS\n    ) {\n      // Fetch in background while we set up the video.\n      this._fetchCameraPrefs();\n    }\n  }\n\n  private async _fetchCameraPrefs() {\n    this._cameraPrefs = await fetchCameraPrefs(\n      this.hass!,\n      this.stateObj!.entity_id\n    );\n  }\n\n  private async _handleCheckboxChanged(ev) {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    try {\n      this._cameraPrefs = await updateCameraPrefs(\n        this.hass!,\n        this.stateObj!.entity_id,\n        {\n          preload_stream: checkbox.checked!,\n        }\n      );\n    } catch (err: any) {\n      alert(err.message);\n      checkbox.checked = !checkbox.checked;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        position: relative;\n      }\n      ha-formfield {\n        position: absolute;\n        top: 0;\n        right: 0;\n        background-color: var(--secondary-background-color);\n        padding-right: 16px;\n        border-bottom-left-radius: 4px;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"more-info-camera\", MoreInfoCamera);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-camera\": MoreInfoCamera;\n  }\n}\n"],"names":[],"sourceRoot":""}