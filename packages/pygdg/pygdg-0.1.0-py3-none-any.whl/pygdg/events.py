import random, uuid
from datetime import datetime, timedelta
import pandas as pd
from pygdg.common import *

class PlayerEvent:
    """A player event class. It represents an event generated by a player during a game session."""
    
    def __init__(self, cohort_id, player_id, player_type, session_id, event_type, timestamp):
        self.id = uuid.uuid4()
        self.cohort_id = cohort_id
        self.player_id = player_id
        self.player_type = player_type
        self.session_id = session_id
        self.event_type = event_type
        self.timestamp = timestamp
        
    def to_dataframe(self):
        return pd.DataFrame.from_dict({
            PlayerEventField.id.name : [self.id.hex],
            PlayerEventField.cohort_id.name : [self.cohort_id.hex],
            PlayerEventField.player_id.name : [self.player_id.hex],
            PlayerEventField.player_type.name : [self.player_type],
            PlayerEventField.session_id.name : [self.session_id.hex],
            PlayerEventField.event_type.name : [self.event_type.name],
            PlayerEventField.timestamp.name : [self.timestamp.isoformat()],
        })

class SessionOptions:
    """A session options class."""

    def __init__(self, time_mu, time_sigma, 
                        duration_mu, duration_sigma):
        self.time_mu = time_mu
        self.time_sigma = time_sigma
        self.duration_mu = duration_mu
        self.duration_sigma = duration_sigma

    def time(self):
        return timedelta(seconds=random.gauss(self.time_mu.total_seconds(), self.time_sigma.total_seconds()))

    def duration(self):
        return timedelta(seconds=random_gauss_clamp(self.duration_mu.total_seconds(), self.duration_sigma.total_seconds()))

class SessionActivity:
    """A session activity class."""  

    def __init__(self, cohort_id, player_id, player_type, session_id, session_start_date, session_options):
        self.cohort_id = cohort_id
        self.player_id = player_id
        self.player_type = player_type
        self.session_id = session_id
        self.session_start_date = session_start_date
        self.session_options = session_options

    def generate_events(self):
        
        session_datetime = self.session_options.time() + self.session_start_date
        session_duration = self.session_options.duration()

        begin_session = PlayerEvent(
            self.cohort_id, 
            self.player_id, 
            self.player_type, 
            self.session_id, 
            PlayerEventType.BEGIN_SESSION, 
            session_datetime
        )

        # TODO: add events

        end_session = PlayerEvent(
            self.cohort_id, 
            self.player_id, 
            self.player_type, 
            self.session_id, 
            PlayerEventType.END_SESSION, 
            session_datetime + session_duration
        )
        
        events = [
            begin_session, 
            end_session
        ]

        return pd.concat(map(PlayerEvent.to_dataframe, events))        

class PlayerOptions:
    """A player options class."""   
     
    def __init__(self, player_type, 
                        sessions_options,
                        lifetime):
        self.player_type = player_type
        self.sessions_options = sessions_options
        self.lifetime = lifetime

class PlayerActivity:
    """A player activity class."""  

    def __init__(self, cohort_id, player_id, player_type, player_options, player_start_date):
        self.cohort_id = cohort_id
        self.player_id = player_id
        self.player_type = player_type
        self.player_options = player_options
        self.player_start_date = player_start_date
        self.current_day = 1

    def generate_events(self):

        lifetime_weight = self.player_options.lifetime[self.current_day]

        if (lifetime_weight <= 0):
            return None

        sessions_dataframes = []

        session_date = datetime.combine(
            self.player_start_date.date() + timedelta(days=self.current_day-1), 
            datetime.min.time()
        )
        session_weekday = WeekDay(session_date.weekday())

        if session_weekday in self.player_options.sessions_options:

            sessions_options = self.player_options.sessions_options[session_weekday]

            # print(f'Player ({self.player_id}): session_weekday {WeekDay(session_weekday)}, sessions {len(sessions_options)}')

            for session_options in sessions_options:
            
                weight = lifetime_weight * sessions_options[session_options]

                if (random.random() < weight):
                    session_id = uuid.uuid4()
                    session_activity = SessionActivity(
                        self.cohort_id, 
                        self.player_id, 
                        self.player_type, 
                        session_id, 
                        session_date, 
                        session_options
                    )
                    session_dataframe = session_activity.generate_events()
                    sessions_dataframes.append(session_dataframe)

        self.current_day += 1

        if len(sessions_dataframes) == 0:
            return pd.DataFrame()
        else:
            return pd.concat(sessions_dataframes)  

class GameOptions:
    """A game options class."""

    def __init__(self, players_options, players_acquisition, simulation_days):
        self.players_options = {k: v for k, v in sorted(players_options.items(), key=lambda item: item[1])}
        self.players_acquisition = players_acquisition
        self.simulation_days = simulation_days

    def __getitem__(self, p):
        for key, value in self.players_options.items():
            if p < value:
                return key
            else:
                last_key = key
        return last_key

class GameActivity:

    def __init__(self, game_options, start_date):
        self.game_options = game_options
        self.start_date = start_date
        self.current_day = 1

    def generate_events(self):

        # update progress bar
        
        print_progress_bar(self.current_day, self.game_options.simulation_days+1, prefix = 'Progress:', suffix = '', length = 50)

        player_activities = []
        players_dataframes = []

        while self.current_day <= self.game_options.simulation_days:

            # print(f'simulate day {self.current_day}')

            # handle old players activities

            old_players_activities = player_activities
            player_activities = []

            # print(f'old players activities {len(old_players_activities)}')

            for player_activity in old_players_activities:

                player_dataframe = player_activity.generate_events()

                if player_dataframe is not None:
                    players_dataframes.append(player_dataframe)
                    player_activities.append(player_activity)

            # handle new players activities

            current_new_player = int(self.game_options.players_acquisition[self.current_day])

            cohort_id =uuid.uuid4()

            while current_new_player > 0:

                player_options = self.game_options[random.random()]

                player_id = uuid.uuid4()
                player_type = player_options.player_type
                player_start_date = self.start_date + timedelta(days=self.current_day-1)

                # print(f'create new {player_type} player activity!')

                player_activity = PlayerActivity(
                    cohort_id,
                    player_id, 
                    player_type,
                    player_options, 
                    player_start_date
                )
                player_dataframe = player_activity.generate_events()

                if player_dataframe is not None:
                    players_dataframes.append(player_dataframe)
                    player_activities.append(player_activity)

                current_new_player -= 1
        
            self.current_day += 1

            # update Progress Bar

            print_progress_bar(self.current_day, self.game_options.simulation_days+1, prefix = 'Progress:', suffix = '', length = 50)

        return pd.concat(players_dataframes)  

def generate(filename, players, days, seed, plot, debug):

    # set seed

    random.seed(seed)

    # generate the events

    morning_session_ranges = SessionOptions(
        timedelta(hours=7), # session time mean
        timedelta(minutes=30), # session time standard deviation
        timedelta(minutes=30), # session duration mean
        timedelta(minutes=10), # session duration standard deviation
    )

    noon_session_ranges = SessionOptions(
        timedelta(hours=12), # session time mean
        timedelta(hours=30), # session time standard deviation
        timedelta(minutes=45), # session duration mean
        timedelta(minutes=15), # session duration standard deviation
    )

    afternoon_session_ranges = SessionOptions(
        timedelta(hours=17), # session time mean
        timedelta(hours=1), # session time standard deviation
        timedelta(minutes=30), # session duration mean
        timedelta(minutes=20), # session duration standard deviation
    )

    night_session_ranges = SessionOptions(
        timedelta(hours=20), # session time mean
        timedelta(hours=3), # session time standard deviation
        timedelta(hours=2), # session duration mean
        timedelta(minutes=1), # session duration standard deviation
    )

    bot_player = PlayerOptions(
        'bot',
        {
            WeekDay.MONDAY: {
                night_session_ranges: 1.0,
                noon_session_ranges: 1.0,
                afternoon_session_ranges: 1.0,
                night_session_ranges: 1.0
            },
            WeekDay.TUESDAY: {
                morning_session_ranges: 1.0,
                noon_session_ranges: 1.0,
                afternoon_session_ranges: 1.0,
                night_session_ranges: 1.0
            },
            WeekDay.WEDNESDAY:  {
                night_session_ranges: 1.0,
                noon_session_ranges: 1.0,
                afternoon_session_ranges: 1.0,
                night_session_ranges: 1.0
            },
            WeekDay.THURSDAY:  {
                night_session_ranges: 1.0,
                noon_session_ranges: 1.0,
                afternoon_session_ranges: 1.0,
                night_session_ranges: 1.0
            },
            WeekDay.FRIDAY:  {
                night_session_ranges: 1.0,
                noon_session_ranges: 1.0,
                afternoon_session_ranges: 1.0,
                night_session_ranges: 1.0
            },
            WeekDay.SATURDAY:  {
                night_session_ranges: 1.0,
                noon_session_ranges: 1.0,
                afternoon_session_ranges: 1.0,
                night_session_ranges: 1.0
            },
            WeekDay.SATURDAY: {
                night_session_ranges: 1.0,
                noon_session_ranges: 1.0,
                afternoon_session_ranges: 1.0,
                night_session_ranges: 1.0
            },
            WeekDay.SUNDAY: {
                night_session_ranges: 1.0,
                noon_session_ranges: 1.0,
                afternoon_session_ranges: 1.0,
                night_session_ranges: 1.0
            }
        }, 
        Interpolator({
            1: 1.0
        })
    )

    hardcore_player_options = PlayerOptions(
        'hardcore',
        {
            WeekDay.MONDAY: {
                night_session_ranges: 0.5  # 50% chance to play a night session on monday
            },
            WeekDay.TUESDAY: {
                morning_session_ranges: 0.3,
                noon_session_ranges: 0.5,
                night_session_ranges: 1.0
            },
            WeekDay.WEDNESDAY:  {
                morning_session_ranges: 0.3,
                noon_session_ranges: 0.5,
                night_session_ranges: 1.0
            },
            WeekDay.THURSDAY:  {
                morning_session_ranges: 0.3,
                noon_session_ranges: 0.5,
                night_session_ranges: 1.0
            },
            WeekDay.FRIDAY:  {
                morning_session_ranges: 0.3,
                noon_session_ranges: 0.5,
                night_session_ranges: 1.0
            },
            WeekDay.SATURDAY:  {
                morning_session_ranges: 0.3,
                noon_session_ranges: 0.5,
                night_session_ranges: 1.0
            },
            WeekDay.SATURDAY: {
                morning_session_ranges: 0.5
            },
            WeekDay.SUNDAY: {
                afternoon_session_ranges: 0.8
            }
        }, Interpolator({
            1: 0.7, # day 1 modifier for session probability
            7: 1.0,
            14: 0.7,
            28: 0.5
        })
    )

    casual_player_options = PlayerOptions(
        'casual',
        {
            WeekDay.TUESDAY: {
                noon_session_ranges: 0.5,
                night_session_ranges: 0.5
            },
            WeekDay.WEDNESDAY:  {
                noon_session_ranges: 0.5,
                night_session_ranges: 0.5
            },
            WeekDay.THURSDAY:  {
                noon_session_ranges: 0.5,
                night_session_ranges: 0.5
            },
            WeekDay.FRIDAY:  {
                noon_session_ranges: 0.5,
                night_session_ranges: 0.5
            }
        }, Interpolator({
            1: 0.7, # day 1 modifier for session probability
            7: 1.0,
            14: 0.3
        })
    )    

    churner_player_options = PlayerOptions(
        'churner',
        {
            WeekDay.TUESDAY: {
                night_session_ranges: 1.0
            },
            WeekDay.WEDNESDAY:  {
                night_session_ranges: 1.0
            },
            WeekDay.THURSDAY:  {
                night_session_ranges: 1.0
            },
            WeekDay.FRIDAY:  {
                night_session_ranges: 1.0
            },
            WeekDay.SUNDAY:  {
                night_session_ranges: 1.0
            }
        }, Interpolator({
            1: 1.0, # day 1 modifier for session probability
            2: 1.0,
            3: 0.5,
            7: 0.3,
            14: 0
        })
    )

    game_options = GameOptions(
        players_options = {
            # bot_player: 1.0,
            hardcore_player_options: 0.05,
            casual_player_options: 0.1,
            churner_player_options: 1.0,
        }, 
        players_acquisition = players * Interpolator({
            1: 1, # one player acquired day one
            7: 2,
            8: 0,

            14: 0,
            15: 1,
            21: 2,
            22: 0,

            28: 0,
            29: 2,
            35: 5,
            36: 0,

            42: 0,
            43: 3,
            49: 7,
            50: 0,

            56: 0,
            57: 1,
            63: 2,
            64: 0
        }),
        simulation_days = days # simulation days
    )

    start_date = datetime.now()

    game_activity = GameActivity(
        game_options, 
        start_date
    )

    print('generating events...')
    events_dataframe = game_activity.generate_events()
    events_dataframe[PlayerEventField.timestamp.name] = pd.to_datetime(events_dataframe[PlayerEventField.timestamp.name])
    events_dataframe = events_dataframe.sort_values(by=[PlayerEventField.timestamp.name])

    # dump csv and json

    event_file = f'{filename}.csv'
    events_dataframe.to_csv(event_file, index=False)
    print(f'events stored in {event_file}!')

    # plot events

    if plot:
        
        player_index = 'player_index'
        events_by_players = events_dataframe.groupby([PlayerEventField.player_id.name])
        
        for index, (player_id, group) in enumerate(events_by_players):
            events_dataframe.loc[events_dataframe[PlayerEventField.player_id.name] == player_id, player_index] = int(index)

        plot = events_dataframe.plot.scatter(x=PlayerEventField.timestamp.name, y=player_index)
        
        print('plot events...')
        plot_file = f'{filename}.pdf'
        plot.get_figure().savefig(plot_file)
        print(f'events plotted in {plot_file}!')