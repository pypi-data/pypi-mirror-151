# generated by datamodel-codegen:
#   filename:  schema/entity/type.json
#   timestamp: 2022-05-16T11:29:27+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Extra, Field

from ..type import basic, entityHistory


class Type(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[basic.Uuid] = Field(
        None, description='Unique identifier of the type instance.'
    )
    name: basic.EntityName = Field(
        ..., description='Unique name that identifies the type.'
    )
    fullyQualifiedName: Optional[basic.FullyQualifiedEntityName] = Field(
        None, description='FullyQualifiedName same as `name`.'
    )
    nameSpace: str = Field(
        ..., description='Namespace or group to which this type belongs to.'
    )
    displayName: Optional[str] = Field(
        None, description='Display Name that identifies this type.'
    )
    description: str = Field(..., description='Optional description of entity.')
    schema_: Optional[basic.JsonSchema] = Field(
        None,
        alias='schema',
        description='JSON schema encoded as string that defines the type. This will be used to validate the type values.',
    )
    version: Optional[entityHistory.EntityVersion] = Field(
        None, description='Metadata version of the entity.'
    )
    updatedAt: Optional[basic.Timestamp] = Field(
        None,
        description='Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.',
    )
    updatedBy: Optional[str] = Field(None, description='User who made the update.')
    href: Optional[basic.Href] = Field(None, description='Link to this table resource.')
    changeDescription: Optional[entityHistory.ChangeDescription] = Field(
        None, description='Change that lead to this version of the entity.'
    )
