# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['markdown_toolkit', 'markdown_toolkit.helpers']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'markdown-toolkit',
    'version': '0.2.1',
    'description': 'Utility package for programmatically manipulating markdown documents.',
    'long_description': '# Markdown Toolkit\n![https://raw.githubusercontent.com/dcurtis/markdown-mark/99572b4a4f71b4ea2b1186a30f440ff2fcf66d27/svg/markdown-mark.svg](https://raw.githubusercontent.com/dcurtis/markdown-mark/99572b4a4f71b4ea2b1186a30f440ff2fcf66d27/svg/markdown-mark.svg)\n\n_A python library for creating and manipulating markdown with an object oriented interface._\n\nThis library has two primary aims:\n* Generation of markdown with python to create documents or fragments of documents.\n* Injection of text; static or generated, into existing documents.\n\n## Quickstart\n\n_**WARNING**:_ _This project isn\'t version 1.0.0 yet, API subject to change, pin the version._\n\nThese steps outline a usecase end to end; dynamically generating some content and injecting it into an existing document, and then raising a pull request.\n\n1.  Install package (Preferably in your python [virtual environment](https://docs.python.org/3/library/venv.html), or container).\n    ```shell\n    pip install markdown-toolkit\n    ```\n1.  Write a simple test document \n    <!--- markdown-toolkit:readme_example --->\n    ```python\n    """README.md Example Code."""\n    import requests\n    from markdown_toolkit import MarkdownDocument\n    \n    doc = MarkdownDocument()\n    \n    quotes = requests.get("http://ron-swanson-quotes.herokuapp.com/v2/quotes/10")\n    with doc.heading("Ron Swanson Quotes"):\n        doc.paragraph("This list is generated from a JSON serving REST API call.")\n        for quote in quotes.json():\n            doc.list(quote)\n    \n    print(doc.render())\n    ```\n    <!--- markdown-toolkit:readme_example --->\n    \n    Which gives a result of:\n    ```markdown \n    # Ron Swanson Quotes\n\n    This list is generated from a JSON serving REST API call.\n\n    *   In my opinion, not enough people have looked their dinner in the eyes and considered the circle of life.\n    *   Barbecues should be about one thing: good shared meat.\n    *   It\'s an impossible puzzle, and I love puzzles!\n    *   Under my tutelage, you will grow from boys to men. From men into gladiators. And from gladiators into Swansons.\n    *   I love riddles!\n    *   If any of you need anything at all, too bad. Deal with your problems yourselves, like adults.\n    *   I like Tom. He doesn’t do a lot of work around here. He shows zero initiative. He’s not a team player. He’s never wanted to go that extra mile. Tom is exactly what I’m looking for in a government employee.\n    *   When I eat, it is the food that is scared.\n    *   Once a year, every branch of this government meets in a room and announces what they intend to waste taxpayer money on.\n    *   Give 100%. 110% is impossible. Only idiots recommend that.\n    ```\n\n1. Combining the two is flexible, allowing dynamic generation of markdown partial documents, and injection of those into human edited pages.\n\n    Here is a live example from [inject_readme.py](inject_readme.py) which injects content into this file:\n\n    <!--- markdown-toolkit:pycode --->\n    ```python\n    from markdown_toolkit import MarkdownInjector, MarkdownDocument\n    \n    # Open the document to manipulate and read it into the injector\n    with open("README.md", "r", encoding="UTF-8") as source:\n        source_file = MarkdownInjector(source)\n    \n    # Open a second file to inject into the document\n    with open("readme_example.py", "r", encoding="UTF-8") as code:\n        doc = MarkdownDocument()\n        # Wrap the raw document in code tags\n        with doc.codeblock(language="python"):\n            doc.paragraph(code.read(), linebreak=False)\n        # Replace text between anchor tags with value of file\n        source_file.anchors.readme_example.value = doc.render()\n    \n    # Open _this_ file to inject into the document\n    with open(__file__, "r", encoding="UTF-8") as this_file:\n        doc = MarkdownDocument()\n        with doc.codeblock(language="python"):\n            doc.paragraph(this_file.read(), linebreak=False)\n        source_file.anchors.pycode.value = doc.render()\n    \n    # Always try to render the resulting document before writing,\n    # so any failures don\'t result in an empty or corrupted file\n    resulting_document = source_file.render()\n    with open("README.md", "w", encoding="UTF-8") as source:\n        source.write(resulting_document)\n    ```\n    <!--- markdown-toolkit:pycode --->\n\n    In this case the `inject_readme.py` reads itself to inject into this document, as well as the `readme_example.py` file containing some source code.\n\n1.  To finish it off, there\'s an example of running this code in a Github Actions pipeline to keep the documentation updates.\n\n    ```yaml\n    name: Generate documentation\n    \n    permissions:\n      contents: write\n      pull-requests: write\n    \n    on: pull-request\n\n    jobs:\n      rebuild-readme:\n        name: Script building README.md\n        runs-on: ubuntu-latest\n        steps:\n          - uses: actions/checkout@v3\n            with:\n              ref: ${{ github.head_ref }}\n          - name: Set up Python\n            uses: actions/setup-python@v3\n            with:\n              python-version: "3.7"\n              architecture: x64\n              cache: pip\n          - run: pip install markdown-toolkit\n          - run: python inject_readme.py\n          - name: Create Pull Request\n            id: cpr\n            uses: peter-evans/create-pull-request@v4\n            with:\n              commit-message: "docs: update markdown"\n              committer: GitHub <noreply@github.com>\n              author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>\n              signoff: false\n              branch: docs\n              delete-branch: true\n              title: \'[Docs] Update Markdown\'\n              body: |\n                Update report\n                - Updated with `examples/generate_documentation.py`\n                - Auto-generated by [create-pull-request][1]\n    \n                [1]: https://github.com/peter-evans/create-pull-request\n              labels: |\n                documentation\n                automated pr\n              team-reviewers: |\n                owners\n                maintainers\n    ```\n\n    _This action doesn\'t get triggered in this project, it just serves as an example._\n\n    When this action runs it creates a pull request:\n    ![PullRequest Raised](docs/assets/pr_raised1.png)\n\n    Just merge the changes to update the markdown.\n\n\n## Examples\n\nFurther more detailed examples can be found in the [Examples](./examples) and in the [Unit Tests](./tests) directories.',
    'author': 'Daniel Loader',
    'author_email': 'hello@danielloader.uk',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/danielloader/markdown-toolkit/',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
