:tocdepth: 3

**************************
Using gaze data from Cloud
**************************

The LSL stream will contain gaze data with a resolution of ~66 Hz.
You can get a higher sampling rate when you're using the gaze data downloaded from
Pupil Cloud. In order to do this, you'll need to align the timestamps collected during
the lsl streaming to the timestamps recorded in cloud.

Setup
=====
#. Start the lsl relay of your Pupil Invisible glasses.

#. In your lsl recording software, select both the gaze data stream and the event stream.

#. Start the lsl recording through your software of choice (e.g. LabRecorder).

#. In your Pupil Invisible Companion App, tap the red "record" button and make sure the recording is running.

#. Run your experiment/data collection.

#. Stop the recording in the Pupil Invisible Companion App.

#. Stop the lsl recording.

#. Wait till the gaze data was uploaded to Pupil Cloud and the 200 Hz gaze data was computed.

#. Export the gaze data from Pupil Cloud by right-clicking on the recording and selecting Downloads -> Download Recording.

#. You will end up with an xdf file, containing all data recorded through lsl (including gaze and event data),
   and one csv file for each gaze and event data downloaded from Pupil Cloud.

From here, you can perform the timestamp alignment.

.. important::
   If your recording is short (less than 1 minute), you should increase the frequency at which ``lsl.timesync`` events
   are being generated. As a rule of thumb you should aim for at least 3 events being sent throughout the recording, including
   ``recording.begin`` and ``recording.end`` events, which are generated by starting and ending the recording in the Pupil
   Invisible Companion App.

   You can change the frequency at which ``lsl.timesync`` events are being sent by setting the ``--time_sync_interval``
   argument.

To run the pipeline below, you can install the necessary dependencies needed via

.. code-block::

   pip install pupil-invisible-lsl-relay[pupil_cloud_alignment]

Import dependencies
===================
Import the installed dependencies before running the example code below.

.. literalinclude:: ../../examples/linear_time_model.py
   :language: python
   :lines: 1-5
   :linenos:

Loading event data from xdf file
=================================
Event streams can be identified and selected by their name.

.. literalinclude:: ../../examples/linear_time_model.py
   :language: python
   :lines: 7-25
   :linenos:

Loading event data from cloud
==============================
The raw data enrichment contains a csv file with event names and timestamps.
We can load this csv file with pandas.

.. literalinclude:: ../../examples/linear_time_model.py
   :language: python
   :lines: 27-32
   :linenos:

Building a linear model to map cloud time to lsl time
======================================================
After extracting the event names and time stamps from both series as shown above,
you can build a linear model to translate from one time series to the other.

Once the linear model was fitted, we can apply it to map the cloud timestamps to lsl timestamps.

.. literalinclude:: ../../examples/linear_time_model.py
  :language: python
  :lines: 34-
  :linenos:

.. hint::
   If you want to invert the mapping, to transform lsl timestamps to cloud timestamps,
   you'll have to change the order of arguments in ``time_mapper.fit`` to

   .. code-block:: diff

       time_mapper.fit(
      -   filtered_cloud_event_data[[event_column_timestamp]],
          filtered_lsl_event_data[event_column_timestamp],
      +   filtered_cloud_event_data[[event_column_timestamp]],
       )
