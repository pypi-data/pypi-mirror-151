{"version":3,"file":"chunks/app_views_alerts_edit_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/incidentRules/details.tsx","webpack:///./app/views/alerts/edit.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport RuleForm from 'sentry/views/alerts/incidentRules/ruleForm';\nimport {IncidentRule} from 'sentry/views/alerts/incidentRules/types';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = {\n  onChangeTitle: (data: string) => void;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  actions: Map<string, any>;\n  rule: IncidentRule; // This is temp\n} & AsyncView['state'];\n\nclass IncidentRulesDetails extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      actions: new Map(),\n    };\n  }\n\n  getTitle(): string {\n    const {organization, project} = this.props;\n    const {rule} = this.state;\n    const ruleName = rule?.name;\n\n    return routeTitleGen(\n      ruleName ? t('Alert %s', ruleName) : '',\n      organization.slug,\n      false,\n      project?.slug\n    );\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, ruleId} = this.props.params;\n\n    return [['rule', `/organizations/${orgId}/alert-rules/${ruleId}/`]];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    if (stateKey === 'rule' && data.name) {\n      this.props.onChangeTitle(data.name);\n    }\n  }\n\n  onLoadAllEndpointsSuccess() {\n    const {rule} = this.state;\n    if (rule?.errors) {\n      (rule?.errors || []).map(({detail}) => addErrorMessage(detail, {append: true}));\n    }\n  }\n\n  handleSubmitSuccess = () => {\n    const {router} = this.props;\n    const {orgId, ruleId} = this.props.params;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push({\n      pathname: `/organizations/${orgId}/alerts/rules/details/${ruleId}/`,\n    });\n  };\n\n  renderError(error?: Error, disableLog = false): React.ReactNode {\n    const {errors} = this.state;\n    const notFound = Object.values(errors).find(resp => resp && resp.status === 404);\n    if (notFound) {\n      return (\n        <Alert type=\"error\" showIcon>\n          {t('This alert rule could not be found.')}\n        </Alert>\n      );\n    }\n    return super.renderError(error, disableLog);\n  }\n\n  renderBody() {\n    const {ruleId} = this.props.params;\n    const {rule} = this.state;\n\n    return (\n      <RuleForm\n        {...this.props}\n        ruleId={ruleId}\n        rule={rule}\n        onSubmitSuccess={this.handleSubmitSuccess}\n      />\n    );\n  }\n}\n\nexport default IncidentRulesDetails;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport Teams from 'sentry/utils/teams';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IncidentRulesDetails from 'sentry/views/alerts/incidentRules/details';\nimport IssueEditor from 'sentry/views/alerts/issueRuleEditor';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  ruleName: string;\n};\n\nclass ProjectAlertsEditor extends Component<Props, State> {\n  state: State = {\n    ruleName: '',\n  };\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n    trackAdvancedAnalyticsEvent('edit_alert_rule.viewed', {\n      organization,\n      project_id: project.id,\n      alert_type: this.getAlertType(),\n    });\n  }\n\n  handleChangeTitle = (ruleName: string) => {\n    this.setState({ruleName});\n  };\n\n  getTitle() {\n    const {ruleName} = this.state;\n    return `${ruleName}`;\n  }\n\n  getAlertType(): AlertRuleType {\n    return location.pathname.includes('/alerts/metric-rules/')\n      ? AlertRuleType.METRIC\n      : AlertRuleType.ISSUE;\n  }\n\n  render() {\n    const {hasMetricAlerts, location, organization, project, routes} = this.props;\n    const alertType = this.getAlertType();\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle\n          title={this.getTitle()}\n          orgSlug={organization.slug}\n          projectSlug={project.slug}\n        />\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              title={t('Edit Alert Rule')}\n              projectSlug={project.slug}\n              routes={routes}\n              location={location}\n            />\n            <Layout.Title>{this.getTitle()}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n        <EditConditionsBody>\n          <Layout.Main fullWidth>\n            <Teams provideUserTeams>\n              {({teams, initiallyLoaded}) =>\n                initiallyLoaded ? (\n                  <Fragment>\n                    {(!hasMetricAlerts || alertType === 'issue') && (\n                      <IssueEditor\n                        {...this.props}\n                        project={project}\n                        onChangeTitle={this.handleChangeTitle}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    )}\n                    {hasMetricAlerts && alertType === AlertRuleType.METRIC && (\n                      <IncidentRulesDetails\n                        {...this.props}\n                        project={project}\n                        onChangeTitle={this.handleChangeTitle}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    )}\n                  </Fragment>\n                ) : (\n                  <LoadingIndicator />\n                )\n              }\n            </Teams>\n          </Layout.Main>\n        </EditConditionsBody>\n      </Fragment>\n    );\n  }\n}\n\nconst EditConditionsBody = styled(Layout.Body)`\n  *:not(img) {\n    max-width: 1000px;\n  }\n`;\n\nexport default ProjectAlertsEditor;\n"],"names":["IncidentRulesDetails","AsyncView","router","this","props","orgId","ruleId","params","metric","name","push","pathname","getDefaultState","super","actions","Map","getTitle","organization","project","rule","state","ruleName","routeTitleGen","t","slug","getEndpoints","onRequestSuccess","stateKey","data","onChangeTitle","onLoadAllEndpointsSuccess","errors","map","detail","addErrorMessage","append","renderError","error","disableLog","Object","values","find","resp","status","type","showIcon","renderBody","onSubmitSuccess","handleSubmitSuccess","ProjectAlertsEditor","Component","setState","componentDidMount","trackAdvancedAnalyticsEvent","project_id","id","alert_type","getAlertType","location","includes","AlertRuleType","render","hasMetricAlerts","routes","alertType","Fragment","title","orgSlug","projectSlug","EditConditionsBody","fullWidth","provideUserTeams","teams","initiallyLoaded","handleChangeTitle","userTeamIds","Layout"],"sourceRoot":""}