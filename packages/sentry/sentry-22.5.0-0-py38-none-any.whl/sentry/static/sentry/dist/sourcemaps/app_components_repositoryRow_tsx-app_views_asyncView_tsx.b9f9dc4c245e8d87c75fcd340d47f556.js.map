{"version":3,"file":"chunks/app_components_repositoryRow_tsx-app_views_asyncView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/integrations.tsx","webpack:///./app/components/repositoryEditForm.tsx","webpack:///./app/components/repositoryRow.tsx","webpack:///./app/views/asyncView.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t, tct} from 'sentry/locale';\nimport {Integration, Repository} from 'sentry/types';\n\nconst api = new Client();\n\n/**\n * Removes an integration from a project.\n *\n * @param {String} orgId Organization Slug\n * @param {String} projectId Project Slug\n * @param {Object} integration The organization integration to remove\n */\nexport function removeIntegrationFromProject(\n  orgId: string,\n  projectId: string,\n  integration: Integration\n) {\n  const endpoint = `/projects/${orgId}/${projectId}/integrations/${integration.id}/`;\n  addLoadingMessage();\n\n  return api.requestPromise(endpoint, {method: 'DELETE'}).then(\n    () => {\n      addSuccessMessage(t('Disabled %s for %s', integration.name, projectId));\n    },\n    () => {\n      addErrorMessage(t('Failed to disable %s for %s', integration.name, projectId));\n    }\n  );\n}\n\n/**\n * Add an integration to a project\n *\n * @param {String} orgId Organization Slug\n * @param {String} projectId Project Slug\n * @param {Object} integration The organization integration to add\n */\nexport function addIntegrationToProject(\n  orgId: string,\n  projectId: string,\n  integration: Integration\n) {\n  const endpoint = `/projects/${orgId}/${projectId}/integrations/${integration.id}/`;\n  addLoadingMessage();\n\n  return api.requestPromise(endpoint, {method: 'PUT'}).then(\n    () => {\n      addSuccessMessage(t('Enabled %s for %s', integration.name, projectId));\n    },\n    () => {\n      addErrorMessage(t('Failed to enabled %s for %s', integration.name, projectId));\n    }\n  );\n}\n\n/**\n * Delete a respository\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} repositoryId Repository ID\n */\nexport function deleteRepository(client: Client, orgId: string, repositoryId: string) {\n  addLoadingMessage();\n  const promise = client.requestPromise(\n    `/organizations/${orgId}/repos/${repositoryId}/`,\n    {\n      method: 'DELETE',\n    }\n  );\n  promise.then(\n    () => clearIndicators(),\n    () => addErrorMessage(t('Unable to delete repository.'))\n  );\n  return promise;\n}\n\n/**\n * Cancel the deletion of a respository\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} repositoryId Repository ID\n */\nexport function cancelDeleteRepository(\n  client: Client,\n  orgId: string,\n  repositoryId: string\n) {\n  addLoadingMessage();\n  const promise = client.requestPromise(\n    `/organizations/${orgId}/repos/${repositoryId}/`,\n    {\n      method: 'PUT',\n      data: {status: 'visible'},\n    }\n  );\n  promise.then(\n    () => clearIndicators(),\n    () => addErrorMessage(t('Unable to cancel deletion.'))\n  );\n  return promise;\n}\n\nfunction applyRepositoryAddComplete(promise: Promise<Repository>) {\n  promise.then(\n    (repo: Repository) => {\n      const message = tct('[repo] has been successfully added.', {\n        repo: repo.name,\n      });\n      addSuccessMessage(message);\n    },\n    errorData => {\n      const text = errorData.responseJSON.errors\n        ? errorData.responseJSON.errors.__all__\n        : t('Unable to add repository.');\n      addErrorMessage(text);\n    }\n  );\n  return promise;\n}\n\n/**\n * Migrate a repository to a new integration.\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} repositoryId Repository ID\n * @param {Object} integration Integration provider data.\n */\nexport function migrateRepository(\n  client: Client,\n  orgId: string,\n  repositoryId: string,\n  integration: Integration\n) {\n  const data = {integrationId: integration.id};\n  addLoadingMessage();\n  const promise = client.requestPromise(\n    `/organizations/${orgId}/repos/${repositoryId}/`,\n    {\n      data,\n      method: 'PUT',\n    }\n  );\n  return applyRepositoryAddComplete(promise);\n}\n\n/**\n * Add a repository\n *\n * @param {Object} client ApiClient\n * @param {String} orgId Organization Slug\n * @param {String} name Repository identifier/name to add\n * @param {Object} integration Integration provider data.\n */\nexport function addRepository(\n  client: Client,\n  orgId: string,\n  name: string,\n  integration: Integration\n) {\n  const data = {\n    installation: integration.id,\n    identifier: name,\n    provider: `integrations:${integration.provider.key}`,\n  };\n  addLoadingMessage();\n  const promise = client.requestPromise(`/organizations/${orgId}/repos/`, {\n    method: 'POST',\n    data,\n  });\n  return applyRepositoryAddComplete(promise);\n}\n","import {Component} from 'react';\n\nimport {FieldFromConfig} from 'sentry/components/forms';\nimport Form from 'sentry/components/forms/form';\nimport {Field} from 'sentry/components/forms/type';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport {Repository} from 'sentry/types';\n\nimport Alert from './alert';\n\ntype Props = Pick<Form['props'], 'onSubmitSuccess' | 'onCancel'> & {\n  closeModal: () => void;\n  onSubmitSuccess: (data: any) => void;\n  orgSlug: string;\n  repository: Repository;\n};\n\nexport default class RepositoryEditForm extends Component<Props> {\n  get initialData() {\n    const {repository} = this.props;\n\n    return {\n      name: repository.name,\n      url: repository.url || '',\n    };\n  }\n\n  get formFields(): Field[] {\n    const fields: any[] = [\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n        label: t('Name of your repository.'),\n      },\n      {\n        name: 'url',\n        type: 'string',\n        required: false,\n        label: t('Full URL to your repository.'),\n        placeholder: t('https://github.com/my-org/my-repo/'),\n      },\n    ];\n    return fields;\n  }\n\n  render() {\n    const {onCancel, orgSlug, repository} = this.props;\n    const endpoint = `/organizations/${orgSlug}/repos/${repository.id}/`;\n    return (\n      <Form\n        initialData={this.initialData}\n        onSubmitSuccess={data => {\n          this.props.onSubmitSuccess(data);\n          this.props.closeModal();\n        }}\n        apiEndpoint={endpoint}\n        apiMethod=\"PUT\"\n        onCancel={onCancel}\n      >\n        <Alert type=\"warning\" showIcon>\n          {tct(\n            'Changing the [name:repo name] may have consequences if it no longer matches the repo name used when [link:sending commits with releases].',\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/cli/releases/#sentry-cli-commit-integration\" />\n              ),\n              name: <strong>repo name</strong>,\n            }\n          )}\n        </Alert>\n        {this.formFields.map(field => (\n          <FieldFromConfig\n            key={field.name}\n            field={field}\n            inline={false}\n            stacked\n            flexibleControlStateSize\n          />\n        ))}\n      </Form>\n    );\n  }\n}\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  cancelDeleteRepository,\n  deleteRepository,\n} from 'sentry/actionCreators/integrations';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {PanelItem} from 'sentry/components/panels';\nimport RepositoryEditForm from 'sentry/components/repositoryEditForm';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconDelete, IconEdit} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Repository, RepositoryStatus} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype DefaultProps = {\n  showProvider?: boolean;\n};\n\ntype Props = DefaultProps & {\n  api: Client;\n  orgId: string;\n  organization: Organization;\n  repository: Repository;\n  onRepositoryChange?: (data: {id: string; status: RepositoryStatus}) => void;\n};\n\nclass RepositoryRow extends Component<Props> {\n  static defaultProps: DefaultProps = {\n    showProvider: false,\n  };\n\n  getStatusLabel(repo: Repository) {\n    switch (repo.status) {\n      case RepositoryStatus.PENDING_DELETION:\n        return 'Deletion Queued';\n      case RepositoryStatus.DELETION_IN_PROGRESS:\n        return 'Deletion in Progress';\n      case RepositoryStatus.DISABLED:\n        return 'Disabled';\n      case RepositoryStatus.HIDDEN:\n        return 'Disabled';\n      default:\n        return null;\n    }\n  }\n\n  cancelDelete = () => {\n    const {api, orgId, repository, onRepositoryChange} = this.props;\n    cancelDeleteRepository(api, orgId, repository.id).then(\n      data => {\n        if (onRepositoryChange) {\n          onRepositoryChange(data);\n        }\n      },\n      () => {}\n    );\n  };\n\n  deleteRepo = () => {\n    const {api, orgId, repository, onRepositoryChange} = this.props;\n    deleteRepository(api, orgId, repository.id).then(\n      data => {\n        if (onRepositoryChange) {\n          onRepositoryChange(data);\n        }\n      },\n      () => {}\n    );\n  };\n\n  handleEditRepo = (data: Repository) => {\n    const {onRepositoryChange} = this.props;\n    if (onRepositoryChange) {\n      onRepositoryChange(data);\n    }\n  };\n\n  get isActive() {\n    return this.props.repository.status === RepositoryStatus.ACTIVE;\n  }\n\n  renderDeleteButton(hasAccess) {\n    const {repository} = this.props;\n    const isActive = this.isActive;\n    return (\n      <Tooltip\n        title={t(\n          'You must be an organization owner, manager or admin to remove a repository.'\n        )}\n        disabled={hasAccess}\n      >\n        <Confirm\n          disabled={\n            !hasAccess || (!isActive && repository.status !== RepositoryStatus.DISABLED)\n          }\n          onConfirm={this.deleteRepo}\n          message={t(\n            'Are you sure you want to remove this repository? All associated commit data will be removed in addition to the repository.'\n          )}\n        >\n          <StyledButton\n            size=\"xsmall\"\n            icon={<IconDelete size=\"xs\" />}\n            aria-label={t('delete')}\n            disabled={!hasAccess}\n          />\n        </Confirm>\n      </Tooltip>\n    );\n  }\n\n  openModal = () => {\n    const {repository, orgId} = this.props;\n    openModal(({Body, Header, closeModal}) => (\n      <Fragment>\n        <Header closeButton>{t('Edit Repository')}</Header>\n        <Body>\n          <RepositoryEditForm\n            orgSlug={orgId}\n            repository={repository}\n            onSubmitSuccess={this.handleEditRepo}\n            closeModal={closeModal}\n            onCancel={closeModal}\n          />\n        </Body>\n      </Fragment>\n    ));\n  };\n\n  render() {\n    const {repository, showProvider, organization} = this.props;\n    const isActive = this.isActive;\n    const isCustomRepo =\n      organization.features.includes('integrations-custom-scm') &&\n      repository.provider.id === 'integrations:custom_scm';\n\n    return (\n      <Access access={['org:integrations']}>\n        {({hasAccess}) => (\n          <StyledPanelItem status={repository.status}>\n            <RepositoryTitleAndUrl>\n              <RepositoryTitle>\n                <strong>{repository.name}</strong>\n                {!isActive && <small> &mdash; {this.getStatusLabel(repository)}</small>}\n                {repository.status === RepositoryStatus.PENDING_DELETION && (\n                  <StyledButton\n                    size=\"xsmall\"\n                    onClick={this.cancelDelete}\n                    disabled={!hasAccess}\n                    data-test-id=\"repo-cancel\"\n                  >\n                    {t('Cancel')}\n                  </StyledButton>\n                )}\n              </RepositoryTitle>\n              <div>\n                {showProvider && <small>{repository.provider.name}</small>}\n                {showProvider && repository.url && <span>&nbsp;&mdash;&nbsp;</span>}\n                {repository.url && (\n                  <small>\n                    <ExternalLink href={repository.url}>\n                      {repository.url.replace('https://', '')}\n                    </ExternalLink>\n                  </small>\n                )}\n              </div>\n            </RepositoryTitleAndUrl>\n            {isCustomRepo ? (\n              <EditAndDelete>\n                <StyledButton\n                  size=\"xsmall\"\n                  icon={<IconEdit size=\"xs\" />}\n                  aria-label={t('edit')}\n                  disabled={\n                    !hasAccess ||\n                    (!isActive && repository.status !== RepositoryStatus.DISABLED)\n                  }\n                  onClick={() => this.openModal()}\n                />\n                {this.renderDeleteButton(hasAccess)}\n              </EditAndDelete>\n            ) : (\n              this.renderDeleteButton(hasAccess)\n            )}\n          </StyledPanelItem>\n        )}\n      </Access>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)<{status: RepositoryStatus}>`\n  /* shorter top padding because of title lineheight */\n  padding: ${space(1)} ${space(2)} ${space(2)};\n  justify-content: space-between;\n  align-items: center;\n  flex: 1;\n\n  ${p =>\n    p.status === RepositoryStatus.DISABLED &&\n    `\n    filter: grayscale(1);\n    opacity: 0.4;\n  `};\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n\nconst RepositoryTitleAndUrl = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst EditAndDelete = styled('div')`\n  display: flex;\n  margin-left: ${space(1)};\n`;\n\nconst RepositoryTitle = styled('div')`\n  margin-bottom: ${space(1)};\n  /* accommodate cancel button height */\n  line-height: 26px;\n`;\n\nexport default withOrganization(RepositoryRow);\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n"],"names":["deleteRepository","client","orgId","repositoryId","addLoadingMessage","promise","requestPromise","method","then","clearIndicators","addErrorMessage","t","cancelDeleteRepository","data","status","applyRepositoryAddComplete","repo","message","tct","name","addSuccessMessage","errorData","text","responseJSON","errors","__all__","migrateRepository","integration","integrationId","id","addRepository","installation","identifier","provider","key","Client","RepositoryEditForm","Component","initialData","repository","this","props","url","formFields","type","required","label","placeholder","render","onCancel","orgSlug","endpoint","onSubmitSuccess","closeModal","apiEndpoint","apiMethod","showIcon","link","href","map","field","inline","stacked","flexibleControlStateSize","RepositoryRow","api","onRepositoryChange","openModal","Body","Header","Fragment","closeButton","handleEditRepo","getStatusLabel","RepositoryStatus","isActive","renderDeleteButton","hasAccess","title","disabled","onConfirm","deleteRepo","StyledButton","size","icon","showProvider","organization","isCustomRepo","features","includes","access","StyledPanelItem","RepositoryTitleAndUrl","RepositoryTitle","onClick","cancelDelete","replace","EditAndDelete","PanelItem","space","p","Button","withOrganization","AsyncView","AsyncComponent","getTitle","renderComponent"],"sourceRoot":""}