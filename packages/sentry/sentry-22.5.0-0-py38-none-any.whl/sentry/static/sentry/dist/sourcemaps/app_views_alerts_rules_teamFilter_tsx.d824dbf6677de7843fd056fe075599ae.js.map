{"version":3,"file":"chunks/app_views_alerts_rules_teamFilter_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/rules/filter.tsx","webpack:///./app/views/alerts/rules/teamFilter.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Badge from 'sentry/components/badge';\nimport CheckboxFancy from 'sentry/components/checkboxFancy/checkboxFancy';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport DropdownControl, {Content} from 'sentry/components/dropdownControl';\nimport {IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  header: React.ReactElement;\n  items: Array<{checked: boolean; filtered: boolean; label: string; value: string}>;\n  onFilterChange: (filterSelection: Set<string>) => void;\n  fullWidth?: boolean;\n  showMyTeamsDescription?: boolean;\n};\n\nfunction Filter({\n  onFilterChange,\n  header,\n  items,\n  showMyTeamsDescription,\n  fullWidth = false,\n}: Props) {\n  function toggleFilter(value: string) {\n    const newSelection = new Set(\n      items.filter(item => item.checked).map(item => item.value)\n    );\n    if (newSelection.has(value)) {\n      newSelection.delete(value);\n    } else {\n      newSelection.add(value);\n    }\n    onFilterChange(newSelection);\n  }\n\n  function getActiveFilters() {\n    return items.filter(item => item.checked);\n  }\n\n  const activeFilters = getActiveFilters();\n\n  let filterDescription = showMyTeamsDescription ? t('My Teams') : t('All Teams');\n  if (activeFilters.length > 0) {\n    filterDescription = activeFilters[0].label;\n  }\n\n  return (\n    <DropdownControl\n      menuWidth=\"240px\"\n      fullWidth={fullWidth}\n      alwaysRenderMenu={false}\n      button={({isOpen, getActorProps}) => (\n        <StyledDropdownButton\n          {...getActorProps()}\n          isOpen={isOpen}\n          icon={<IconUser />}\n          priority=\"default\"\n          data-test-id=\"filter-button\"\n          fullWidth={fullWidth}\n          rightAlignChevron={fullWidth}\n          detached\n        >\n          <DropdownButtonText fullWidth={fullWidth}>\n            {filterDescription}\n          </DropdownButtonText>\n          {activeFilters.length > 1 && (\n            <StyledBadge text={`+${activeFilters.length - 1}`} />\n          )}\n        </StyledDropdownButton>\n      )}\n    >\n      {({isOpen, getMenuProps}) => (\n        <MenuContent\n          {...getMenuProps()}\n          isOpen={isOpen}\n          blendCorner\n          alignMenu=\"left\"\n          width=\"240px\"\n          detached\n        >\n          <List>\n            {header}\n            <Fragment>\n              {items\n                .filter(item => !item.filtered)\n                .map(item => (\n                  <ListItem\n                    key={item.value}\n                    isChecked={item.checked}\n                    onClick={event => {\n                      event.stopPropagation();\n                      toggleFilter(item.value);\n                    }}\n                  >\n                    <TeamName>{item.label}</TeamName>\n                    <CheckboxFancy isChecked={item.checked} />\n                  </ListItem>\n                ))}\n            </Fragment>\n          </List>\n        </MenuContent>\n      )}\n    </DropdownControl>\n  );\n}\n\nconst MenuContent = styled(Content)`\n  max-height: 290px;\n  overflow-y: auto;\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)<{fullWidth: boolean}>`\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n\n  z-index: ${p => p.theme.zIndex.dropdown};\n\n  ${p =>\n    p.fullWidth\n      ? `\n      width: 100%\n  `\n      : `max-width: 200px`}\n`;\n\nconst DropdownButtonText = styled('span')<{fullWidth: boolean}>`\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  flex: 1;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    text-align: ${p => p.fullWidth && 'start'};\n  }\n`;\n\nconst StyledBadge = styled(Badge)`\n  flex-shrink: 0;\n`;\n\nconst List = styled('ul')`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ListItem = styled('li')<{isChecked?: boolean}>`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n  padding: ${space(1)} ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n  :hover {\n    background-color: ${p => p.theme.backgroundSecondary};\n  }\n  ${CheckboxFancy} {\n    opacity: ${p => (p.isChecked ? 1 : 0.3)};\n  }\n\n  &:hover ${CheckboxFancy} {\n    opacity: 1;\n  }\n\n  &:hover span {\n    color: ${p => p.theme.blue300};\n    text-decoration: underline;\n  }\n`;\n\nconst TeamName = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  ${overflowEllipsis};\n`;\n\nexport default Filter;\n","import {useState} from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport Input from 'sentry/components/forms/controls/input';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport useTeams from 'sentry/utils/useTeams';\n\nimport Filter from './filter';\n\ninterface Props {\n  handleChangeFilter: (activeFilters: Set<string>) => void;\n  selectedTeams: Set<string>;\n  fullWidth?: boolean;\n  /**\n   * only show teams user is a member of\n   */\n  showIsMemberTeams?: boolean;\n  /**\n   * show My Teams and Unassigned options\n   */\n  showMyTeamsAndUnassigned?: boolean;\n  /**\n   * show My Teams as the default dropdown description\n   */\n  showMyTeamsDescription?: boolean;\n}\n\nfunction TeamFilter({\n  selectedTeams,\n  handleChangeFilter,\n  fullWidth = false,\n  showIsMemberTeams = false,\n  showMyTeamsAndUnassigned = true,\n  showMyTeamsDescription = false,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams();\n  const debouncedSearch = debounce(onSearch, DEFAULT_DEBOUNCE_DURATION);\n  const [teamFilterSearch, setTeamFilterSearch] = useState<string | undefined>();\n  const isSuperuser = isActiveSuperuser();\n\n  const additionalOptions = [\n    {\n      label: t('My Teams'),\n      value: 'myteams',\n      checked: selectedTeams.has('myteams'),\n      filtered: false,\n    },\n    {\n      label: t('Unassigned'),\n      value: 'unassigned',\n      checked: selectedTeams.has('unassigned'),\n      filtered: false,\n    },\n  ];\n  const isMemberTeams = teams.filter(team => team.isMember);\n  const teamItems = (isSuperuser ? teams : showIsMemberTeams ? isMemberTeams : teams).map(\n    ({id, slug}) => ({\n      label: slug,\n      value: id,\n      filtered: teamFilterSearch\n        ? !slug.toLowerCase().includes(teamFilterSearch.toLowerCase())\n        : false,\n      checked: selectedTeams.has(id),\n    })\n  );\n\n  return (\n    <Filter\n      fullWidth={fullWidth}\n      showMyTeamsDescription={showMyTeamsDescription}\n      header={\n        <InputWrapper>\n          <StyledInput\n            autoFocus\n            placeholder={t('Filter teams')}\n            onClick={event => {\n              event.stopPropagation();\n            }}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              const search = event.target.value;\n              setTeamFilterSearch(search);\n              debouncedSearch(search);\n            }}\n            value={teamFilterSearch || ''}\n          />\n          {fetching && <StyledLoadingIndicator size={16} mini />}\n        </InputWrapper>\n      }\n      onFilterChange={handleChangeFilter}\n      items={\n        showMyTeamsAndUnassigned ? [...additionalOptions, ...teamItems] : [...teamItems]\n      }\n    />\n  );\n}\n\nexport default TeamFilter;\n\nconst InputWrapper = styled('div')`\n  position: relative;\n`;\n\nconst StyledInput = styled(Input)`\n  border: none;\n  border-radius: 0;\n  border-bottom: solid 1px ${p => p.theme.border};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  position: absolute;\n  right: 0;\n  top: ${space(0.75)};\n`;\n"],"names":["Filter","onFilterChange","header","items","showMyTeamsDescription","fullWidth","activeFilters","filter","item","checked","filterDescription","t","length","label","menuWidth","alwaysRenderMenu","button","isOpen","getActorProps","StyledDropdownButton","icon","priority","rightAlignChevron","detached","DropdownButtonText","StyledBadge","text","getMenuProps","MenuContent","blendCorner","alignMenu","width","List","Fragment","filtered","map","ListItem","isChecked","onClick","event","stopPropagation","value","newSelection","Set","has","delete","add","toggleFilter","TeamName","Content","DropdownButton","p","theme","zIndex","dropdown","breakpoints","Badge","space","border","backgroundSecondary","CheckboxFancy","blue300","fontSizeMedium","overflowEllipsis","TeamFilter","selectedTeams","handleChangeFilter","showIsMemberTeams","showMyTeamsAndUnassigned","teams","onSearch","fetching","useTeams","debouncedSearch","debounce","DEFAULT_DEBOUNCE_DURATION","teamFilterSearch","setTeamFilterSearch","useState","isSuperuser","isActiveSuperuser","additionalOptions","isMemberTeams","team","isMember","teamItems","id","slug","toLowerCase","includes","InputWrapper","StyledInput","autoFocus","placeholder","onChange","search","target","StyledLoadingIndicator","size","mini","Input","LoadingIndicator"],"sourceRoot":""}