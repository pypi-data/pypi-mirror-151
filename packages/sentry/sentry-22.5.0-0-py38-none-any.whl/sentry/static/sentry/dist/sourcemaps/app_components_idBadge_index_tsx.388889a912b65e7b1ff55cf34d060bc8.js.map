{"version":3,"file":"chunks/app_components_idBadge_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/errorBoundary.tsx","webpack:///./app/components/errors/detailedError.tsx","webpack:///./app/components/idBadge/memberBadge.tsx","webpack:///./app/components/idBadge/organizationBadge.tsx","webpack:///./app/components/idBadge/getBadge.tsx","webpack:///./app/components/idBadge/index.tsx","webpack:///./app/components/idBadge/teamBadge/badge.tsx","webpack:///./app/components/idBadge/teamBadge/index.tsx","webpack:///./app/stores/teamStore.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport Alert from 'sentry/components/alert';\nimport DetailedError from 'sentry/components/errors/detailedError';\nimport {t} from 'sentry/locale';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\ntype DefaultProps = {\n  mini: boolean;\n};\n\ntype Props = DefaultProps & {\n  // To add context for better UX\n  className?: string;\n  customComponent?: React.ReactNode;\n  // To add context for better error reporting\n  errorTag?: Record<string, string>;\n\n  message?: React.ReactNode;\n};\n\ntype State = {\n  error: Error | null;\n};\n\nconst exclamation = ['Raspberries', 'Snap', 'Frig', 'Welp', 'Uhhhh', 'Hmmm'] as const;\n\nfunction getExclamation() {\n  return exclamation[Math.floor(Math.random() * exclamation.length)];\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    mini: false,\n  };\n\n  state: State = {\n    error: null,\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    // Listen for route changes so we can clear error\n    this.unlistenBrowserHistory = browserHistory.listen(() => {\n      // Prevent race between component unmount and browserHistory change\n      // Setting state on a component that is being unmounted throws an error\n      if (this._isMounted) {\n        this.setState({error: null});\n      }\n    });\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    const {errorTag} = this.props;\n\n    this.setState({error});\n    Sentry.withScope(scope => {\n      if (errorTag) {\n        Object.keys(errorTag).forEach(tag => scope.setTag(tag, errorTag[tag]));\n      }\n\n      scope.setExtra('errorInfo', errorInfo);\n      Sentry.captureException(error);\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    if (this.unlistenBrowserHistory) {\n      this.unlistenBrowserHistory();\n    }\n  }\n\n  private unlistenBrowserHistory?: ReturnType<typeof browserHistory.listen>;\n  private _isMounted = false;\n\n  render() {\n    const {error} = this.state;\n\n    if (!error) {\n      // when there's not an error, render children untouched\n      return this.props.children;\n    }\n\n    const {customComponent, mini, message, className} = this.props;\n\n    if (typeof customComponent !== 'undefined') {\n      return customComponent;\n    }\n\n    if (mini) {\n      return (\n        <Alert type=\"error\" showIcon className={className}>\n          {message || t('There was a problem rendering this component')}\n        </Alert>\n      );\n    }\n\n    return (\n      <Wrapper>\n        <DetailedError\n          heading={getDynamicText({\n            value: getExclamation(),\n            fixed: exclamation[0],\n          })}\n          message={t(\n            `Something went horribly wrong rendering this page.\nWe use a decent error reporting service so this will probably be fixed soon. Unless our error reporting service is also broken. That would be awkward.\nAnyway, we apologize for the inconvenience.`\n          )}\n        />\n        <StackTrace>{error.toString()}</StackTrace>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled('div')`\n  color: ${p => p.theme.textColor};\n  padding: ${p => p.theme.grid * 3}px;\n  max-width: 1000px;\n  margin: auto;\n`;\n\nconst StackTrace = styled('pre')`\n  white-space: pre-wrap;\n  margin: 32px;\n  margin-left: 85px;\n  margin-right: 18px;\n`;\n\nexport default ErrorBoundary;\n","import {Component} from 'react';\nimport * as Sentry from '@sentry/react';\nimport classNames from 'classnames';\n\nimport Button from 'sentry/components/button';\nimport {IconFlag} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\ntype DefaultProps = {\n  /**\n   * Hide support links in footer of error message\n   */\n  hideSupportLinks: boolean;\n};\n\ntype Props = DefaultProps & {\n  /**\n   * Error heading\n   */\n  heading: React.ReactNode;\n  className?: string;\n  /**\n   * Detailed error explanation\n   */\n  message?: React.ReactNode;\n  /**\n   * Retry callback\n   */\n  onRetry?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n};\n\nfunction openFeedback(e: React.MouseEvent) {\n  e.preventDefault();\n  Sentry.showReportDialog();\n}\n\nclass DetailedError extends Component<Props> {\n  static defaultProps: DefaultProps = {\n    hideSupportLinks: false,\n  };\n\n  componentDidMount() {\n    // XXX(epurkhiser): Why is this here?\n    this.forceUpdateTimeout = window.setTimeout(() => this.forceUpdate(), 100);\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.forceUpdateTimeout);\n  }\n\n  forceUpdateTimeout: number | undefined = undefined;\n\n  render() {\n    const {className, heading, message, onRetry, hideSupportLinks} = this.props;\n    const cx = classNames('detailed-error', className);\n\n    const showFooter = !!onRetry || !hideSupportLinks;\n\n    return (\n      <div className={cx}>\n        <div className=\"detailed-error-icon\">\n          <IconFlag size=\"lg\" />\n        </div>\n        <div className=\"detailed-error-content\">\n          <h4>{heading}</h4>\n\n          <div className=\"detailed-error-content-body\">{message}</div>\n\n          {showFooter && (\n            <div className=\"detailed-error-content-footer\">\n              <div>\n                {onRetry && (\n                  <a onClick={onRetry} className=\"btn btn-default\">\n                    {t('Retry')}\n                  </a>\n                )}\n              </div>\n\n              {!hideSupportLinks && (\n                <div className=\"detailed-error-support-links\">\n                  {Sentry.lastEventId() && (\n                    <Button priority=\"link\" onClick={openFeedback}>\n                      {t('Fill out a report')}\n                    </Button>\n                  )}\n                  <a href=\"https://status.sentry.io/\">{t('Service status')}</a>\n\n                  <a href=\"https://sentry.io/support/\">{t('Contact support')}</a>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DetailedError;\n","import styled from '@emotion/styled';\nimport omit from 'lodash/omit';\n\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {AvatarUser, Member} from 'sentry/types';\n\ninterface Props {\n  member: Member;\n  avatarSize?: UserAvatar['props']['size'];\n  className?: string;\n  displayEmail?: string;\n  displayName?: React.ReactNode;\n  hideEmail?: boolean;\n  orgId?: string;\n  useLink?: boolean;\n}\n\nfunction getMemberUser(member: Member): AvatarUser {\n  if (member.user) {\n    return member.user;\n  }\n  // Adapt the member into a AvatarUser\n  return {\n    id: '',\n    name: member.name,\n    email: member.email,\n    username: '',\n    ip_address: '',\n  };\n}\n\nconst MemberBadge = ({\n  avatarSize = 24,\n  useLink = true,\n  hideEmail = false,\n  displayName,\n  displayEmail,\n  member,\n  orgId,\n  className,\n}: Props) => {\n  const user = getMemberUser(member);\n  const title =\n    displayName ||\n    user.name ||\n    user.email ||\n    user.username ||\n    user.ipAddress ||\n    // Because this can be used to render EventUser models, or User *interface*\n    // objects from serialized Event models. we try both ipAddress and ip_address.\n    user.ip_address;\n\n  return (\n    <StyledUserBadge className={className}>\n      <StyledAvatar user={user} size={avatarSize} />\n      <StyledNameAndEmail>\n        <StyledName\n          useLink={useLink && !!orgId}\n          hideEmail={hideEmail}\n          to={(member && orgId && `/settings/${orgId}/members/${member.id}/`) || ''}\n        >\n          {title}\n        </StyledName>\n        {!hideEmail && <StyledEmail>{displayEmail || user.email}</StyledEmail>}\n      </StyledNameAndEmail>\n    </StyledUserBadge>\n  );\n};\n\nconst StyledUserBadge = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledNameAndEmail = styled('div')`\n  flex-shrink: 1;\n  min-width: 0;\n  line-height: 1;\n`;\n\nconst StyledEmail = styled('div')`\n  font-size: 0.875em;\n  margin-top: ${space(0.25)};\n  color: ${p => p.theme.gray300};\n  ${overflowEllipsis};\n`;\n\ninterface NameProps {\n  hideEmail: boolean;\n  to: LinkProps['to'];\n  useLink: boolean;\n}\n\nconst StyledName = styled(({useLink, to, ...props}: NameProps) => {\n  const forwardProps = omit(props, 'hideEmail');\n  return useLink ? <Link to={to} {...forwardProps} /> : <span {...forwardProps} />;\n})`\n  font-weight: ${(p: NameProps) => (p.hideEmail ? 'inherit' : 'bold')};\n  line-height: 1.15em;\n  ${overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(UserAvatar)`\n  min-width: ${space(3)};\n  min-height: ${space(3)};\n  margin-right: ${space(1)};\n`;\n\nexport default MemberBadge;\n","import BadgeDisplayName from 'sentry/components/idBadge/badgeDisplayName';\nimport BaseBadge from 'sentry/components/idBadge/baseBadge';\n\ntype BaseBadgeProps = React.ComponentProps<typeof BaseBadge>;\ntype Organization = NonNullable<BaseBadgeProps['organization']>;\n\ntype Props = Partial<Omit<BaseBadgeProps, 'project' | 'organization' | 'team'>> & {\n  // A full organization is not used, but required to satisfy types with\n  // withOrganization()\n  organization: Organization;\n  // If true, will use default max-width, or specify one as a string\n  hideOverflow?: boolean | string;\n};\n\nconst OrganizationBadge = ({hideOverflow = true, organization, ...props}: Props) => (\n  <BaseBadge\n    displayName={\n      <BadgeDisplayName hideOverflow={hideOverflow}>{organization.slug}</BadgeDisplayName>\n    }\n    organization={organization}\n    {...props}\n  />\n);\n\nexport default OrganizationBadge;\n","import BaseBadge from 'sentry/components/idBadge/baseBadge';\nimport MemberBadge from 'sentry/components/idBadge/memberBadge';\nimport OrganizationBadge from 'sentry/components/idBadge/organizationBadge';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport {TeamBadge} from 'sentry/components/idBadge/teamBadge';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport {Member, User} from 'sentry/types';\n\ntype BaseBadgeProps = React.ComponentProps<typeof BaseBadge>;\ntype DisplayName = BaseBadgeProps['displayName'];\n\ntype Props = Omit<BaseBadgeProps, 'displayName'> & {\n  displayName?: DisplayName;\n  member?: Member;\n  user?: User;\n};\n\nfunction getBadge({\n  organization,\n  team,\n  project,\n  user,\n  member,\n  ...props\n}: Props): React.ReactElement | null {\n  if (organization) {\n    return <OrganizationBadge organization={organization} {...props} />;\n  }\n  if (team) {\n    return <TeamBadge team={team} {...props} />;\n  }\n  if (project) {\n    return <ProjectBadge project={project} {...props} />;\n  }\n  if (user) {\n    return <UserBadge user={user} {...props} />;\n  }\n  if (member) {\n    return <MemberBadge member={member} {...props} />;\n  }\n\n  return null;\n}\n\nexport default getBadge;\n","import styled from '@emotion/styled';\n\nimport ErrorBoundary from 'sentry/components/errorBoundary';\n\nimport getBadge from './getBadge';\n\ntype Props = React.ComponentProps<typeof getBadge> & Record<string, any>;\n\n/**\n * Public interface for all \"id badges\":\n * Organization, project, team, user\n */\n\nconst IdBadge = (props: Props) => {\n  const componentBadge = getBadge(props);\n\n  if (!componentBadge) {\n    throw new Error(\n      'IdBadge: required property missing (organization, project, team, member, user) or misconfigured'\n    );\n  }\n\n  return <InlineErrorBoundary mini>{componentBadge}</InlineErrorBoundary>;\n};\n\nexport default IdBadge;\n\nconst InlineErrorBoundary = styled(ErrorBoundary)`\n  background-color: transparent;\n  border-color: transparent;\n  display: flex;\n  align-items: center;\n  margin-bottom: 0;\n  box-shadow: none;\n  padding: 0; /* Because badges don't have any padding, so this should make the boundary fit well */\n`;\n","import BadgeDisplayName from 'sentry/components/idBadge/badgeDisplayName';\nimport BaseBadge from 'sentry/components/idBadge/baseBadge';\n\ntype BaseBadgeProps = React.ComponentProps<typeof BaseBadge>;\ntype Team = NonNullable<BaseBadgeProps['team']>;\n\nexport interface BadgeProps\n  extends Partial<Omit<BaseBadgeProps, 'project' | 'organization' | 'team'>> {\n  team: Team;\n  // If true, will use default max-width, or specify one as a string\n  hideOverflow?: boolean | string;\n}\n\nconst Badge = ({hideOverflow = true, team, ...props}: BadgeProps): React.ReactElement => (\n  <BaseBadge\n    data-test-id=\"team-badge\"\n    displayName={\n      <BadgeDisplayName hideOverflow={hideOverflow}>{`#${team.slug}`}</BadgeDisplayName>\n    }\n    team={team}\n    {...props}\n  />\n);\n\nexport default Badge;\n","import TeamStore from 'sentry/stores/teamStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\n\nimport Badge, {BadgeProps} from './badge';\n\nfunction TeamBadge(props: BadgeProps) {\n  const {teams} = useLegacyStore(TeamStore);\n\n  // Get the most up-to-date team from the store\n  const teamFromStore = teams.find(t => t.id === props.team.id);\n\n  return <Badge {...props} team={teamFromStore ?? props.team} />;\n}\n\nexport {TeamBadge};\n","import {createStore} from 'reflux';\n\nimport TeamActions from 'sentry/actions/teamActions';\nimport {Team} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\nimport {CommonStoreDefinition} from './types';\n\ntype State = {\n  cursor: string | null;\n  hasMore: boolean | null;\n  loadedUserTeams: boolean;\n  loading: boolean;\n  teams: Team[];\n};\n\ninterface TeamStoreDefinition extends CommonStoreDefinition<State> {\n  getAll(): Team[];\n  getById(id: string): Team | null;\n  getBySlug(slug: string): Team | null;\n  init(): void;\n  initialized: boolean;\n  loadInitialData(items: Team[], hasMore?: boolean | null, cursor?: string | null): void;\n  onCreateSuccess(team: Team): void;\n  onRemoveSuccess(slug: string): void;\n  onUpdateSuccess(itemId: string, response: Team): void;\n  reset(): void;\n\n  state: State;\n}\n\nconst teamStoreConfig: TeamStoreDefinition = {\n  initialized: false,\n  state: {\n    teams: [],\n    loadedUserTeams: false,\n    loading: true,\n    hasMore: null,\n    cursor: null,\n  },\n\n  unsubscribeListeners: [],\n\n  init() {\n    this.reset();\n\n    this.unsubscribeListeners.push(\n      this.listenTo(TeamActions.createTeamSuccess, this.onCreateSuccess)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(TeamActions.fetchDetailsSuccess, this.onUpdateSuccess)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(TeamActions.loadTeams, this.loadInitialData)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(TeamActions.loadUserTeams, this.loadUserTeams)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(TeamActions.removeTeamSuccess, this.onRemoveSuccess)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess)\n    );\n    this.unsubscribeListeners.push(this.listenTo(TeamActions.reset, this.reset));\n  },\n\n  reset() {\n    this.state = {\n      teams: [],\n      loadedUserTeams: false,\n      loading: true,\n      hasMore: null,\n      cursor: null,\n    };\n  },\n\n  setTeams(teams, hasMore, cursor) {\n    this.initialized = true;\n    this.state = {\n      teams,\n      loadedUserTeams: defined(hasMore) ? !hasMore : this.state.loadedUserTeams,\n      loading: false,\n      hasMore: hasMore ?? this.state.hasMore,\n      cursor: cursor ?? this.state.cursor,\n    };\n    this.trigger(new Set(teams.map(team => team.id)));\n  },\n\n  loadInitialData(items, hasMore, cursor) {\n    const teams = this.updateTeams(items);\n    this.setTeams(teams, hasMore, cursor);\n  },\n\n  loadUserTeams(userTeams: Team[]) {\n    const teams = this.updateTeams(userTeams);\n\n    this.state = {\n      ...this.state,\n      loadedUserTeams: true,\n      teams,\n    };\n\n    this.trigger(new Set(teams.map(team => team.id)));\n  },\n\n  onUpdateSuccess(itemId, response) {\n    if (!response) {\n      return;\n    }\n\n    const item = this.getBySlug(itemId);\n\n    if (!item) {\n      this.state = {\n        ...this.state,\n        teams: [...this.state.teams, response],\n      };\n\n      this.trigger(new Set([itemId]));\n      return;\n    }\n\n    // Slug was changed\n    // Note: This is the proper way to handle slug changes but unfortunately not all of our\n    // components use stores correctly. To be safe reload browser :((\n    if (response.slug !== itemId) {\n      // Replace the team\n      const teams = [...this.state.teams.filter(({slug}) => slug !== itemId), response];\n\n      this.state = {...this.state, teams};\n      this.trigger(new Set([response.slug]));\n      return;\n    }\n\n    const newTeams = [...this.state.teams];\n    const index = newTeams.findIndex(team => team.slug === response.slug);\n    newTeams[index] = response;\n\n    this.state = {...this.state, teams: newTeams};\n    this.trigger(new Set([itemId]));\n  },\n\n  onRemoveSuccess(slug: string) {\n    const teams = this.state.teams.filter(team => team.slug !== slug);\n    this.setTeams(teams);\n  },\n\n  onCreateSuccess(team: Team) {\n    this.loadInitialData([team]);\n  },\n\n  getState() {\n    return this.state;\n  },\n\n  getById(id: string) {\n    const {teams} = this.state;\n    return teams.find(item => item.id.toString() === id.toString()) || null;\n  },\n\n  getBySlug(slug: string) {\n    const {teams} = this.state;\n    return teams.find(item => item.slug === slug) || null;\n  },\n\n  getAll() {\n    return this.state.teams;\n  },\n\n  updateTeams(teams: Team[]) {\n    const teamIdMap = this.state.teams.reduce((acc: Record<string, Team>, team: Team) => {\n      acc[team.id] = team;\n      return acc;\n    }, {});\n\n    // Replace or insert new user teams\n    teams.reduce((acc: Record<string, Team>, userTeam: Team) => {\n      acc[userTeam.id] = userTeam;\n      return acc;\n    }, teamIdMap);\n\n    return Object.values(teamIdMap).sort((a, b) => a.slug.localeCompare(b.slug));\n  },\n};\n\nconst TeamStore = createStore(makeSafeRefluxStore(teamStoreConfig));\nexport default TeamStore;\n"],"names":["exclamation","ErrorBoundary","Component","error","componentDidMount","this","_isMounted","unlistenBrowserHistory","browserHistory","setState","componentDidCatch","errorInfo","errorTag","props","Sentry","scope","Object","keys","forEach","tag","setTag","setExtra","componentWillUnmount","render","state","children","customComponent","mini","message","className","type","showIcon","t","Wrapper","heading","getDynamicText","value","Math","floor","random","length","fixed","StackTrace","toString","p","theme","textColor","grid","openFeedback","e","preventDefault","DetailedError","undefined","forceUpdateTimeout","window","setTimeout","forceUpdate","clearTimeout","onRetry","hideSupportLinks","cx","classNames","showFooter","size","onClick","priority","href","MemberBadge","avatarSize","useLink","hideEmail","displayName","displayEmail","member","orgId","user","id","name","email","username","ip_address","getMemberUser","title","ipAddress","StyledUserBadge","StyledAvatar","StyledNameAndEmail","StyledName","to","StyledEmail","space","gray300","overflowEllipsis","forwardProps","omit","UserAvatar","OrganizationBadge","hideOverflow","organization","slug","IdBadge","componentBadge","team","project","getBadge","Error","InlineErrorBoundary","Badge","TeamBadge","teams","useLegacyStore","TeamStore","teamFromStore","find","teamStoreConfig","initialized","loadedUserTeams","loading","hasMore","cursor","unsubscribeListeners","init","reset","push","listenTo","TeamActions","onCreateSuccess","onUpdateSuccess","loadInitialData","loadUserTeams","onRemoveSuccess","setTeams","defined","trigger","Set","map","items","updateTeams","userTeams","itemId","response","getBySlug","filter","newTeams","index","findIndex","getState","getById","item","getAll","teamIdMap","reduce","acc","userTeam","values","sort","a","b","localeCompare","createStore","makeSafeRefluxStore"],"sourceRoot":""}