{"version":3,"file":"chunks/app_views_profiling_functions_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/performanceDuration.tsx","webpack:///./app/components/profiling/breadcrumb.tsx","webpack:///./app/utils/useLocation.tsx","webpack:///./app/views/profiling/header.tsx","webpack:///./app/views/profiling/functions/content.tsx","webpack:///./app/views/profiling/functions/index.tsx","webpack:///./app/views/profiling/routes.tsx"],"sourcesContent":["import Duration from 'sentry/components/duration';\nimport {defined} from 'sentry/utils';\n\ninterface DurationProps {\n  abbreviation?: boolean;\n}\n\ninterface SecondsProps extends DurationProps {\n  seconds: number;\n}\n\ninterface MillisecondsProps extends DurationProps {\n  milliseconds: number;\n}\n\ninterface NanosecondsProps extends DurationProps {\n  nanoseconds: number;\n}\n\ntype PerformanceDurationProps = SecondsProps | MillisecondsProps | NanosecondsProps;\n\nfunction isMilliseconds(props: PerformanceDurationProps): props is MillisecondsProps {\n  return defined((props as MillisecondsProps).milliseconds);\n}\n\nfunction isNanoseconds(props: PerformanceDurationProps): props is NanosecondsProps {\n  return defined((props as NanosecondsProps).nanoseconds);\n}\n\nfunction PerformanceDuration(props: PerformanceDurationProps) {\n  const normalizedSeconds = isNanoseconds(props)\n    ? props.nanoseconds / 1_000_000_000\n    : isMilliseconds(props)\n    ? props.milliseconds / 1000\n    : props.seconds;\n\n  return (\n    <Duration\n      abbreviation={props.abbreviation}\n      seconds={normalizedSeconds}\n      fixedDigits={2}\n    />\n  );\n}\n\nexport default PerformanceDuration;\n","import {useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {\n  generateFlamegraphRouteWithQuery,\n  generateFunctionsRouteWithQuery,\n  generateProfilingRouteWithQuery,\n} from 'sentry/views/profiling/routes';\n\ntype ProfilingTrail = {\n  type: 'landing';\n};\n\ntype FunctionsTrail = {\n  payload: {\n    projectSlug: Project['slug'];\n    transaction: string;\n    version: string;\n  };\n  type: 'functions';\n};\n\ntype FlamegraphTrail = {\n  payload: {\n    profileId: string;\n    projectSlug: string;\n    transaction: string;\n  };\n  type: 'flamegraph';\n};\n\ninterface BreadcrumbProps {\n  location: Location;\n  organization: Organization;\n  trails: Trail[];\n}\n\nfunction Breadcrumb({location, organization, trails}: BreadcrumbProps) {\n  const crumbs = useMemo(\n    () => trails.map(trail => trailToCrumb(trail, {location, organization})),\n    [location, organization, trails]\n  );\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nfunction trailToCrumb(\n  trail: Trail,\n  {\n    location,\n    organization,\n  }: {\n    location: Location;\n    organization: Organization;\n  }\n): Crumb {\n  switch (trail.type) {\n    case 'landing': {\n      return {\n        to: generateProfilingRouteWithQuery({\n          location,\n          orgSlug: organization.slug,\n        }),\n        label: t('Profiling'),\n        preservePageFilters: true,\n      };\n    }\n    case 'functions': {\n      return {\n        to: generateFunctionsRouteWithQuery({\n          location,\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          transaction: trail.payload.transaction,\n          version: trail.payload.version,\n        }),\n        label: t('Functions'),\n        preservePageFilters: true,\n      };\n    }\n    case 'flamegraph': {\n      return {\n        to: generateFlamegraphRouteWithQuery({\n          location,\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          profileId: trail.payload.profileId,\n        }),\n        label: trail.payload.transaction,\n        preservePageFilters: true,\n      };\n    }\n    default:\n      throw new Error(`Unknown breadcrumb type: ${JSON.stringify(trail)}`);\n  }\n}\n\ntype Trail = ProfilingTrail | FunctionsTrail | FlamegraphTrail;\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n`;\n\nexport {Breadcrumb};\n","import {Location, Query} from 'history';\n\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\nexport function useLocation<Q extends Query>(): Location<Q> {\n  const route = useRouteContext();\n  return route.location;\n}\n","import styled from '@emotion/styled';\n\nimport IdBadge from 'sentry/components/idBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {Breadcrumb} from 'sentry/components/profiling/breadcrumb';\nimport {tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Project} from 'sentry/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ntype ProfilingPage = 'landing' | 'functions';\n\ninterface ProfilingHeaderProps {\n  page: ProfilingPage;\n  project: Project;\n  transaction: string;\n  version: string;\n}\n\nfunction ProfilingHeader(props: ProfilingHeaderProps) {\n  const location = useLocation();\n  const organization = useOrganization();\n\n  return (\n    <Layout.Header>\n      <Layout.HeaderContent>\n        <Breadcrumb\n          location={location}\n          organization={organization}\n          trails={[\n            {type: 'landing'},\n            {\n              type: 'functions',\n              payload: {\n                projectSlug: props.project.slug,\n                transaction: props.transaction,\n                version: props.version,\n              },\n            },\n          ]}\n        />\n        <Layout.Title>\n          <Title>\n            {props.project && (\n              <IdBadge\n                project={props.project}\n                avatarSize={28}\n                hideName\n                avatarProps={{hasTooltip: true, tooltip: props.project.slug}}\n              />\n            )}\n            {tct('[transaction] \\u2014 [version]', {\n              transaction: props.transaction,\n              version: props.version,\n            })}\n          </Title>\n        </Layout.Title>\n      </Layout.HeaderContent>\n    </Layout.Header>\n  );\n}\n\nconst Title = styled('div')`\n  display: flex;\n  gap: ${space(1)};\n`;\n\nexport {ProfilingHeader};\n","import {useCallback, useMemo} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Count from 'sentry/components/count';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PerformanceDuration from 'sentry/components/performanceDuration';\nimport SmartSearchBar, {SmartSearchBarProps} from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {FunctionCall, VersionedFunctionCalls} from 'sentry/types/profiling/core';\nimport {Container, NumberContainer} from 'sentry/utils/discover/styles';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ninterface FunctionsContentProps {\n  error: string | null;\n  isLoading: boolean;\n  version: string;\n  versionedFunctions: VersionedFunctionCalls | null;\n}\n\nfunction FunctionsContent(props: FunctionsContentProps) {\n  const location = useLocation();\n  const organization = useOrganization();\n  const query = useMemo(\n    () => decodeScalar(location.query.query, ''),\n    [location.query.query]\n  );\n\n  const functions: TableDataRow[] = useMemo(() => {\n    const functionCalls: FunctionCall[] =\n      props.versionedFunctions?.Versions[props.version]?.FunctionCalls ?? [];\n\n    return functionCalls.map(functionCall => {\n      return {\n        symbol: functionCall.symbol,\n        image: functionCall.image,\n        p50Duration: functionCall.duration_ns.p50,\n        p75Duration: functionCall.duration_ns.p75,\n        p90Duration: functionCall.duration_ns.p90,\n        p95Duration: functionCall.duration_ns.p95,\n        p99Duration: functionCall.duration_ns.p99,\n        mainThreadPercent: functionCall.main_thread_percent,\n        p50Frequency: functionCall.frequency.p50,\n        p75Frequency: functionCall.frequency.p75,\n        p90Frequency: functionCall.frequency.p90,\n        p95Frequency: functionCall.frequency.p95,\n        p99Frequency: functionCall.frequency.p99,\n      };\n    });\n  }, [props.version, props.versionedFunctions]);\n\n  const handleSearch: SmartSearchBarProps['onSearch'] = useCallback(\n    (searchQuery: string) => {\n      browserHistory.push({\n        ...location,\n        query: {\n          ...location.query,\n          cursor: undefined,\n          query: searchQuery || undefined,\n        },\n      });\n    },\n    [location]\n  );\n\n  return (\n    <Layout.Main fullWidth>\n      <ActionBar>\n        <PageFilterBar condensed>\n          <EnvironmentPageFilter />\n          <DatePageFilter alignDropdown=\"left\" />\n        </PageFilterBar>\n        <SmartSearchBar\n          organization={organization}\n          hasRecentSearches\n          searchSource=\"profile_landing\"\n          supportedTags={{}}\n          query={query}\n          onSearch={handleSearch}\n          maxQueryLength={MAX_QUERY_LENGTH}\n        />\n      </ActionBar>\n      <GridEditable\n        isLoading={props.isLoading}\n        error={props.error}\n        data={functions}\n        columnOrder={COLUMN_ORDER.map(key => COLUMNS[key])}\n        columnSortBy={[]}\n        grid={{renderBodyCell: renderProfilingTableCell}}\n        location={location}\n      />\n    </Layout.Main>\n  );\n}\n\nfunction renderProfilingTableCell(\n  column: TableColumn,\n  dataRow: TableDataRow,\n  rowIndex: number,\n  columnIndex: number\n) {\n  return (\n    <ProfilingFunctionsTableCell\n      column={column}\n      dataRow={dataRow}\n      rowIndex={rowIndex}\n      columnIndex={columnIndex}\n    />\n  );\n}\n\ninterface ProfilingFunctionsTableCellProps {\n  column: TableColumn;\n  columnIndex: number;\n  dataRow: TableDataRow;\n  rowIndex: number;\n}\n\nfunction ProfilingFunctionsTableCell({\n  column,\n  dataRow,\n}: ProfilingFunctionsTableCellProps) {\n  const value = dataRow[column.key];\n\n  switch (column.key) {\n    case 'p50Frequency':\n    case 'p75Frequency':\n    case 'p90Frequency':\n    case 'p95Frequency':\n    case 'p99Frequency':\n      return (\n        <NumberContainer>\n          <Count value={value} />\n        </NumberContainer>\n      );\n    case 'p50Duration':\n    case 'p75Duration':\n    case 'p90Duration':\n    case 'p95Duration':\n    case 'p99Duration':\n      return (\n        <NumberContainer>\n          <PerformanceDuration nanoseconds={value} abbreviation />\n        </NumberContainer>\n      );\n    default:\n      return <Container>{value}</Container>;\n  }\n}\n\ntype TableColumnKey =\n  | 'symbol'\n  | 'image'\n  | 'p50Duration'\n  | 'p75Duration'\n  | 'p90Duration'\n  | 'p95Duration'\n  | 'p99Duration'\n  | 'mainThreadPercent'\n  | 'p50Frequency'\n  | 'p75Frequency'\n  | 'p90Frequency'\n  | 'p95Frequency'\n  | 'p99Frequency';\n\ntype TableDataRow = Record<TableColumnKey, any>;\n\ntype TableColumn = GridColumnOrder<TableColumnKey>;\n\nconst COLUMN_ORDER: TableColumnKey[] = [\n  'symbol',\n  'image',\n  'p75Duration',\n  'p99Duration',\n  'mainThreadPercent',\n  'p75Frequency',\n  'p99Frequency',\n];\n\n// TODO: looks like these column names change depending on the platform?\nconst COLUMNS: Record<TableColumnKey, TableColumn> = {\n  symbol: {\n    key: 'symbol',\n    name: t('Symbol'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  image: {\n    key: 'image',\n    name: t('Binary'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p50Duration: {\n    key: 'p50Duration',\n    name: t('P50 Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p75Duration: {\n    key: 'p75Duration',\n    name: t('P75 Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p90Duration: {\n    key: 'p90Duration',\n    name: t('P90 Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p95Duration: {\n    key: 'p95Duration',\n    name: t('P95 Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p99Duration: {\n    key: 'p99Duration',\n    name: t('P99 Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  mainThreadPercent: {\n    key: 'mainThreadPercent',\n    name: t('Main Thread %'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p50Frequency: {\n    key: 'p50Frequency',\n    name: t('P50 Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p75Frequency: {\n    key: 'p75Frequency',\n    name: t('P75 Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p90Frequency: {\n    key: 'p90Frequency',\n    name: t('P90 Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p95Frequency: {\n    key: 'p95Frequency',\n    name: t('P95 Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p99Frequency: {\n    key: 'p99Frequency',\n    name: t('P99 Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n};\n\nconst ActionBar = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  grid-template-columns: min-content auto;\n  margin-bottom: ${space(2)};\n`;\n\nexport {FunctionsContent};\n","import {Fragment, useEffect, useMemo, useState} from 'react';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, Project, RequestState} from 'sentry/types';\nimport {VersionedFunctionCalls} from 'sentry/types/profiling/core';\nimport {defined} from 'sentry/utils';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {ProfilingHeader} from '../header';\n\nimport {FunctionsContent} from './content';\n\ninterface Props {\n  location: Location;\n  params: {\n    projectId?: Project['slug'];\n  };\n  selection?: PageFilters;\n}\n\nfunction FunctionsPage(props: Props) {\n  const api = useApi();\n  const organization = useOrganization();\n  const {projects} = useProjects();\n\n  const version = decodeScalar(props.location.query.version);\n  const transaction = decodeScalar(props.location.query.transaction);\n\n  const [requestState, setRequestState] = useState<RequestState<VersionedFunctionCalls>>({\n    type: 'initial',\n  });\n\n  const project = useMemo(\n    () => projects.find(p => p.slug === props.params.projectId),\n    [projects, props.params.projectId]\n  );\n\n  const badParams =\n    !defined(props.params.projectId) || !defined(transaction) || !defined(version);\n\n  useEffect(() => {\n    if (badParams) {\n      return undefined;\n    }\n\n    setRequestState({type: 'loading'});\n\n    fetchFunctions(api, organization, {\n      projectSlug: props.params.projectId!,\n      transaction,\n      version,\n    })\n      .then(functions => {\n        setRequestState({type: 'resolved', data: functions});\n      })\n      .catch(err => {\n        setRequestState({type: 'errored', error: t('Error: Unable to load functions')});\n        Sentry.captureException(err);\n      });\n\n    return () => api.clear();\n  }, [\n    api,\n    organization,\n    setRequestState,\n    props.params.projectId,\n    transaction,\n    version,\n    badParams,\n  ]);\n\n  return (\n    <SentryDocumentTitle\n      title={t('Profiling \\u2014 Functions')}\n      orgSlug={organization.slug}\n    >\n      <PageFiltersContainer\n        lockedMessageSubject={t('transaction')}\n        shouldForceProject={defined(project)}\n        forceProject={project}\n        specificProjectSlugs={defined(project) ? [project.slug] : []}\n        disableMultipleProjectSelection\n        showProjectSettingsLink\n        hideGlobalHeader\n      >\n        <NoProjectMessage organization={organization}>\n          {badParams && (\n            <Alert type=\"error\" showIcon>\n              {t('Missing required parameters.')}\n            </Alert>\n          )}\n          {project && !badParams && (\n            <Fragment>\n              <ProfilingHeader\n                page=\"functions\"\n                transaction={transaction}\n                version={version}\n                project={project}\n              />\n              <Layout.Body>\n                <FunctionsContent\n                  isLoading={requestState.type === 'loading'}\n                  error={requestState.type === 'errored' ? requestState.error : null}\n                  version={version}\n                  versionedFunctions={\n                    requestState.type === 'resolved' ? requestState.data : null\n                  }\n                />\n              </Layout.Body>\n            </Fragment>\n          )}\n        </NoProjectMessage>\n      </PageFiltersContainer>\n    </SentryDocumentTitle>\n  );\n}\n\nfunction fetchFunctions(\n  api: Client,\n  organization: Organization,\n  {\n    projectSlug,\n    transaction,\n    version,\n  }: {\n    projectSlug: Project['slug'];\n    transaction: string;\n    version: string;\n  }\n) {\n  return api.requestPromise(\n    `/projects/${organization.slug}/${projectSlug}/profiling/functions/`,\n    {\n      method: 'GET',\n      includeAllArgs: false,\n      query: {\n        query: `transaction_name:\"${transaction}\" version:\"${version}\"`,\n      },\n    }\n  );\n}\n\nexport default withPageFilters(FunctionsPage);\n","import {Location, LocationDescriptor, Path} from 'history';\n\nimport {Organization, Project} from 'sentry/types';\nimport {Trace} from 'sentry/types/profiling/core';\n\nexport function generateProfilingRoute({orgSlug}: {orgSlug: Organization['slug']}): Path {\n  return `/organizations/${orgSlug}/profiling/`;\n}\n\nexport function generateFunctionsRoute({\n  orgSlug,\n  projectSlug,\n}: {\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n}): Path {\n  return `/organizations/${orgSlug}/profiling/functions/${projectSlug}/`;\n}\n\nexport function generateFlamegraphRoute({\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): string {\n  return `/organizations/${orgSlug}/profiling/flamegraph/${projectSlug}/${profileId}/flamegraph/`;\n}\n\nexport function generateFlamegraphSummaryRoute({\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): string {\n  return `/organizations/${orgSlug}/profiling/flamegraph/${projectSlug}/${profileId}/summary/`;\n}\n\nexport function generateProfilingRouteWithQuery({\n  location,\n  orgSlug,\n}: {\n  location: Location;\n  orgSlug: Organization['slug'];\n}): LocationDescriptor {\n  const pathname = generateProfilingRoute({orgSlug});\n  return {\n    pathname,\n    query: {\n      ...location.query,\n    },\n  };\n}\n\nexport function generateFunctionsRouteWithQuery({\n  location,\n  orgSlug,\n  projectSlug,\n  transaction,\n  version,\n}: {\n  location: Location;\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n  transaction: string;\n  version: string;\n}): LocationDescriptor {\n  const pathname = generateFunctionsRoute({orgSlug, projectSlug});\n  return {\n    pathname,\n    query: {\n      ...location.query,\n      transaction,\n      version,\n    },\n  };\n}\n\nexport function generateFlamegraphRouteWithQuery({\n  location,\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  location: Location;\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): LocationDescriptor {\n  const pathname = generateFlamegraphRoute({orgSlug, projectSlug, profileId});\n  return {\n    pathname,\n    query: {\n      ...location.query,\n    },\n  };\n}\n\nexport function generateFlamegraphSummaryRouteWithQuery({\n  location,\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  location: Location;\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): LocationDescriptor {\n  const pathname = generateFlamegraphSummaryRoute({orgSlug, projectSlug, profileId});\n  return {\n    pathname,\n    query: {\n      ...location.query,\n    },\n  };\n}\n"],"names":["PerformanceDuration","props","normalizedSeconds","defined","nanoseconds","isNanoseconds","milliseconds","isMilliseconds","seconds","abbreviation","fixedDigits","Breadcrumb","location","organization","trails","crumbs","useMemo","map","trail","type","to","generateProfilingRouteWithQuery","orgSlug","slug","label","t","preservePageFilters","generateFunctionsRouteWithQuery","projectSlug","payload","transaction","version","generateFlamegraphRouteWithQuery","profileId","Error","JSON","stringify","trailToCrumb","StyledBreadcrumbs","Breadcrumbs","useLocation","useRouteContext","ProfilingHeader","useOrganization","project","Title","avatarSize","hideName","avatarProps","hasTooltip","tooltip","tct","space","FunctionsContent","query","decodeScalar","functions","versionedFunctions","Versions","FunctionCalls","functionCall","symbol","image","p50Duration","duration_ns","p50","p75Duration","p75","p90Duration","p90","p95Duration","p95","p99Duration","p99","mainThreadPercent","main_thread_percent","p50Frequency","frequency","p75Frequency","p90Frequency","p95Frequency","p99Frequency","handleSearch","useCallback","searchQuery","browserHistory","cursor","undefined","fullWidth","ActionBar","condensed","alignDropdown","hasRecentSearches","searchSource","supportedTags","onSearch","maxQueryLength","MAX_QUERY_LENGTH","isLoading","error","data","columnOrder","COLUMN_ORDER","key","COLUMNS","columnSortBy","grid","renderBodyCell","renderProfilingTableCell","column","dataRow","rowIndex","columnIndex","ProfilingFunctionsTableCell","value","name","width","COL_WIDTH_UNDEFINED","FunctionsPage","api","useApi","projects","useProjects","requestState","setRequestState","useState","find","p","params","projectId","badParams","useEffect","requestPromise","method","includeAllArgs","fetchFunctions","then","catch","err","Sentry","clear","title","lockedMessageSubject","shouldForceProject","forceProject","specificProjectSlugs","disableMultipleProjectSelection","showProjectSettingsLink","hideGlobalHeader","showIcon","Fragment","page","withPageFilters","generateFlamegraphRoute","generateFlamegraphSummaryRoute","pathname","generateProfilingRoute","generateFunctionsRoute","generateFlamegraphSummaryRouteWithQuery"],"sourceRoot":""}