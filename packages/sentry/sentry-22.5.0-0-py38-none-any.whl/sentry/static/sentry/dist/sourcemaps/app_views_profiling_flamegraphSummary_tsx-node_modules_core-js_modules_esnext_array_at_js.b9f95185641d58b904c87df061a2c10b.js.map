{"version":3,"file":"chunks/app_views_profiling_flamegraphSummary_tsx-node_modules_core-js_modules_esnext_array_at_js.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/profiling/units/units.ts","webpack:///./app/views/profiling/flamegraphSummary.tsx","webpack:///../node_modules/core-js/modules/es.array.at.js","webpack:///../node_modules/core-js/modules/esnext.array.at.js"],"sourcesContent":["export function relativeChange(final: number, initial: number): number {\n  return (final - initial) / initial;\n}\n\ntype Unit = 'nanoseconds' | 'microseconds' | 'milliseconds' | 'seconds';\n\nconst durationMappings: Record<Unit, number> = {\n  nanoseconds: 1e-9,\n  microseconds: 1e-6,\n  milliseconds: 1e-3,\n  seconds: 1,\n};\n\nconst format = (v: number, abbrev: string, precision: number) => {\n  return v.toFixed(precision) + abbrev;\n};\n\nexport function makeFormatter(from: Unit | string): (value: number) => string {\n  const multiplier = durationMappings[from];\n\n  if (multiplier === undefined) {\n    throw new Error(`Cannot format from unit ${from}, duration mapping is not defined`);\n  }\n\n  return (value: number) => {\n    const duration = value * multiplier;\n\n    if (duration >= 1) {\n      return format(duration, 's', 2);\n    }\n    if (duration / 1e-3 >= 1) {\n      return format(duration / 1e-3, 'ms', 2);\n    }\n    if (duration / 1e-6 >= 1) {\n      return format(duration / 1e-6, 'Î¼s', 2);\n    }\n    return format(duration / 1e-9, 'ns', 2);\n  };\n}\n","import {Fragment, useMemo} from 'react';\nimport {Link} from 'react-router';\n\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Container, NumberContainer} from 'sentry/utils/discover/styles';\nimport {getSlowestProfileCallsFromProfileGroup} from 'sentry/utils/profiling/profile/utils';\nimport {makeFormatter} from 'sentry/utils/profiling/units/units';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useParams} from 'sentry/utils/useParams';\n\nimport {useProfileGroup} from './profileGroupProvider';\nimport {generateFlamegraphRoute} from './routes';\n\nfunction FlamegraphSummary() {\n  const location = useLocation();\n  const [state] = useProfileGroup();\n  const organization = useOrganization();\n\n  const functions = useMemo(() => {\n    if (state.type === 'resolved') {\n      const {slowestApplicationCalls, slowestSystemCalls} =\n        getSlowestProfileCallsFromProfileGroup(state.data);\n\n      let allSlowestApplicationCalls: TableDataRow[] = [];\n      for (const threadID in slowestApplicationCalls) {\n        allSlowestApplicationCalls = allSlowestApplicationCalls.concat(\n          slowestApplicationCalls[threadID].map(call => {\n            return {\n              symbol: call.frame.name,\n              image: call.frame.image,\n              thread: threadID,\n              'self weight': call.selfWeight,\n              'total weight': call.totalWeight,\n            };\n          })\n        );\n      }\n\n      let allSlowestSystemCalls: TableDataRow[] = [];\n      for (const threadID in slowestSystemCalls) {\n        allSlowestSystemCalls = allSlowestSystemCalls.concat(\n          slowestSystemCalls[threadID].map(call => {\n            return {\n              symbol: call.frame.name,\n              image: call.frame.image,\n              thread: threadID,\n              'self weight': call.selfWeight,\n              'total weight': call.totalWeight,\n            };\n          })\n        );\n      }\n\n      return {\n        slowestApplicationCalls: allSlowestApplicationCalls\n          .sort((a, b) => b['self weight'] - a['self weight'])\n          .splice(0, 10),\n        slowestSystemCalls: allSlowestSystemCalls\n          .sort((a, b) => b['self weight'] - a['self weight'])\n          .splice(0, 10),\n      };\n    }\n    return {slowestApplicationCalls: [], slowestSystemCalls: []};\n  }, [state]);\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle\n        title={t('Profiling \\u2014 Function')}\n        orgSlug={organization.slug}\n      >\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <GridEditable\n              title={t('Slowest Application Calls')}\n              isLoading={state.type === 'loading'}\n              error={state.type === 'errored'}\n              data={functions.slowestApplicationCalls}\n              columnOrder={COLUMN_ORDER.map(key => COLUMNS[key])}\n              columnSortBy={[]}\n              grid={{renderBodyCell: renderFunctionCell}}\n              location={location}\n            />\n            <GridEditable\n              title={t('Slowest System Calls')}\n              isLoading={state.type === 'loading'}\n              error={state.type === 'errored'}\n              data={functions.slowestSystemCalls}\n              columnOrder={COLUMN_ORDER.map(key => COLUMNS[key])}\n              columnSortBy={[]}\n              grid={{renderBodyCell: renderFunctionCell}}\n              location={location}\n            />\n          </Layout.Main>\n        </Layout.Body>\n      </SentryDocumentTitle>\n    </Fragment>\n  );\n}\n\nfunction renderFunctionCell(\n  column: TableColumn,\n  dataRow: TableDataRow,\n  rowIndex: number,\n  columnIndex: number\n) {\n  return (\n    <ProfilingFunctionsTableCell\n      column={column}\n      dataRow={dataRow}\n      rowIndex={rowIndex}\n      columnIndex={columnIndex}\n    />\n  );\n}\n\ninterface ProfilingFunctionsTableCellProps {\n  column: TableColumn;\n  columnIndex: number;\n  dataRow: TableDataRow;\n  rowIndex: number;\n}\n\nconst formatter = makeFormatter('nanoseconds');\nfunction ProfilingFunctionsTableCell({\n  column,\n  dataRow,\n}: ProfilingFunctionsTableCellProps) {\n  const value = dataRow[column.key];\n  const {orgId, projectId, eventId} = useParams();\n\n  switch (column.key) {\n    case 'self weight':\n      return <NumberContainer>{formatter(value)}</NumberContainer>;\n    case 'total weight':\n      return <NumberContainer>{formatter(value)}</NumberContainer>;\n    case 'image':\n      return <Container>{value ?? 'Unknown'}</Container>;\n    case 'thread': {\n      return (\n        <Container>\n          <Link\n            to={\n              generateFlamegraphRoute({\n                orgSlug: orgId,\n                projectSlug: projectId,\n                profileId: eventId,\n              }) + `?tid=${dataRow.thread}`\n            }\n          >\n            {value}\n          </Link>\n        </Container>\n      );\n    }\n    default:\n      return <Container>{value}</Container>;\n  }\n}\n\ntype TableColumnKey = 'symbol' | 'image' | 'self weight' | 'total weight' | 'thread';\ntype TableDataRow = Record<TableColumnKey, any>;\n\ntype TableColumn = GridColumnOrder<TableColumnKey>;\n\nconst COLUMN_ORDER: TableColumnKey[] = [\n  'symbol',\n  'image',\n  'thread',\n  'self weight',\n  'total weight',\n];\n\n// TODO: looks like these column names change depending on the platform?\nconst COLUMNS: Record<TableColumnKey, TableColumn> = {\n  symbol: {\n    key: 'symbol',\n    name: t('Symbol'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  image: {\n    key: 'image',\n    name: t('Binary'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  thread: {\n    key: 'thread',\n    name: t('Thread'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  'self weight': {\n    key: 'self weight',\n    name: t('Self Weight'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  'total weight': {\n    key: 'total weight',\n    name: t('Total Weight'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n};\n\nexport default FlamegraphSummary;\n","'use strict';\nvar $ = require('../internals/export');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.at` method\n// https://github.com/tc39/proposal-relative-indexing-method\n$({ target: 'Array', proto: true }, {\n  at: function at(index) {\n    var O = toObject(this);\n    var len = lengthOfArrayLike(O);\n    var relativeIndex = toIntegerOrInfinity(index);\n    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;\n    return (k < 0 || k >= len) ? undefined : O[k];\n  }\n});\n\naddToUnscopables('at');\n","// TODO: Remove from `core-js@4`\nrequire('../modules/es.array.at');\n"],"names":["durationMappings","nanoseconds","microseconds","milliseconds","seconds","format","v","abbrev","precision","toFixed","makeFormatter","from","multiplier","undefined","Error","value","duration","FlamegraphSummary","location","useLocation","state","useProfileGroup","organization","useOrganization","functions","useMemo","type","slowestApplicationCalls","slowestSystemCalls","getSlowestProfileCallsFromProfileGroup","data","allSlowestApplicationCalls","threadID","concat","map","call","symbol","frame","name","image","thread","selfWeight","totalWeight","allSlowestSystemCalls","sort","a","b","splice","Fragment","title","t","orgSlug","slug","fullWidth","isLoading","error","columnOrder","COLUMN_ORDER","key","COLUMNS","columnSortBy","grid","renderBodyCell","renderFunctionCell","column","dataRow","rowIndex","columnIndex","ProfilingFunctionsTableCell","formatter","orgId","projectId","eventId","useParams","Link","to","generateFlamegraphRoute","projectSlug","profileId","width","COL_WIDTH_UNDEFINED","$","toObject","lengthOfArrayLike","toIntegerOrInfinity","addToUnscopables","target","proto","at","index","O","this","len","relativeIndex","k"],"sourceRoot":""}