{"version":3,"file":"chunks/app_views_alerts_builder_projectProvider_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"olBA0EA,QApDA,SAAqCA,GACnC,MAAMC,GAAMC,EAAAA,EAAAA,MACZC,EAAAA,EAAAA,GAAe,CAACC,SAAUJ,EAAMI,WAEhC,MAAM,SAACC,EAAD,OAAWC,EAAX,aAAmBC,KAAiBC,GAASR,EAC7CS,EAAYH,EAAOG,WAAaT,EAAMI,SAASM,MAAMC,QAErDC,EADmBL,EAAaM,SAASC,SAAS,yBACEC,IAAdN,GAGtC,SAACO,EAAD,gBAAWC,EAAX,SAA4BC,EAA5B,WAAsCC,IAAcC,EAAAA,EAAAA,GACxDR,OACIG,EACA,CACEM,MAAO,CAACZ,KAGVE,EAAUC,EACZI,EAASM,MAAKC,GAAKA,EAAEC,WACrBR,EAASM,MAAK,QAAC,KAACG,GAAF,SAAYA,IAAShB,KAWvC,OATAiB,EAAAA,EAAAA,YAAU,KACHf,IAKLgB,EAAAA,EAAAA,IAAgB1B,EAAKM,EAAakB,KAAM,CAACd,EAAQiB,OAChD,CAACjB,KAECM,GAAmBC,GACf,QAAC,IAAD,KAIJP,GAAWQ,GAEZ,QAAC,IAAD,CAAOU,KAAK,UAAZ,UAAuBC,EAAAA,EAAAA,GAAE,qDAItBzB,IAAY0B,EAAAA,EAAAA,gBAAe1B,IAC9B2B,EAAAA,EAAAA,cAAa3B,EAAU,IAClBG,KACAH,EAASL,MACZW,QAAAA,EACAF,UAAWG,EAAkBD,EAAQc,KAAOhB,EAC5CF,aAAAA,IAEFF","sources":["webpack:///./app/views/alerts/builder/projectProvider.tsx"],"sourcesContent":["import {cloneElement, isValidElement, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport Alert from 'sentry/components/alert';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport useProjects from 'sentry/utils/useProjects';\nimport useScrollToTop from 'sentry/utils/useScrollToTop';\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  organization: Organization;\n  children?: React.ReactNode;\n};\n\ntype RouteParams = {\n  projectId?: string;\n};\n\nfunction AlertBuilderProjectProvider(props: Props) {\n  const api = useApi();\n  useScrollToTop({location: props.location});\n\n  const {children, params, organization, ...other} = props;\n  const projectId = params.projectId || props.location.query.project;\n  const hasAlertWizardV3 = organization.features.includes('alert-wizard-v3');\n  const useFirstProject = hasAlertWizardV3 && projectId === undefined;\n\n  // calling useProjects() without args fetches all projects\n  const {projects, initiallyLoaded, fetching, fetchError} = useProjects(\n    useFirstProject\n      ? undefined\n      : {\n          slugs: [projectId],\n        }\n  );\n  const project = useFirstProject\n    ? projects.find(p => p.isMember)\n    : projects.find(({slug}) => slug === projectId);\n\n  useEffect(() => {\n    if (!project) {\n      return;\n    }\n\n    // fetch members list for mail action fields\n    fetchOrgMembers(api, organization.slug, [project.id]);\n  }, [project]);\n\n  if (!initiallyLoaded || fetching) {\n    return <LoadingIndicator />;\n  }\n\n  // if loaded, but project fetching states incomplete or project can't be found, project doesn't exist\n  if (!project || fetchError) {\n    return (\n      <Alert type=\"warning\">{t('The project you were looking for was not found.')}</Alert>\n    );\n  }\n\n  return children && isValidElement(children)\n    ? cloneElement(children, {\n        ...other,\n        ...children.props,\n        project,\n        projectId: useFirstProject ? project.slug : projectId,\n        organization,\n      })\n    : children;\n}\n\nexport default AlertBuilderProjectProvider;\n"],"names":["props","api","useApi","useScrollToTop","location","children","params","organization","other","projectId","query","project","useFirstProject","features","includes","undefined","projects","initiallyLoaded","fetching","fetchError","useProjects","slugs","find","p","isMember","slug","useEffect","fetchOrgMembers","id","type","t","isValidElement","cloneElement"],"sourceRoot":""}