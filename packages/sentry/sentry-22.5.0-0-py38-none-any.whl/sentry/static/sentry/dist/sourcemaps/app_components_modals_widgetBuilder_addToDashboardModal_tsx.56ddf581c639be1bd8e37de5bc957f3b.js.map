{"version":3,"file":"chunks/app_components_modals_widgetBuilder_addToDashboardModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/widgetBuilder/addToDashboardModal.tsx"],"sourcesContent":["import {Fragment, useEffect, useState} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {OptionProps} from 'react-select';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Query} from 'history';\n\nimport {\n  fetchDashboard,\n  fetchDashboards,\n  updateDashboard,\n} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport SelectOption from 'sentry/components/forms/selectOption';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DateString, Organization, PageFilters, SelectValue} from 'sentry/types';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  DashboardListItem,\n  DisplayType,\n  MAX_WIDGETS,\n  Widget,\n} from 'sentry/views/dashboardsV2/types';\nimport {NEW_DASHBOARD_ID} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport WidgetCard from 'sentry/views/dashboardsV2/widgetCard';\n\ntype WidgetAsQueryParams = Query & {\n  defaultTableColumns: string[];\n  defaultTitle: string;\n  defaultWidgetQuery: string;\n  displayType: DisplayType;\n  environment: string[];\n  project: number[];\n  source: string;\n  end?: DateString;\n  start?: DateString;\n  statsPeriod?: string | null;\n};\n\nexport type AddToDashboardModalProps = {\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widget: Widget;\n  widgetAsQueryParams: WidgetAsQueryParams;\n};\n\ntype Props = ModalRenderProps & AddToDashboardModalProps;\n\nconst SELECT_DASHBOARD_MESSAGE = t('Select a dashboard');\n\nfunction AddToDashboardModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  organization,\n  router,\n  selection,\n  widget,\n  widgetAsQueryParams,\n}: Props) {\n  const api = useApi();\n  const [dashboards, setDashboards] = useState<DashboardListItem[] | null>(null);\n  const [selectedDashboardId, setSelectedDashboardId] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchDashboards(api, organization.slug).then(setDashboards);\n  }, []);\n\n  function handleGoToBuilder() {\n    const pathname =\n      selectedDashboardId === NEW_DASHBOARD_ID\n        ? `/organizations/${organization.slug}/dashboards/new/widget/new/`\n        : `/organizations/${organization.slug}/dashboard/${selectedDashboardId}/widget/new/`;\n\n    router.push({\n      pathname,\n      query: widgetAsQueryParams,\n    });\n    closeModal();\n  }\n\n  async function handleAddAndStayInDiscover() {\n    if (selectedDashboardId === null || selectedDashboardId === NEW_DASHBOARD_ID) {\n      return;\n    }\n\n    try {\n      const dashboard = await fetchDashboard(api, organization.slug, selectedDashboardId);\n      const newDashboard = {\n        ...dashboard,\n        widgets: [\n          ...dashboard.widgets,\n          {...widget, title: widget.title === '' ? t('All Events') : widget.title},\n        ],\n      };\n\n      await updateDashboard(api, organization.slug, newDashboard);\n\n      closeModal();\n      addSuccessMessage(t('Successfully added widget to dashboard'));\n    } catch (e) {\n      const errorMessage = t('Unable to add widget to dashboard');\n      handleXhrErrorResponse(errorMessage)(e);\n      addErrorMessage(errorMessage);\n    }\n  }\n\n  const canSubmit = selectedDashboardId !== null;\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Add to Dashboard')}</h4>\n      </Header>\n\n      <Body>\n        <SelectControlWrapper>\n          <SelectControl\n            disabled={dashboards === null}\n            menuPlacement=\"auto\"\n            name=\"dashboard\"\n            placeholder={t('Select Dashboard')}\n            value={selectedDashboardId}\n            options={\n              dashboards && [\n                {label: t('+ Create New Dashboard'), value: 'new'},\n                ...dashboards.map(({title, id, widgetDisplay}) => ({\n                  label: title,\n                  value: id,\n                  isDisabled: widgetDisplay.length >= MAX_WIDGETS,\n                })),\n              ]\n            }\n            onChange={(option: SelectValue<string>) => {\n              if (option.disabled) {\n                return;\n              }\n              setSelectedDashboardId(option.value);\n            }}\n            components={{\n              Option: ({label, data, ...optionProps}: OptionProps<any>) => (\n                <Tooltip\n                  disabled={!!!data.isDisabled}\n                  title={tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n                    maxWidgets: MAX_WIDGETS,\n                  })}\n                  containerDisplayMode=\"block\"\n                  position=\"right\"\n                >\n                  <SelectOption label={label} data={data} {...(optionProps as any)} />\n                </Tooltip>\n              ),\n            }}\n          />\n        </SelectControlWrapper>\n        {t('This is a preview of how the widget will appear in your dashboard.')}\n        <WidgetCard\n          api={api}\n          organization={organization}\n          currentWidgetDragging={false}\n          isEditing={false}\n          isSorting={false}\n          widgetLimitReached={false}\n          selection={selection}\n          widget={widget}\n          showStoredAlert\n        />\n      </Body>\n\n      <Footer>\n        <StyledButtonBar gap={1.5}>\n          <Button\n            onClick={handleAddAndStayInDiscover}\n            disabled={!canSubmit || selectedDashboardId === NEW_DASHBOARD_ID}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Add + Stay in Discover')}\n          </Button>\n          <Button\n            priority=\"primary\"\n            onClick={handleGoToBuilder}\n            disabled={!canSubmit}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Open in Widget Builder')}\n          </Button>\n        </StyledButtonBar>\n      </Footer>\n    </Fragment>\n  );\n}\n\nexport default AddToDashboardModal;\n\nconst SelectControlWrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (max-width: ${props => props.theme.breakpoints[0]}) {\n    grid-template-rows: repeat(2, 1fr);\n    gap: ${space(1.5)};\n    width: 100%;\n\n    > button {\n      width: 100%;\n    }\n  }\n`;\n\nexport const modalCss = css`\n  max-width: 700px;\n  margin: 70px auto;\n`;\n"],"names":["SELECT_DASHBOARD_MESSAGE","t","AddToDashboardModal","Header","Body","Footer","closeModal","organization","router","selection","widget","widgetAsQueryParams","api","useApi","dashboards","setDashboards","useState","selectedDashboardId","setSelectedDashboardId","useEffect","fetchDashboards","slug","then","canSubmit","Fragment","closeButton","SelectControlWrapper","disabled","menuPlacement","name","placeholder","value","options","label","map","title","id","widgetDisplay","isDisabled","length","MAX_WIDGETS","onChange","option","components","Option","data","optionProps","tct","maxWidgets","containerDisplayMode","position","currentWidgetDragging","isEditing","isSorting","widgetLimitReached","showStoredAlert","StyledButtonBar","gap","onClick","async","NEW_DASHBOARD_ID","dashboard","fetchDashboard","newDashboard","widgets","updateDashboard","addSuccessMessage","e","errorMessage","handleXhrErrorResponse","addErrorMessage","undefined","priority","pathname","push","query","space","ButtonBar","props","theme","breakpoints","modalCss"],"sourceRoot":""}