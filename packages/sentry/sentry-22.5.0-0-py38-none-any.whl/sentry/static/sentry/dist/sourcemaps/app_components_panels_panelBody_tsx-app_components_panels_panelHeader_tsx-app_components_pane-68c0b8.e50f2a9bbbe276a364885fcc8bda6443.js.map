{"version":3,"file":"chunks/app_components_panels_panelBody_tsx-app_components_panels_panelHeader_tsx-app_components_pane-68c0b8.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/emptyStateWarning.tsx","webpack:///./app/components/panels/panel.tsx","webpack:///./app/components/panels/panelBody.tsx","webpack:///./app/components/panels/panelHeader.tsx","webpack:///./app/components/panels/panelItem.tsx","webpack:///./app/components/panels/panelTable.tsx","webpack:///./app/styles/text.tsx","webpack:///./app/views/settings/components/emptyMessage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {IconSearch} from 'sentry/icons';\nimport space from 'sentry/styles/space';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\ntype Props = {\n  children?: React.ReactNode;\n  className?: string;\n  small?: boolean;\n  withIcon?: boolean;\n};\n\nconst EmptyStateWarning = ({\n  small = false,\n  withIcon = true,\n  children,\n  className,\n}: Props) =>\n  small ? (\n    <EmptyMessage className={className}>\n      <SmallMessage>\n        {withIcon && <StyledIconSearch color=\"gray300\" size=\"lg\" />}\n        {children}\n      </SmallMessage>\n    </EmptyMessage>\n  ) : (\n    <EmptyStreamWrapper data-test-id=\"empty-state\" className={className}>\n      {withIcon && <IconSearch size=\"54px\" />}\n      {children}\n    </EmptyStreamWrapper>\n  );\n\nconst EmptyStreamWrapper = styled('div')`\n  text-align: center;\n  font-size: 22px;\n  padding: ${space(4)} ${space(2)};\n\n  p {\n    line-height: 1.2;\n    margin: 0 auto 20px;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  svg {\n    fill: ${p => p.theme.gray200};\n    margin-bottom: ${space(2)};\n  }\n`;\n\nconst SmallMessage = styled('div')`\n  display: flex;\n  align-items: center;\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  line-height: 1em;\n`;\n\nconst StyledIconSearch = styled(IconSearch)`\n  margin-right: ${space(1)};\n`;\n\nexport default EmptyStateWarning;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  dashedBorder?: boolean;\n  'data-test-id'?: string;\n};\n\nconst Panel = styled('div')<Props>`\n  background: ${p => (p.dashedBorder ? p.theme.backgroundSecondary : p.theme.background)};\n  border-radius: ${p => p.theme.borderRadius};\n  border: 1px\n    ${p => (p.dashedBorder ? 'dashed' + p.theme.gray300 : 'solid ' + p.theme.border)};\n  box-shadow: ${p => (p.dashedBorder ? 'none' : p.theme.dropShadowLight)};\n  margin-bottom: ${space(2)};\n  position: relative;\n`;\n\nexport default Panel;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport textStyles from 'sentry/styles/text';\n\ntype BaseProps = {\n  withPadding?: boolean;\n};\n\nconst PanelBody = styled('div')<BaseProps>`\n  ${p => p.withPadding && `padding: ${space(2)}`};\n  ${textStyles};\n`;\n\nexport default PanelBody;\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Do not add padding to left and right of the header\n   */\n  disablePadding?: boolean;\n  /**\n   * Usually we place controls at the right of a panel header, to make the\n   * spacing between the edges correct we will want less padding on the right.\n   * Use this when the panel has something such as buttons living there.\n   */\n  hasButtons?: boolean;\n  /**\n   * Use light text\n   */\n  lightText?: boolean;\n};\n\nconst getPadding = ({disablePadding, hasButtons}: Props) => css`\n  padding: ${hasButtons ? space(1) : space(2)} ${disablePadding ? 0 : space(2)};\n  padding-right: ${hasButtons ? space(1) : null};\n`;\n\nconst PanelHeader = styled('div')<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: ${p => (p.lightText ? p.theme.gray300 : p.theme.gray400)};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadius} ${p => p.theme.borderRadius} 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  position: relative;\n  ${getPadding};\n`;\n\nexport default PanelHeader;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * Align items vertical center (assuming flex-direction isn't changed).\n   */\n  center?: boolean;\n  /**\n   * Disables the default padding\n   */\n  noPadding?: boolean;\n};\n\nconst PanelItem = styled('div')<Props>`\n  display: flex;\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n  ${p => p.noPadding || `padding: ${space(2)}`};\n  ${p => p.center && 'align-items: center'};\n\n  &:last-child {\n    border: 0;\n  }\n`;\n\nexport default PanelItem;\n","import isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport Panel from './panel';\n\nexport type PanelTableProps = {\n  /**\n   * Headers of the table.\n   */\n  headers: React.ReactNode[];\n\n  /**\n   * The body of the table. Make sure the number of children elements are\n   * multiples of the length of headers.\n   */\n  children?: React.ReactNode | (() => React.ReactNode);\n\n  className?: string;\n\n  /**\n   * Renders without predefined padding on the header and body cells\n   */\n  disablePadding?: boolean;\n\n  /**\n   * Action to display when isEmpty is true\n   */\n  emptyAction?: React.ReactNode;\n  /**\n   * Message to use for `<EmptyStateWarning>`\n   */\n  emptyMessage?: React.ReactNode;\n\n  /**\n   * Displays an `<EmptyStateWarning>` if true\n   */\n  isEmpty?: boolean;\n\n  /**\n   * If this is true, then display a loading indicator\n   */\n  isLoading?: boolean;\n\n  /**\n   * A custom loading indicator.\n   */\n  loader?: React.ReactNode;\n\n  /**\n   * If true, scrolling headers out of view will pin to the top of container.\n   */\n  stickyHeaders?: boolean;\n};\n\n/**\n * Bare bones table generates a CSS grid template based on the content.\n *\n * The number of children elements should be a multiple of `this.props.columns` to have\n * it look ok.\n *\n *\n * Potential customizations:\n * - [ ] Add borders for columns to make them more like cells\n * - [ ] Add prop to disable borders for rows\n * - [ ] We may need to wrap `children` with our own component (similar to what we're doing\n *       with `headers`. Then we can get rid of that gross `> *` selector\n * - [ ] Allow customization of wrappers (Header and body cells if added)\n */\nconst PanelTable = ({\n  headers,\n  children,\n  isLoading,\n  isEmpty,\n  disablePadding,\n  className,\n  emptyMessage = t('There are no items to display'),\n  emptyAction,\n  loader,\n  stickyHeaders = false,\n  ...props\n}: PanelTableProps) => {\n  const shouldShowLoading = isLoading === true;\n  const shouldShowEmptyMessage = !shouldShowLoading && isEmpty;\n  const shouldShowContent = !shouldShowLoading && !shouldShowEmptyMessage;\n\n  return (\n    <Wrapper\n      columns={headers.length}\n      disablePadding={disablePadding}\n      className={className}\n      hasRows={shouldShowContent}\n      {...props}\n    >\n      {headers.map((header, i) => (\n        <PanelTableHeader key={i} sticky={stickyHeaders}>\n          {header}\n        </PanelTableHeader>\n      ))}\n\n      {shouldShowLoading && (\n        <LoadingWrapper>{loader || <LoadingIndicator />}</LoadingWrapper>\n      )}\n\n      {shouldShowEmptyMessage && (\n        <TableEmptyStateWarning>\n          <p>{emptyMessage}</p>\n          {emptyAction}\n        </TableEmptyStateWarning>\n      )}\n\n      {shouldShowContent && getContent(children)}\n    </Wrapper>\n  );\n};\n\nfunction getContent(children: PanelTableProps['children']) {\n  if (typeof children === 'function') {\n    return children();\n  }\n\n  return children;\n}\n\ntype WrapperProps = {\n  /**\n   * The number of columns the table will have, this is derived from the headers list\n   */\n  columns: number;\n  disablePadding: PanelTableProps['disablePadding'];\n  hasRows: boolean;\n};\n\nconst LoadingWrapper = styled('div')``;\n\nconst TableEmptyStateWarning = styled(EmptyStateWarning)``;\n\nconst Wrapper = styled(Panel, {\n  shouldForwardProp: p => typeof p === 'string' && isPropValid(p) && p !== 'columns',\n})<WrapperProps>`\n  display: grid;\n  grid-template-columns: repeat(${p => p.columns}, auto);\n\n  > * {\n    ${p => (p.disablePadding ? '' : `padding: ${space(2)};`)}\n\n    &:nth-last-child(n + ${p => (p.hasRows ? p.columns + 1 : 0)}) {\n      border-bottom: 1px solid ${p => p.theme.border};\n    }\n  }\n\n  > ${/* sc-selector */ TableEmptyStateWarning}, > ${/* sc-selector */ LoadingWrapper} {\n    border: none;\n    grid-column: auto / span ${p => p.columns};\n  }\n\n  /* safari needs an overflow value or the contents will spill out */\n  overflow: auto;\n`;\n\nexport const PanelTableHeader = styled('div')<{sticky: boolean}>`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 600;\n  text-transform: uppercase;\n  border-radius: ${p => p.theme.borderRadius} ${p => p.theme.borderRadius} 0 0;\n  background: ${p => p.theme.backgroundSecondary};\n  line-height: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-height: 45px;\n\n  ${p =>\n    p.sticky &&\n    `\n    position: sticky;\n    top: 0;\n    z-index: ${p.theme.zIndex.initial};\n  `}\n`;\n\nexport default PanelTable;\n","import {css} from '@emotion/react';\n\nconst textStyles = () => css`\n  /* stylelint-disable no-descending-specificity */\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  ul,\n  ol,\n  table,\n  dl,\n  blockquote,\n  form,\n  pre,\n  .auto-select-text,\n  .section,\n  [class^='highlight-'] {\n    margin-bottom: 20px;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n  /* stylelint-enable */\n`;\n\nexport default textStyles;\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ninterface Props extends Omit<React.HTMLAttributes<HTMLDivElement>, 'title'> {\n  action?: React.ReactElement;\n  description?: React.ReactNode;\n  icon?: React.ReactNode;\n  leftAligned?: boolean;\n  size?: 'large' | 'medium';\n  title?: React.ReactNode;\n}\n\ntype WrapperProps = Pick<Props, 'size'>;\n\nconst EmptyMessage = styled(\n  ({\n    title,\n    description,\n    icon,\n    children,\n    action,\n    leftAligned: _leftAligned,\n    ...props\n  }: Props) => (\n    <div data-test-id=\"empty-message\" {...props}>\n      {icon && <IconWrapper>{icon}</IconWrapper>}\n      {title && <Title noMargin={!description && !children && !action}>{title}</Title>}\n      {description && <Description>{description}</Description>}\n      {children && <Description noMargin>{children}</Description>}\n      {action && <Action>{action}</Action>}\n    </div>\n  )\n)<WrapperProps>`\n  display: flex;\n  ${p =>\n    p.leftAligned\n      ? css`\n          max-width: 70%;\n          align-items: flex-start;\n          padding: ${space(4)};\n        `\n      : css`\n          text-align: center;\n          align-items: center;\n          padding: ${space(4)} 15%;\n        `};\n  flex-direction: column;\n  color: ${p => p.theme.textColor};\n  font-size: ${p =>\n    p.size && p.size === 'large' ? p.theme.fontSizeExtraLarge : p.theme.fontSizeLarge};\n`;\n\nconst IconWrapper = styled('div')`\n  color: ${p => p.theme.gray200};\n  margin-bottom: ${space(1)};\n`;\n\nconst Title = styled('strong')<{noMargin: boolean}>`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  ${p => !p.noMargin && `margin-bottom: ${space(1)};`}\n`;\n\nconst Description = styled(TextBlock)`\n  margin: 0;\n`;\n\nconst Action = styled('div')`\n  margin-top: ${space(2)};\n`;\n\nexport default EmptyMessage;\n"],"names":["EmptyStreamWrapper","space","p","theme","gray200","SmallMessage","gray300","fontSizeExtraLarge","StyledIconSearch","IconSearch","small","withIcon","children","className","color","size","dashedBorder","backgroundSecondary","background","borderRadius","border","dropShadowLight","withPadding","textStyles","getPadding","disablePadding","hasButtons","css","lightText","gray400","fontSizeSmall","innerBorder","noPadding","center","PanelTable","headers","isLoading","isEmpty","emptyMessage","t","emptyAction","loader","stickyHeaders","props","shouldShowLoading","shouldShowEmptyMessage","shouldShowContent","Wrapper","columns","length","hasRows","map","header","i","PanelTableHeader","sticky","LoadingWrapper","TableEmptyStateWarning","getContent","EmptyStateWarning","Panel","shouldForwardProp","isPropValid","subText","zIndex","initial","EmptyMessage","title","description","icon","action","leftAligned","_leftAligned","IconWrapper","Title","noMargin","Description","Action","textColor","fontSizeLarge","TextBlock"],"sourceRoot":""}