{"version":3,"file":"chunks/app_components_forms_controls_radioGroup_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"gsBAaA,MAAMA,GAAY,OAAO,MAAP,qBAAH,qBAENC,IAAKC,EAAAA,EAAAA,GAAMD,EAAEE,aAAe,EAAI,IAF1B,oBAGKF,GAAMA,EAAEE,aAAe,SAAW,OAHvC,8DA+BTC,EAAa,QAAmB,MACpCC,EACAC,SAAUC,EAF0B,gBAGpCC,EAAkB,GAHkB,QAIpCC,EAAU,GAJ0B,MAKpCC,EALoC,SAMpCC,EANoC,aAOpCR,KACGS,GARc,SAUjB,QAACZ,EAAD,CACEG,aAAcA,KACVS,EACJC,KAAK,aACL,kBAAiBH,EAJnB,SAMGD,EAAQK,KAAI,CAAC,EAAyBC,KAAU,IAAlCC,EAAIC,EAAMC,GAAwB,EAC/C,MAAMC,EAAiBX,EAAgBY,MAAK,QAAEC,GAAF,SAAgBA,IAAaL,KACnEM,EAAuBH,MAAAA,OAAH,EAAGA,EAAiB,GACxCb,IAAaa,GAAkBZ,EAC/BgB,GACJ,QAAC,EAAAC,SAAD,WACE,QAACC,EAAD,CACEZ,KAAK,QACLE,MAAOA,EACP,eAAcV,IAAUW,EACxBV,SAAUA,EAJZ,WAME,QAAC,IAAD,CACE,cAAYoB,EAAAA,EAAAA,GAAE,YAAaT,GAC3BX,SAAUA,EACVqB,QAAStB,IAAUW,EACnBL,SAAWiB,IACRtB,GAAYK,EAASK,EAAIY,MAG9B,QAACC,EAAD,CAAevB,SAAUA,EAAzB,SAAoCW,IACnCC,IACC,QAAC,EAAAM,SAAD,YAEE,mBACA,QAACM,EAAD,UAAcZ,YAOxB,OAAMI,GAEF,QAAC,KAAD,CAAqBS,MAAOT,EAA5B,SACGC,GADWR,IAMX,QAAC,EAAAS,SAAD,UAAuBD,GAARR,SAxDtBX,EAAAA,YAAAA,aA6DN,MAAM4B,EAAqB/B,GACZ,iBAANA,IAAmB,CAAC,WAAY,WAAWgC,SAAShC,KAAMiC,EAAAA,EAAAA,GAAYjC,GAElEwB,GAAgB,OAAO,QAAP,CAAiBO,kBAAAA,EAAjB,oBAAH,mGAQd/B,GAAMA,EAAEK,SAAW,UAAY,WARjB,8CAcpBuB,GAAgB,OAAO,MAAP,CAAeG,kBAAAA,EAAf,oBAAH,YACN/B,GAAMA,EAAEK,SAAW,GAAM,MADnB,KAIbwB,GAAc,OAAO,MAAP,qBAAH,UACN7B,GAAKA,EAAEkC,MAAMC,SADP,eAEFnC,GAAKA,EAAEkC,MAAME,uBAFX,uBAMjB,K,2PCzHA,MAUMC,GAAQ,OAAO,QAAP,qBAAH,iCAGArC,GAAsB,UAAhBA,EAAEsC,UAAwB,OAAS,UAHzC,YAICtC,GAAsB,UAAhBA,EAAEsC,UAAwB,OAAS,UAJ1C,oGASWtC,GAAKA,EAAEkC,MAAMK,QATxB,sBAUWvC,GAAKA,EAAEkC,MAAMM,iBAVxB,iJAqBSxC,GAAKA,EAAEkC,MAAMO,aArBtB,gBAsBOzC,GAAKA,EAAEkC,MAAMO,aAtBpB,2CA2BLzC,GArCa,EAACA,EAAiBkC,KAAiBQ,EAAAA,EAAAA,IAAlC,uBAEO,UAAhB1C,EAAEsC,UAAwB,SAAW,WAF7B,WAGS,UAAhBtC,EAAEsC,UAAwB,SAAW,WAH9B,uCAKGJ,EAAMS,OALT,mBAMCC,EAAAA,GAND,iBAON5C,EAAEK,SAAW,GAAM,KAPb,QAqCRwC,CAAW7C,EAAGA,EAAEkC,QA3BhB,MA+BXG,EAAMS,aAAe,CACnBC,KAAM,SAGR","sources":["webpack:///./app/components/forms/controls/radioGroup.tsx","webpack:///./app/components/radio.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport Radio from 'sentry/components/radio';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ninterface ContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  orientInline?: boolean;\n}\n\nconst Container = styled('div')<ContainerProps>`\n  display: grid;\n  gap: ${p => space(p.orientInline ? 3 : 1)};\n  grid-auto-flow: ${p => (p.orientInline ? 'column' : 'row')};\n  grid-auto-rows: max-content;\n  grid-auto-columns: max-content;\n`;\n\ninterface BaseRadioGroupProps<C extends string> {\n  /**\n   * An array of [id, name, description]\n   */\n  choices: [C, React.ReactNode, React.ReactNode?][];\n  label: string;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n  value: string | number | null;\n  disabled?: boolean;\n  /**\n   * An array of [choice id, disabled reason]\n   */\n  disabledChoices?: [C, React.ReactNode?][];\n  /**\n   * Switch the radio items to flow left to right, instead of vertically.\n   */\n  orientInline?: boolean;\n}\n\nexport interface RadioGroupProps<C extends string>\n  extends BaseRadioGroupProps<C>,\n    Omit<ContainerProps, 'onChange'> {}\n\nconst RadioGroup = <C extends string>({\n  value,\n  disabled: groupDisabled,\n  disabledChoices = [],\n  choices = [],\n  label,\n  onChange,\n  orientInline,\n  ...props\n}: RadioGroupProps<C>) => (\n  <Container\n    orientInline={orientInline}\n    {...props}\n    role=\"radiogroup\"\n    aria-labelledby={label}\n  >\n    {choices.map(([id, name, description], index) => {\n      const disabledChoice = disabledChoices.find(([choiceId]) => choiceId === id);\n      const disabledChoiceReason = disabledChoice?.[1];\n      const disabled = !!disabledChoice || groupDisabled;\n      const content = (\n        <Fragment>\n          <RadioLineItem\n            role=\"radio\"\n            index={index}\n            aria-checked={value === id}\n            disabled={disabled}\n          >\n            <Radio\n              aria-label={t('Select %s', name)}\n              disabled={disabled}\n              checked={value === id}\n              onChange={(e: React.FormEvent<HTMLInputElement>) =>\n                !disabled && onChange(id, e)\n              }\n            />\n            <RadioLineText disabled={disabled}>{name}</RadioLineText>\n            {description && (\n              <Fragment>\n                {/* If there is a description then we want to have a 2x2 grid so the first column width aligns with Radio Button */}\n                <div />\n                <Description>{description}</Description>\n              </Fragment>\n            )}\n          </RadioLineItem>\n        </Fragment>\n      );\n\n      if (!!disabledChoiceReason) {\n        return (\n          <Tooltip key={index} title={disabledChoiceReason}>\n            {content}\n          </Tooltip>\n        );\n      }\n\n      return <Fragment key={index}>{content}</Fragment>;\n    })}\n  </Container>\n);\n\nconst shouldForwardProp = (p: PropertyKey) =>\n  typeof p === 'string' && !['disabled', 'animate'].includes(p) && isPropValid(p);\n\nexport const RadioLineItem = styled('label', {shouldForwardProp})<{\n  index: number;\n  disabled?: boolean;\n}>`\n  display: grid;\n  gap: 0.25em 0.5em;\n  grid-template-columns: max-content auto;\n  align-items: center;\n  cursor: ${p => (p.disabled ? 'default' : 'pointer')};\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n`;\n\nconst RadioLineText = styled('div', {shouldForwardProp})<{disabled?: boolean}>`\n  opacity: ${p => (p.disabled ? 0.4 : null)};\n`;\n\nconst Description = styled('div')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  line-height: 1.4em;\n`;\n\nexport default RadioGroup;\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {growIn} from 'sentry/styles/animations';\nimport {Theme} from 'sentry/utils/theme';\n\ninterface CheckedProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  disabled?: boolean;\n  radioSize?: 'small';\n}\n\nconst checkedCss = (p: CheckedProps, theme: Theme) => css`\n  display: block;\n  width: ${p.radioSize === 'small' ? '0.5rem' : '0.875rem'};\n  height: ${p.radioSize === 'small' ? '0.5rem' : '0.875rem'};\n  border-radius: 50%;\n  background-color: ${theme.active};\n  animation: 0.2s ${growIn} ease;\n  opacity: ${p.disabled ? 0.4 : null};\n`;\n\nconst Radio = styled('input')<CheckedProps>`\n  display: flex;\n  padding: 0;\n  width: ${p => (p.radioSize === 'small' ? '1rem' : '1.5rem')};\n  height: ${p => (p.radioSize === 'small' ? '1rem' : '1.5rem')};\n  position: relative;\n  border-radius: 50%;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid ${p => p.theme.border};\n  box-shadow: inset ${p => p.theme.dropShadowLight};\n  background: none;\n  appearance: none;\n  transition: border 0.1s, box-shadow 0.1s;\n\n  /* TODO(bootstrap): Our bootstrap CSS adds this, we can remove when we remove that */\n  margin: 0 !important;\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    border-color: ${p => p.theme.focusBorder};\n    box-shadow: ${p => p.theme.focusBorder} 0 0 0 1px;\n  }\n\n  &:checked:after {\n    content: '';\n    ${p => checkedCss(p, p.theme)}\n  }\n`;\n\nRadio.defaultProps = {\n  type: 'radio',\n};\n\nexport default Radio;\n"],"names":["Container","p","space","orientInline","RadioGroup","value","disabled","groupDisabled","disabledChoices","choices","label","onChange","props","role","map","index","id","name","description","disabledChoice","find","choiceId","disabledChoiceReason","content","Fragment","RadioLineItem","t","checked","e","RadioLineText","Description","title","shouldForwardProp","includes","isPropValid","theme","gray300","fontSizeRelativeSmall","Radio","radioSize","border","dropShadowLight","focusBorder","css","active","growIn","checkedCss","defaultProps","type"],"sourceRoot":""}