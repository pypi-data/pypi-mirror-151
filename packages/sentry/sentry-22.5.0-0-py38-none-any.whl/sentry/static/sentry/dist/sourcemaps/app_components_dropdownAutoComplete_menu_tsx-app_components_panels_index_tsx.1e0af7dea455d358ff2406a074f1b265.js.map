{"version":3,"file":"chunks/app_components_dropdownAutoComplete_menu_tsx-app_components_panels_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/dropdownAutoComplete/menu.tsx"],"sourcesContent":["import {useCallback} from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\n\nimport AutoComplete from 'sentry/components/autoComplete';\nimport DropdownBubble from 'sentry/components/dropdownBubble';\nimport Input from 'sentry/components/forms/controls/input';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport autoCompleteFilter from './autoCompleteFilter';\nimport List from './list';\nimport {Item, ItemsBeforeFilter} from './types';\n\ntype AutoCompleteChildrenArgs = Parameters<AutoComplete<Item>['props']['children']>[0];\ntype Actions = AutoCompleteChildrenArgs['actions'];\n\nexport type MenuFooterChildProps = {\n  actions: Actions;\n};\n\ntype ListProps = React.ComponentProps<typeof List>;\n\ntype Props = {\n  children: (\n    args: Pick<\n      AutoCompleteChildrenArgs,\n      'getInputProps' | 'getActorProps' | 'actions' | 'isOpen' | 'selectedItem'\n    >\n  ) => React.ReactNode;\n  /** null items indicates loading */\n  items: ItemsBeforeFilter | null;\n\n  /**\n   * Dropdown menu alignment.\n   */\n  alignMenu?: 'left' | 'right';\n  /**\n   * Should menu visually lock to a direction (so we don't display a rounded corner)\n   */\n  blendCorner?: boolean;\n\n  /**\n   * Show loading indicator next to input and \"Searching...\" text in the list\n   */\n  busy?: boolean;\n\n  /**\n   * Show loading indicator next to input but don't hide list items\n   */\n  busyItemsStillVisible?: boolean;\n\n  /**\n   * for passing  styles to the DropdownBubble\n   */\n  className?: string;\n\n  /**\n   * AutoComplete prop\n   */\n  closeOnSelect?: boolean;\n\n  css?: any;\n\n  'data-test-id'?: string;\n\n  /**\n   * If true, the menu will be visually detached from actor.\n   */\n  detached?: boolean;\n\n  /**\n   * Disables padding for the label.\n   */\n  disableLabelPadding?: boolean;\n\n  /**\n   * passed down to the AutoComplete Component\n   */\n  disabled?: boolean;\n\n  /**\n   * Hide's the input when there are no items. Avoid using this when querying\n   * results in an async fashion.\n   */\n  emptyHidesInput?: boolean;\n\n  /**\n   * Message to display when there are no items initially\n   */\n  emptyMessage?: React.ReactNode;\n\n  /**\n   * If this is undefined, autocomplete filter will use this value instead of the\n   * current value in the filter input element.\n   *\n   * This is useful if you need to strip characters out of the search\n   */\n  filterValue?: string;\n\n  /**\n   * Hides the default filter input\n   */\n  hideInput?: boolean;\n\n  /**\n   * renderProp for the end (right side) of the search input\n   */\n  inputActions?: React.ReactElement;\n\n  /**\n   * Props to pass to input/filter component\n   */\n  inputProps?: {style: React.CSSProperties};\n\n  /**\n   * Used to control dropdown state (optional)\n   */\n  isOpen?: boolean;\n\n  /**\n   * Max height of dropdown menu. Units are assumed as `px`\n   */\n  maxHeight?: ListProps['maxHeight'];\n\n  menuFooter?:\n    | React.ReactElement\n    | ((props: MenuFooterChildProps) => React.ReactElement | null);\n\n  menuHeader?: React.ReactElement;\n\n  /**\n   * Props to pass to menu component\n   */\n  menuProps?: Parameters<AutoCompleteChildrenArgs['getMenuProps']>[0];\n\n  /**\n   * Minimum menu width, defaults to 250\n   */\n  minWidth?: number;\n\n  /**\n   * Message to display when there are no items that match the search\n   */\n  noResultsMessage?: React.ReactNode;\n\n  /**\n   * When AutoComplete input changes\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n\n  /**\n   * Callback for when dropdown menu closes\n   */\n  onClose?: () => void;\n\n  /**\n   * Callback for when dropdown menu opens\n   */\n  onOpen?: (event?: React.MouseEvent) => void;\n\n  /**\n   * When an item is selected (via clicking dropdown, or keyboard navigation)\n   */\n  onSelect?: (\n    item: Item,\n    state?: AutoComplete<Item>['state'],\n    e?: React.MouseEvent | React.KeyboardEvent\n  ) => void;\n  /**\n   * for passing simple styles to the root container\n   */\n  rootClassName?: string;\n\n  /**\n   * Search input's placeholder text\n   */\n  searchPlaceholder?: string;\n  /**\n   * the styles are forward to the Autocomplete's getMenuProps func\n   */\n  style?: React.CSSProperties;\n  /**\n   * Optional element to be rendered on the right side of the dropdown menu\n   */\n  subPanel?: React.ReactNode;\n} & Pick<\n  ListProps,\n  'virtualizedHeight' | 'virtualizedLabelHeight' | 'itemSize' | 'onScroll'\n>;\n\nfunction Menu({\n  maxHeight = 300,\n  emptyMessage = t('No items'),\n  searchPlaceholder = t('Filter search'),\n  blendCorner = true,\n  detached = false,\n  alignMenu = 'left',\n  minWidth = 250,\n  hideInput = false,\n  disableLabelPadding = false,\n  busy = false,\n  busyItemsStillVisible = false,\n  disabled = false,\n  subPanel = null,\n  itemSize,\n  virtualizedHeight,\n  virtualizedLabelHeight,\n  menuProps,\n  noResultsMessage,\n  inputProps,\n  children,\n  rootClassName,\n  className,\n  emptyHidesInput,\n  menuHeader,\n  filterValue,\n  items,\n  menuFooter,\n  style,\n  onScroll,\n  inputActions,\n  onChange,\n  onSelect,\n  onOpen,\n  onClose,\n  css,\n  closeOnSelect,\n  'data-test-id': dataTestId,\n  ...props\n}: Props) {\n  // Can't search if there are no items\n  const hasItems = !!items?.length;\n\n  // Items are loading if null\n  const itemsLoading = items === null;\n\n  // Hide the input when we have no items to filter, only if\n  // emptyHidesInput is set to true.\n  const showInput = !hideInput && (hasItems || !emptyHidesInput);\n\n  // Only redefine the autocomplete function if our items list has chagned.\n  // This avoids producing a new array on every call.\n  const stableItemFilter = useCallback(\n    (filterValueOrInput: string) => autoCompleteFilter(items, filterValueOrInput),\n    [items]\n  );\n\n  // Memoize the filterValueOrInput to the stableItemFilter so that we get the\n  // same list every time when the filter value doesn't change.\n  const getFilteredItems = memoize(stableItemFilter);\n\n  return (\n    <AutoComplete\n      onSelect={onSelect}\n      inputIsActor={false}\n      onOpen={onOpen}\n      onClose={onClose}\n      disabled={disabled}\n      closeOnSelect={closeOnSelect}\n      resetInputOnClose\n      {...props}\n    >\n      {({\n        getActorProps,\n        getRootProps,\n        getInputProps,\n        getMenuProps,\n        getItemProps,\n        registerItemCount,\n        registerVisibleItem,\n        inputValue,\n        selectedItem,\n        highlightedIndex,\n        isOpen,\n        actions,\n      }) => {\n        // This is the value to use to filter (default to value in filter input)\n        const filterValueOrInput = filterValue ?? inputValue;\n\n        // Only filter results if menu is open and there are items. Uses\n        // `getFilteredItems` to ensure we get a stable items list back.\n        const autoCompleteResults =\n          isOpen && hasItems ? getFilteredItems(filterValueOrInput) : [];\n\n        // Has filtered results\n        const hasResults = !!autoCompleteResults.length;\n\n        // No items to display\n        const showNoItems = !busy && !filterValueOrInput && !hasItems;\n\n        // Results mean there was an attempt to search\n        const showNoResultsMessage =\n          !busy && !busyItemsStillVisible && filterValueOrInput && !hasResults;\n\n        // When virtualization is turned on, we need to pass in the number of\n        // selecteable items for arrow-key limits\n        const itemCount = virtualizedHeight\n          ? autoCompleteResults.filter(i => !i.groupLabel).length\n          : undefined;\n\n        const renderedFooter =\n          typeof menuFooter === 'function' ? menuFooter({actions}) : menuFooter;\n\n        // XXX(epurkhiser): Would be better if this happened in a useEffect,\n        // but hooks do not work inside render-prop callbacks.\n        registerItemCount(itemCount);\n\n        return (\n          <AutoCompleteRoot\n            {...getRootProps()}\n            className={rootClassName}\n            disabled={disabled}\n            data-is-open={isOpen}\n            data-test-id={dataTestId}\n          >\n            {children({\n              getInputProps,\n              getActorProps,\n              actions,\n              isOpen,\n              selectedItem,\n            })}\n            {isOpen && (\n              <StyledDropdownBubble\n                className={className}\n                {...getMenuProps(menuProps)}\n                {...{style, css, blendCorner, detached, alignMenu, minWidth}}\n              >\n                <DropdownMainContent minWidth={minWidth}>\n                  {itemsLoading && <LoadingIndicator mini />}\n                  {showInput && (\n                    <InputWrapper>\n                      <StyledInput\n                        autoFocus\n                        placeholder={searchPlaceholder}\n                        {...getInputProps({...inputProps, onChange})}\n                      />\n                      <InputLoadingWrapper>\n                        {(busy || busyItemsStillVisible) && (\n                          <LoadingIndicator size={16} mini />\n                        )}\n                      </InputLoadingWrapper>\n                      {inputActions}\n                    </InputWrapper>\n                  )}\n                  <div>\n                    {menuHeader && (\n                      <LabelWithPadding disableLabelPadding={disableLabelPadding}>\n                        {menuHeader}\n                      </LabelWithPadding>\n                    )}\n                    <ItemList data-test-id=\"autocomplete-list\" maxHeight={maxHeight}>\n                      {showNoItems && <EmptyMessage>{emptyMessage}</EmptyMessage>}\n                      {showNoResultsMessage && (\n                        <EmptyMessage>\n                          {noResultsMessage ?? `${emptyMessage} ${t('found')}`}\n                        </EmptyMessage>\n                      )}\n                      {busy && (\n                        <BusyMessage>\n                          <EmptyMessage>{t('Searching\\u2026')}</EmptyMessage>\n                        </BusyMessage>\n                      )}\n                      {!busy && (\n                        <List\n                          items={autoCompleteResults}\n                          {...{\n                            maxHeight,\n                            highlightedIndex,\n                            inputValue,\n                            onScroll,\n                            getItemProps,\n                            registerVisibleItem,\n                            virtualizedLabelHeight,\n                            virtualizedHeight,\n                            itemSize,\n                          }}\n                        />\n                      )}\n                    </ItemList>\n                    {renderedFooter && (\n                      <LabelWithPadding disableLabelPadding={disableLabelPadding}>\n                        {renderedFooter}\n                      </LabelWithPadding>\n                    )}\n                  </div>\n                </DropdownMainContent>\n                {subPanel}\n              </StyledDropdownBubble>\n            )}\n          </AutoCompleteRoot>\n        );\n      }}\n    </AutoComplete>\n  );\n}\n\nexport default Menu;\n\nconst StyledInput = styled(Input)`\n  flex: 1;\n  border: 1px solid transparent;\n  &,\n  &:focus,\n  &:active,\n  &:hover {\n    border: 0;\n    box-shadow: none;\n    font-size: 13px;\n    padding: ${space(1)};\n    font-weight: normal;\n    color: ${p => p.theme.gray300};\n  }\n`;\n\nconst InputLoadingWrapper = styled('div')`\n  display: flex;\n  background: ${p => p.theme.background};\n  align-items: center;\n  flex-shrink: 0;\n  width: 30px;\n  .loading.mini {\n    height: 16px;\n    margin: 0;\n  }\n`;\n\nconst EmptyMessage = styled('div')`\n  color: ${p => p.theme.gray200};\n  padding: ${space(2)};\n  text-align: center;\n  text-transform: none;\n`;\n\nexport const AutoCompleteRoot = styled('div')<{disabled?: boolean}>`\n  position: relative;\n  display: inline-block;\n  ${p => p.disabled && 'pointer-events: none;'}\n`;\n\nconst StyledDropdownBubble = styled(DropdownBubble)<{minWidth: number}>`\n  display: flex;\n  min-width: ${p => p.minWidth}px;\n\n  ${p => p.detached && p.alignMenu === 'left' && 'right: auto;'}\n  ${p => p.detached && p.alignMenu === 'right' && 'left: auto;'}\n`;\n\nconst DropdownMainContent = styled('div')<{minWidth: number}>`\n  width: 100%;\n  min-width: ${p => p.minWidth}px;\n`;\n\nconst InputWrapper = styled('div')`\n  display: flex;\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n  border-radius: ${p => `${p.theme.borderRadius} ${p.theme.borderRadius} 0 0`};\n  align-items: center;\n`;\n\nconst LabelWithPadding = styled('div')<{disableLabelPadding: boolean}>`\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n  border-width: 1px 0;\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  &:first-child {\n    border-top: none;\n  }\n  &:last-child {\n    border-bottom: none;\n  }\n  padding: ${p => !p.disableLabelPadding && `${space(0.25)} ${space(1)}`};\n`;\n\nconst ItemList = styled('div')<{maxHeight: NonNullable<Props['maxHeight']>}>`\n  max-height: ${p => `${p.maxHeight}px`};\n  overflow-y: auto;\n`;\n\nconst BusyMessage = styled('div')`\n  display: flex;\n  justify-content: center;\n  padding: ${space(1)};\n`;\n"],"names":["Menu","maxHeight","emptyMessage","t","searchPlaceholder","blendCorner","detached","alignMenu","minWidth","hideInput","disableLabelPadding","busy","busyItemsStillVisible","disabled","subPanel","itemSize","virtualizedHeight","virtualizedLabelHeight","menuProps","noResultsMessage","inputProps","children","rootClassName","className","emptyHidesInput","menuHeader","filterValue","items","menuFooter","style","onScroll","inputActions","onChange","onSelect","onOpen","onClose","css","closeOnSelect","dataTestId","props","hasItems","length","itemsLoading","showInput","stableItemFilter","useCallback","filterValueOrInput","autoCompleteFilter","getFilteredItems","memoize","inputIsActor","resetInputOnClose","getActorProps","getRootProps","getInputProps","getMenuProps","getItemProps","registerItemCount","registerVisibleItem","inputValue","selectedItem","highlightedIndex","isOpen","actions","autoCompleteResults","hasResults","showNoItems","showNoResultsMessage","itemCount","filter","i","groupLabel","undefined","renderedFooter","AutoCompleteRoot","StyledDropdownBubble","DropdownMainContent","mini","InputWrapper","StyledInput","autoFocus","placeholder","InputLoadingWrapper","size","LabelWithPadding","ItemList","EmptyMessage","BusyMessage","Input","space","p","theme","gray300","background","gray200","DropdownBubble","innerBorder","borderRadius","backgroundSecondary","subText","fontSizeMedium"],"sourceRoot":""}