{"version":3,"file":"chunks/app_views_alerts_list_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/onboardingPanel.tsx","webpack:///./app/views/alerts/list/onboarding.tsx","webpack:///./app/views/alerts/list/index.tsx","webpack:///./app/views/alerts/list/row.tsx","webpack:///./app/views/alerts/rules/details/constants.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  children: React.ReactNode;\n  image: React.ReactNode;\n  className?: string;\n};\n\nfunction OnboardingPanel({className, image, children}: Props) {\n  return (\n    <Panel className={className}>\n      <Container>\n        <IlloBox>{image}</IlloBox>\n        <StyledBox>{children}</StyledBox>\n      </Container>\n    </Panel>\n  );\n}\n\nconst Container = styled('div')`\n  padding: ${space(3)};\n  position: relative;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    justify-content: center;\n    flex-wrap: wrap;\n    min-height: 300px;\n    max-width: 1000px;\n    margin: 0 auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    min-height: 350px;\n  }\n`;\n\nconst StyledBox = styled('div')`\n  z-index: 1;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 2;\n  }\n`;\n\nconst IlloBox = styled(StyledBox)`\n  position: relative;\n  min-height: 100px;\n  max-width: 300px;\n  margin: ${space(2)} auto;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    flex: 1;\n    margin: ${space(3)};\n    max-width: auto;\n  }\n`;\n\nexport default OnboardingPanel;\n","import styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/alerts-empty-state.svg';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  actions: React.ReactNode;\n};\n\nfunction Onboarding({actions}: Props) {\n  return (\n    <OnboardingPanel image={<AlertsImage src={emptyStateImg} />}>\n      <h3>{t('More signal, less noise')}</h3>\n      <p>\n        {t(\n          'Not every error is worth an email. Set your own rules for alerts you need, with information that helps.'\n        )}\n      </p>\n      <ButtonList gap={1}>{actions}</ButtonList>\n    </OnboardingPanel>\n  );\n}\n\nconst AlertsImage = styled('img')`\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    user-select: none;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 220px;\n    margin-top: auto;\n    margin-bottom: auto;\n    transform: translateX(-50%);\n    left: 50%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    transform: translateX(-60%);\n    width: 280px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[3]}) {\n    transform: translateX(-75%);\n    width: 320px;\n  }\n`;\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default Onboarding;\n","import {Fragment, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {promptsCheck, promptsUpdate} from 'sentry/actionCreators/prompts';\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport Projects from 'sentry/utils/projects';\n\nimport FilterBar from '../filterBar';\nimport {Incident} from '../types';\nimport {getQueryStatus, getTeamParams} from '../utils';\n\nimport AlertHeader from './header';\nimport Onboarding from './onboarding';\nimport AlertListRow from './row';\n\nconst DOCS_URL =\n  'https://docs.sentry.io/workflow/alerts-notifications/alerts/?_ga=2.21848383.580096147.1592364314-1444595810.1582160976';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  incidentList: Incident[];\n  /**\n   * User has not yet seen the 'alert_stream' welcome prompt for this\n   * organization.\n   */\n  firstVisitShown?: boolean;\n  /**\n   * Is there at least one alert rule configured for the currently selected\n   * projects?\n   */\n  hasAlertRule?: boolean;\n};\n\nclass IncidentsList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location} = this.props;\n    const {query} = location;\n    const status = getQueryStatus(query.status);\n\n    return [\n      [\n        'incidentList',\n        `/organizations/${params?.orgId}/incidents/`,\n        {\n          query: {\n            ...query,\n            status: status === 'all' ? undefined : status,\n            team: getTeamParams(query.team),\n            expand: ['original_alert_rule'],\n          },\n        },\n      ],\n    ];\n  }\n\n  /**\n   * If our incidentList is empty, determine if we've configured alert rules or\n   * if the user has seen the welcome prompt.\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {incidentList} = this.state;\n\n    if (!incidentList || incidentList.length !== 0) {\n      this.setState({hasAlertRule: true, firstVisitShown: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    // Check if they have rules or not, to know which empty state message to\n    // display\n    const {params, location, organization} = this.props;\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${params?.orgId}/alert-rules/`,\n      {\n        method: 'GET',\n        query: location.query,\n      }\n    );\n    const hasAlertRule = alertRules.length > 0;\n\n    // We've already configured alert rules, no need to check if we should show\n    // the \"first time welcome\" prompt\n    if (hasAlertRule) {\n      this.setState({hasAlertRule, firstVisitShown: false, loading: false});\n      return;\n    }\n\n    // Check if they have already seen the prompt for the alert stream\n    const prompt = await promptsCheck(this.api, {\n      organizationId: organization.id,\n      feature: 'alert_stream',\n    });\n\n    const firstVisitShown = !prompt?.dismissedTime;\n\n    if (firstVisitShown) {\n      // Prompt has not been seen, mark the prompt as seen immediately so they\n      // don't see it again\n      promptsUpdate(this.api, {\n        feature: 'alert_stream',\n        organizationId: organization.id,\n        status: 'dismissed',\n      });\n    }\n\n    this.setState({hasAlertRule, firstVisitShown, loading: false});\n  }\n\n  get projectsFromIncidents() {\n    const {incidentList} = this.state;\n\n    return [...new Set(incidentList?.map(({projects}) => projects).flat())];\n  }\n\n  handleChangeSearch = (title: string) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        title,\n      },\n    });\n  };\n\n  handleChangeFilter = (activeFilters: Set<string>) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n\n    const team = activeFilters.size ? [...activeFilters] : '';\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        // Preserve empty team query parameter\n        team: team.length === 0 ? '' : team,\n      },\n    });\n  };\n\n  handleChangeStatus = (value: string): void => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        status: value === 'all' ? undefined : value,\n      },\n    });\n  };\n\n  tryRenderOnboarding() {\n    const {firstVisitShown} = this.state;\n    const {organization} = this.props;\n\n    if (!firstVisitShown) {\n      return null;\n    }\n\n    const actions = (\n      <Fragment>\n        <Button size=\"small\" external href={DOCS_URL}>\n          {t('View Features')}\n        </Button>\n        <CreateAlertButton\n          organization={organization}\n          iconProps={{size: 'xs'}}\n          size=\"small\"\n          priority=\"primary\"\n          referrer=\"alert_stream\"\n        >\n          {t('Create Alert')}\n        </CreateAlertButton>\n      </Fragment>\n    );\n\n    return <Onboarding actions={actions} />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {loading, incidentList, incidentListPageLinks, hasAlertRule} = this.state;\n    const {\n      params: {orgId},\n      organization,\n    } = this.props;\n\n    const checkingForAlertRules =\n      incidentList?.length === 0 && hasAlertRule === undefined;\n    const showLoadingIndicator = loading || checkingForAlertRules;\n\n    return (\n      <Fragment>\n        {this.tryRenderOnboarding() ?? (\n          <StyledPanelTable\n            isLoading={showLoadingIndicator}\n            isEmpty={incidentList?.length === 0}\n            emptyMessage={t('No incidents exist for the current query.')}\n            emptyAction={\n              <EmptyStateAction>\n                {tct('Learn more about [link:Metric Alerts]', {\n                  link: <ExternalLink href={DOCS_URL} />,\n                })}\n              </EmptyStateAction>\n            }\n            headers={[\n              t('Alert Rule'),\n              t('Triggered'),\n              t('Duration'),\n              t('Project'),\n              t('Alert ID'),\n              t('Team'),\n            ]}\n          >\n            <Projects orgId={orgId} slugs={this.projectsFromIncidents}>\n              {({initiallyLoaded, projects}) =>\n                incidentList.map(incident => (\n                  <AlertListRow\n                    key={incident.id}\n                    projectsLoaded={initiallyLoaded}\n                    projects={projects as Project[]}\n                    incident={incident}\n                    orgId={orgId}\n                    organization={organization}\n                  />\n                ))\n              }\n            </Projects>\n          </StyledPanelTable>\n        )}\n        <Pagination pageLinks={incidentListPageLinks} />\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {params, organization, router, location} = this.props;\n    const {orgId} = params;\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <PageFiltersContainer\n          organization={organization}\n          showDateSelector={false}\n          hideGlobalHeader\n        >\n          <AlertHeader\n            organization={organization}\n            router={router}\n            activeTab=\"stream\"\n            projectSlugs={this.projectsFromIncidents}\n          />\n          <Layout.Body>\n            <Layout.Main fullWidth>\n              {!this.tryRenderOnboarding() && (\n                <Fragment>\n                  <StyledAlert showIcon>\n                    {t('This page only shows metric alerts.')}\n                  </StyledAlert>\n                  <FilterBar\n                    location={location}\n                    onChangeFilter={this.handleChangeFilter}\n                    onChangeSearch={this.handleChangeSearch}\n                    onChangeStatus={this.handleChangeStatus}\n                    hasStatusFilters\n                  />\n                </Fragment>\n              )}\n              {this.renderList()}\n            </Layout.Main>\n          </Layout.Body>\n        </PageFiltersContainer>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nfunction IncidentsListContainer(props: Props) {\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('alert_stream.viewed', {\n      organization: props.organization,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const renderDisabled = () => (\n    <Layout.Body>\n      <Layout.Main fullWidth>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </Layout.Main>\n    </Layout.Body>\n  );\n\n  return (\n    <Feature\n      features={['incidents']}\n      hookName=\"feature-disabled:alerts-page\"\n      renderDisabled={renderDisabled}\n    >\n      <IncidentsList {...props} />\n    </Feature>\n  );\n}\n\nconst StyledPanelTable = styled(PanelTable)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: ${space(1.5)};\n`;\n\nconst EmptyStateAction = styled('p')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nexport default IncidentsListContainer;\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport moment from 'moment';\n\nimport ActorAvatar from 'sentry/components/avatar/actorAvatar';\nimport Duration from 'sentry/components/duration';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport Tag from 'sentry/components/tag';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {Actor, Organization, Project} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nimport {\n  API_INTERVAL_POINTS_LIMIT,\n  API_INTERVAL_POINTS_MIN,\n} from '../rules/details/constants';\nimport {Incident, IncidentStatus} from '../types';\nimport {alertDetailsLink} from '../utils';\n\n/**\n * Retrieve the start/end for showing the graph of the metric\n * Will show at least 150 and no more than 10,000 data points\n */\nexport const makeRuleDetailsQuery = (\n  incident: Incident\n): {end: string; start: string} => {\n  const {timeWindow} = incident.alertRule;\n  const timeWindowMillis = timeWindow * 60 * 1000;\n  const minRange = timeWindowMillis * API_INTERVAL_POINTS_MIN;\n  const maxRange = timeWindowMillis * API_INTERVAL_POINTS_LIMIT;\n  const now = moment.utc();\n  const startDate = moment.utc(incident.dateStarted);\n  // make a copy of now since we will modify endDate and use now for comparing\n  const endDate = incident.dateClosed ? moment.utc(incident.dateClosed) : moment(now);\n  const incidentRange = Math.max(endDate.diff(startDate), 3 * timeWindowMillis);\n  const range = Math.min(maxRange, Math.max(minRange, incidentRange));\n  const halfRange = moment.duration(range / 2);\n\n  return {\n    start: getUtcDateString(startDate.subtract(halfRange)),\n    end: getUtcDateString(moment.min(endDate.add(halfRange), now)),\n  };\n};\n\ntype Props = {\n  incident: Incident;\n  orgId: string;\n  organization: Organization;\n  projects: Project[];\n  projectsLoaded: boolean;\n};\n\nfunction AlertListRow({incident, projectsLoaded, projects, organization}: Props) {\n  const slug = incident.projects[0];\n  const started = moment(incident.dateStarted);\n  const duration = moment\n    .duration(moment(incident.dateClosed || new Date()).diff(started))\n    .as('seconds');\n\n  const project = useMemo(() => projects.find(p => p.slug === slug), [slug, projects]);\n\n  const alertLink = {\n    pathname: alertDetailsLink(organization, incident),\n    query: {alert: incident.identifier},\n  };\n  const ownerId = incident.alertRule.owner?.split(':')[1];\n  let teamName = '';\n  if (ownerId) {\n    teamName = TeamStore.getById(ownerId)?.name ?? '';\n  }\n  const teamActor = ownerId\n    ? {type: 'team' as Actor['type'], id: ownerId, name: teamName}\n    : null;\n\n  return (\n    <ErrorBoundary>\n      <Title data-test-id=\"alert-title\">\n        <Link to={alertLink}>{incident.title}</Link>\n      </Title>\n\n      <NoWrapNumeric>\n        {getDynamicText({\n          value: <TimeSince date={incident.dateStarted} extraShort />,\n          fixed: '1w ago',\n        })}\n      </NoWrapNumeric>\n      <NoWrapNumeric>\n        {incident.status === IncidentStatus.CLOSED ? (\n          <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n        ) : (\n          <Tag type=\"warning\">{t('Still Active')}</Tag>\n        )}\n      </NoWrapNumeric>\n\n      <ProjectBadge avatarSize={18} project={!projectsLoaded ? {slug} : project} />\n      <NoWrapNumeric>#{incident.id}</NoWrapNumeric>\n\n      <FlexCenter>\n        {teamActor ? (\n          <Fragment>\n            <StyledActorAvatar actor={teamActor} size={24} hasTooltip={false} />{' '}\n            <TeamWrapper>{teamActor.name}</TeamWrapper>\n          </Fragment>\n        ) : (\n          '-'\n        )}\n      </FlexCenter>\n    </ErrorBoundary>\n  );\n}\n\nconst Title = styled('div')`\n  ${overflowEllipsis}\n  min-width: 130px;\n`;\n\nconst NoWrapNumeric = styled('div')`\n  white-space: nowrap;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst FlexCenter = styled('div')`\n  ${overflowEllipsis}\n  display: flex;\n  align-items: center;\n`;\n\nconst TeamWrapper = styled('span')`\n  ${overflowEllipsis}\n`;\n\nconst StyledActorAvatar = styled(ActorAvatar)`\n  margin-right: ${space(1)};\n`;\n\nexport default AlertListRow;\n","import {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\nimport {TimePeriod, TimeWindow} from 'sentry/views/alerts/incidentRules/types';\n\nexport const SELECTOR_RELATIVE_PERIODS = {\n  [TimePeriod.SIX_HOURS]: t('Last 6 hours'),\n  [TimePeriod.ONE_DAY]: t('Last 24 hours'),\n  [TimePeriod.THREE_DAYS]: t('Last 3 days'),\n  [TimePeriod.SEVEN_DAYS]: t('Last 7 days'),\n};\n\nexport const ALERT_DEFAULT_CHART_PERIOD = '7d';\n\nexport const TIME_OPTIONS: SelectValue<string>[] = [\n  {label: t('Last 6 hours'), value: TimePeriod.SIX_HOURS},\n  {label: t('Last 24 hours'), value: TimePeriod.ONE_DAY},\n  {label: t('Last 3 days'), value: TimePeriod.THREE_DAYS},\n  {label: t('Last 7 days'), value: TimePeriod.SEVEN_DAYS},\n  {label: t('Last 14 days'), value: TimePeriod.FOURTEEN_DAYS},\n];\n\nexport const TIME_WINDOWS = {\n  [TimePeriod.SIX_HOURS]: TimeWindow.ONE_HOUR * 6 * 60 * 1000,\n  [TimePeriod.ONE_DAY]: TimeWindow.ONE_DAY * 60 * 1000,\n  [TimePeriod.THREE_DAYS]: TimeWindow.ONE_DAY * 3 * 60 * 1000,\n  [TimePeriod.SEVEN_DAYS]: TimeWindow.ONE_DAY * 7 * 60 * 1000,\n  [TimePeriod.FOURTEEN_DAYS]: TimeWindow.ONE_DAY * 14 * 60 * 1000,\n};\n\nexport const SELECTOR_DEFAULT_PERIOD = TimePeriod.FOURTEEN_DAYS;\nexport const API_INTERVAL_POINTS_LIMIT = 10000;\nexport const API_INTERVAL_POINTS_MIN = 150;\n\nexport type TimePeriodType = {\n  display: React.ReactNode;\n  end: string;\n  label: string;\n  period: string;\n  start: string;\n  /**\n   * The start/end were chosen from the period and not the user\n   */\n  usingPeriod: boolean;\n  custom?: boolean;\n  utc?: boolean;\n};\n"],"names":["OnboardingPanel","className","image","children","Container","IlloBox","StyledBox","space","p","theme","breakpoints","Onboarding","actions","AlertsImage","src","emptyStateImg","t","ButtonList","gap","ButtonBar","DOCS_URL","IncidentsList","AsyncComponent","title","router","location","this","props","cursor","_cursor","page","_page","currentQuery","query","push","pathname","activeFilters","team","size","length","value","status","undefined","getEndpoints","params","getQueryStatus","orgId","getTeamParams","expand","incidentList","state","setState","hasAlertRule","firstVisitShown","loading","organization","api","requestPromise","method","prompt","promptsCheck","organizationId","id","feature","dismissedTime","promptsUpdate","projectsFromIncidents","Set","map","projects","flat","tryRenderOnboarding","Fragment","external","href","iconProps","priority","referrer","renderLoading","renderBody","renderList","incidentListPageLinks","checkingForAlertRules","showLoadingIndicator","StyledPanelTable","isLoading","isEmpty","emptyMessage","emptyAction","EmptyStateAction","tct","link","headers","slugs","initiallyLoaded","incident","projectsLoaded","pageLinks","orgSlug","showDateSelector","hideGlobalHeader","activeTab","projectSlugs","fullWidth","StyledAlert","showIcon","onChangeFilter","handleChangeFilter","onChangeSearch","handleChangeSearch","onChangeStatus","handleChangeStatus","hasStatusFilters","IncidentsListContainer","useEffect","trackAdvancedAnalyticsEvent","features","hookName","renderDisabled","type","PanelTable","fontSizeMedium","Alert","fontSizeLarge","makeRuleDetailsQuery","timeWindow","alertRule","timeWindowMillis","minRange","API_INTERVAL_POINTS_MIN","maxRange","API_INTERVAL_POINTS_LIMIT","now","moment","startDate","dateStarted","endDate","dateClosed","incidentRange","Math","max","diff","range","min","halfRange","start","getUtcDateString","subtract","end","add","AlertListRow","slug","started","duration","Date","as","project","useMemo","find","alertLink","alertDetailsLink","alert","identifier","ownerId","owner","split","teamName","TeamStore","name","teamActor","Title","to","NoWrapNumeric","getDynamicText","date","extraShort","fixed","IncidentStatus","seconds","ProjectBadge","avatarSize","FlexCenter","StyledActorAvatar","actor","hasTooltip","TeamWrapper","overflowEllipsis","IdBadge","ActorAvatar","SELECTOR_RELATIVE_PERIODS","TimePeriod","ALERT_DEFAULT_CHART_PERIOD","TIME_OPTIONS","label","TIME_WINDOWS","TimeWindow"],"sourceRoot":""}