{"version":3,"file":"chunks/app_components_forms_form_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"0vBAwFe,MAAMA,UAAaC,EAAAA,UAChCC,YAAYC,EAAcC,GACxBC,MAAMF,EAAOC,IADqC,oBA+BjCE,KAAKH,MAAMI,OAAS,IAAIC,EAAAA,IA/BS,wBAwCzCC,IAAK,SACbH,KAAKH,MAAMO,oBAAsBD,EAAEE,iBAChCL,KAAKC,MAAMK,WAIf,aAAAN,KAAKH,OAAMU,mBAAX,iBAEIP,KAAKH,MAAMW,SACbR,KAAKH,MAAMW,SACTR,KAAKC,MAAMQ,UACXT,KAAKU,gBACLV,KAAKW,cACLR,EACAH,KAAKC,OAGPD,KAAKC,MAAMW,gBAzDqC,+BA6DlCC,IAChB,MAAM,gBAACH,GAAmBV,KAAKH,MAC/BG,KAAKC,MAAMa,cAAcD,GAErBH,GACFA,EAAgBG,EAAMb,KAAKC,WAlEqB,6BAsEpCc,IACd,MAAM,cAACJ,GAAiBX,KAAKH,MAC7BG,KAAKC,MAAMe,YAAYD,GAEnBJ,GACFA,EAAcI,EAAOf,KAAKC,UAzE5B,MAAM,WACJgB,EADI,YAEJC,EAFI,UAGJC,EAHI,aAIJC,EACAV,gBAAAA,EACAC,cAAAA,EANI,cAOJU,EAPI,YAQJC,EARI,UASJC,GACE1B,EAEJG,KAAKC,MAAMuB,eAAeF,GAC1BtB,KAAKC,MAAMwB,eAAe,CACxBL,aAAAA,EACAG,UAAAA,EACAF,cAAAA,EACAX,gBAAAA,EACAC,cAAAA,EACAM,WAAAA,EACAC,YAAAA,EACAC,UAAAA,IAIJO,wBACG1B,KAAKH,MAAM8B,2BAA6B3B,KAAKC,MAAM2B,QAKtDC,cACE,MAAO,CACLZ,WAAYjB,KAAKH,MAAMoB,WACvBa,KAAM9B,KAAKC,OA2Cf8B,SACE,MAAM,UACJC,EADI,SAEJC,EAFI,YAGJC,EAHI,YAIJC,EAJI,eAKJC,EALI,YAMJC,EANI,eAOJC,EAPI,YAQJC,EARI,SASJC,EATI,YAUJC,EAVI,eAWJC,EAXI,WAYJzB,EAZI,WAaJ0B,GACE3C,KAAKH,MACH+C,OACkB,IAAfD,GAA8BA,GAAc1B,EAErD,OACE,QAAC,aAAD,CAAsB4B,MAAO7C,KAAK6B,cAAlC,UACE,gBACErB,SAAUR,KAAKQ,SACfwB,UAAWA,MAAAA,EAAAA,EAAa,eACxB,eAAchC,KAAKH,MAAM,gBAH3B,WAKE,yBACGiD,EAAAA,EAAAA,GAAyBb,GACtBA,EAAS,CAAChC,MAAOD,KAAKC,QACtBgC,IAGLW,IACC,QAACG,EAAD,CACEf,UAAWE,EACXc,MAAOb,EACPlB,WAAYA,EAHd,UAKGwB,GACD,QAACQ,EAAD,WACGT,IACC,QAAC,KAAD,UACG,KACC,QAAC,KAAD,CACEU,KAAK,SACLC,SAAUnD,KAAKC,MAAMK,SACrB8C,QAASZ,EACTQ,MAAO,CAACK,WAAY,GAJtB,SAMGd,MAAAA,EAAAA,GAAee,EAAAA,EAAAA,GAAE,eAM1B,QAAC,KAAD,UACG,KACC,QAAC,KAAD,CACE,eAAa,cACbC,SAAUjB,MAAAA,EAAAA,EAAkB,UAC5Ba,SACEnD,KAAKC,MAAMuD,SACXxD,KAAKC,MAAMK,UACX8B,KACCM,IAAkB1C,KAAKC,MAAMwD,YAEhCP,KAAK,SATP,SAWGb,MAAAA,EAAAA,GAAeiB,EAAAA,EAAAA,GAAE,gCApJnB5D,EAAAA,YAAAA,OAiKrB,MAAMqD,GAAe,OAAO,MAAP,qBAAH,+EAIQW,GAAKA,EAAEC,MAAMC,aAJrB,yDASdF,IACCA,EAAEzC,YACF,OACD4C,EAAAA,8SAZc,KA6BZZ,GAAiB,OAAO,MAAP,qBAAH,qBAEXa,EAAAA,EAAAA,GAAM,GAFK","sources":["webpack:///./app/components/forms/form.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport {Observer} from 'mobx-react';\n\nimport {APIRequestMethod} from 'sentry/api';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport FormContext, {FormContextData} from 'sentry/components/forms/formContext';\nimport FormModel, {FormOptions} from 'sentry/components/forms/model';\nimport {Data, OnSubmitCallback} from 'sentry/components/forms/type';\nimport Panel from 'sentry/components/panels/panel';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {isRenderFunc} from 'sentry/utils/isRenderFunc';\n\ntype RenderProps = {\n  model: FormModel;\n};\n\ntype RenderFunc = (props: RenderProps) => React.ReactNode;\n\ntype Props = {\n  additionalFieldProps?: {[key: string]: any};\n  allowUndo?: boolean;\n  /**\n   * The URL to the API endpoint this form submits to.\n   */\n  apiEndpoint?: string;\n  /**\n   * The HTTP method to use.\n   */\n  apiMethod?: APIRequestMethod;\n  cancelLabel?: string;\n  children?: React.ReactNode | RenderFunc;\n  className?: string;\n  'data-test-id'?: string;\n  extraButton?: React.ReactNode;\n  footerClass?: string;\n  footerStyle?: React.CSSProperties;\n  hideFooter?: boolean;\n  initialData?: Data;\n  /**\n   * A FormModel instance. If undefined a FormModel will be created for you.\n   */\n  model?: FormModel;\n  /**\n   * Callback fired when the form is cancelled via the cancel button.\n   */\n  onCancel?: (e: React.MouseEvent) => void;\n  onPreSubmit?: () => void;\n  /**\n   * Callback to handle form submission.\n   *\n   * Defining this prop will replace the normal API submission behavior\n   * and instead only call the provided callback.\n   *\n   * Your callback is expected to call `onSubmitSuccess` when the action succeeds and\n   * `onSubmitError` when the action fails.\n   */\n  onSubmit?: OnSubmitCallback;\n  /**\n   * Ensure the form model isn't reset when the form unmounts\n   */\n  preventFormResetOnUnmount?: boolean;\n  /**\n   * Are changed required before the form can be submitted.\n   */\n  requireChanges?: boolean;\n  /**\n   * Should the form reset its state when there are errors after submission.\n   */\n  resetOnError?: boolean;\n  /**\n   * Should fields save individually as they are blurred.\n   */\n  saveOnBlur?: boolean;\n\n  /**\n   * If set to true, preventDefault is not called\n   */\n  skipPreventDefault?: boolean;\n  /**\n   * Should the submit button be disabled.\n   */\n  submitDisabled?: boolean;\n  submitLabel?: string;\n  submitPriority?: ButtonProps['priority'];\n} & Pick<FormOptions, 'onSubmitSuccess' | 'onSubmitError' | 'onFieldChange'>;\n\nexport default class Form extends Component<Props> {\n  constructor(props: Props, context: FormContextData) {\n    super(props, context);\n    const {\n      saveOnBlur,\n      apiEndpoint,\n      apiMethod,\n      resetOnError,\n      onSubmitSuccess,\n      onSubmitError,\n      onFieldChange,\n      initialData,\n      allowUndo,\n    } = props;\n\n    this.model.setInitialData(initialData);\n    this.model.setFormOptions({\n      resetOnError,\n      allowUndo,\n      onFieldChange,\n      onSubmitSuccess,\n      onSubmitError,\n      saveOnBlur,\n      apiEndpoint,\n      apiMethod,\n    });\n  }\n\n  componentWillUnmount() {\n    !this.props.preventFormResetOnUnmount && this.model.reset();\n  }\n\n  model: FormModel = this.props.model || new FormModel();\n\n  contextData() {\n    return {\n      saveOnBlur: this.props.saveOnBlur,\n      form: this.model,\n    };\n  }\n\n  onSubmit = e => {\n    !this.props.skipPreventDefault && e.preventDefault();\n    if (this.model.isSaving) {\n      return;\n    }\n\n    this.props.onPreSubmit?.();\n\n    if (this.props.onSubmit) {\n      this.props.onSubmit(\n        this.model.getData(),\n        this.onSubmitSuccess,\n        this.onSubmitError,\n        e,\n        this.model\n      );\n    } else {\n      this.model.saveForm();\n    }\n  };\n\n  onSubmitSuccess = data => {\n    const {onSubmitSuccess} = this.props;\n    this.model.submitSuccess(data);\n\n    if (onSubmitSuccess) {\n      onSubmitSuccess(data, this.model);\n    }\n  };\n\n  onSubmitError = error => {\n    const {onSubmitError} = this.props;\n    this.model.submitError(error);\n\n    if (onSubmitError) {\n      onSubmitError(error, this.model);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      footerClass,\n      footerStyle,\n      submitDisabled,\n      submitLabel,\n      submitPriority,\n      cancelLabel,\n      onCancel,\n      extraButton,\n      requireChanges,\n      saveOnBlur,\n      hideFooter,\n    } = this.props;\n    const shouldShowFooter =\n      typeof hideFooter !== 'undefined' ? !hideFooter : !saveOnBlur;\n\n    return (\n      <FormContext.Provider value={this.contextData()}>\n        <form\n          onSubmit={this.onSubmit}\n          className={className ?? 'form-stacked'}\n          data-test-id={this.props['data-test-id']}\n        >\n          <div>\n            {isRenderFunc<RenderFunc>(children)\n              ? children({model: this.model})\n              : children}\n          </div>\n\n          {shouldShowFooter && (\n            <StyledFooter\n              className={footerClass}\n              style={footerStyle}\n              saveOnBlur={saveOnBlur}\n            >\n              {extraButton}\n              <DefaultButtons>\n                {onCancel && (\n                  <Observer>\n                    {() => (\n                      <Button\n                        type=\"button\"\n                        disabled={this.model.isSaving}\n                        onClick={onCancel}\n                        style={{marginLeft: 5}}\n                      >\n                        {cancelLabel ?? t('Cancel')}\n                      </Button>\n                    )}\n                  </Observer>\n                )}\n\n                <Observer>\n                  {() => (\n                    <Button\n                      data-test-id=\"form-submit\"\n                      priority={submitPriority ?? 'primary'}\n                      disabled={\n                        this.model.isError ||\n                        this.model.isSaving ||\n                        submitDisabled ||\n                        (requireChanges ? !this.model.formChanged : false)\n                      }\n                      type=\"submit\"\n                    >\n                      {submitLabel ?? t('Save Changes')}\n                    </Button>\n                  )}\n                </Observer>\n              </DefaultButtons>\n            </StyledFooter>\n          )}\n        </form>\n      </FormContext.Provider>\n    );\n  }\n}\n\nconst StyledFooter = styled('div')<{saveOnBlur?: boolean}>`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 25px;\n  border-top: 1px solid ${p => p.theme.innerBorder};\n  background: none;\n  padding: 16px 0 0;\n  margin-bottom: 16px;\n\n  ${p =>\n    !p.saveOnBlur &&\n    `\n  ${Panel} & {\n    margin-top: 0;\n    padding-right: 36px;\n  }\n\n  /* Better padding with form inside of a modal */\n  [role='document'] & {\n    padding-right: 30px;\n    margin-left: -30px;\n    margin-right: -30px;\n    margin-bottom: -30px;\n    margin-top: 16px;\n    padding-bottom: 16px;\n  }\n  `};\n`;\n\nconst DefaultButtons = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  grid-auto-flow: column;\n  justify-content: flex-end;\n  flex: 1;\n`;\n"],"names":["Form","Component","constructor","props","context","super","this","model","FormModel","e","skipPreventDefault","preventDefault","isSaving","onPreSubmit","onSubmit","getData","onSubmitSuccess","onSubmitError","saveForm","data","submitSuccess","error","submitError","saveOnBlur","apiEndpoint","apiMethod","resetOnError","onFieldChange","initialData","allowUndo","setInitialData","setFormOptions","componentWillUnmount","preventFormResetOnUnmount","reset","contextData","form","render","className","children","footerClass","footerStyle","submitDisabled","submitLabel","submitPriority","cancelLabel","onCancel","extraButton","requireChanges","hideFooter","shouldShowFooter","value","isRenderFunc","StyledFooter","style","DefaultButtons","type","disabled","onClick","marginLeft","t","priority","isError","formChanged","p","theme","innerBorder","Panel","space"],"sourceRoot":""}