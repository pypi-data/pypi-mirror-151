{"version":3,"file":"chunks/app_components_modals_createTeamModal_tsx-app_components_panels_panel_tsx-app_utils_isRenderF-3afe42.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/components/forms/textField.tsx","webpack:///./app/components/modals/createTeamModal.tsx","webpack:///./app/components/panels/panel.tsx","webpack:///./app/components/teams/createTeamForm.tsx","webpack:///./app/utils/callIfFunction.tsx","webpack:///./app/utils/isRenderFunc.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/useApi.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport TeamActions from 'sentry/actions/teamActions';\nimport {Client} from 'sentry/api';\nimport {tct} from 'sentry/locale';\nimport {Team} from 'sentry/types';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\nimport {uniqueId} from 'sentry/utils/guid';\n\ntype CallbackOptions = {\n  error?: Function;\n  success?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\n// Fetch user teams for current org and place them in the team store\nexport async function fetchUserTeams(api: Client, params: OrgSlug) {\n  const teams = await api.requestPromise(`/organizations/${params.orgId}/user-teams/`);\n  TeamActions.loadUserTeams(teams);\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {createActions} from 'reflux';\n\nconst TeamActions = createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'loadUserTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'reset',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import InputField, {InputFieldProps} from 'sentry/components/forms/inputField';\n\nexport interface TextFieldProps extends Omit<InputFieldProps, 'type'> {}\nexport default function TextField(props) {\n  return <InputField {...props} type=\"text\" />;\n}\n","import {Fragment} from 'react';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {createTeam} from 'sentry/actionCreators/teams';\nimport CreateTeamForm from 'sentry/components/teams/createTeamForm';\nimport {t} from 'sentry/locale';\nimport {Organization, Team} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\n\ntype Props = ModalRenderProps & {\n  organization: Organization;\n  onClose?: (team: Team) => void;\n};\n\nfunction CreateTeamModal({Body, Header, ...props}: Props) {\n  const {onClose, closeModal, organization} = props;\n  const api = useApi();\n\n  async function handleSubmit(\n    data: {slug: string},\n    onSuccess: Function,\n    onError: Function\n  ) {\n    try {\n      const team: Team = await createTeam(api, data, {orgId: organization.slug});\n\n      closeModal();\n      onClose?.(team);\n      onSuccess(team);\n    } catch (err) {\n      onError(err);\n    }\n  }\n\n  return (\n    <Fragment>\n      <Header closeButton>{t('Create Team')}</Header>\n      <Body>\n        <CreateTeamForm {...props} onSubmit={handleSubmit} />\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default CreateTeamModal;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  dashedBorder?: boolean;\n  'data-test-id'?: string;\n};\n\nconst Panel = styled('div')<Props>`\n  background: ${p => (p.dashedBorder ? p.theme.backgroundSecondary : p.theme.background)};\n  border-radius: ${p => p.theme.borderRadius};\n  border: 1px\n    ${p => (p.dashedBorder ? 'dashed' + p.theme.gray300 : 'solid ' + p.theme.border)};\n  box-shadow: ${p => (p.dashedBorder ? 'none' : p.theme.dropShadowLight)};\n  margin-bottom: ${space(2)};\n  position: relative;\n`;\n\nexport default Panel;\n","import {Fragment} from 'react';\n\nimport Form from 'sentry/components/forms/form';\nimport TextField from 'sentry/components/forms/textField';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport slugify from 'sentry/utils/slugify';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  formProps?: Partial<typeof Form>;\n  onSubmit?: (data: Payload, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n};\n\nfunction CreateTeamForm({organization, formProps, ...props}: Props) {\n  return (\n    <Fragment>\n      <p>\n        {t(\n          'Members of a team have access to specific areas, such as a new release or a new application feature.'\n        )}\n      </p>\n\n      <Form\n        submitLabel={t('Create Team')}\n        apiEndpoint={`/organizations/${organization.slug}/teams/`}\n        apiMethod=\"POST\"\n        onSubmit={(data, onSuccess, onError) =>\n          props.onSubmit?.(data as Payload, onSuccess, onError)\n        }\n        onSubmitSuccess={data => props.onSuccess?.(data)}\n        requireChanges\n        data-test-id=\"create-team-form\"\n        {...formProps}\n      >\n        <TextField\n          name=\"slug\"\n          label={t('Team Name')}\n          placeholder={t('e.g. operations, web-frontend, desktop')}\n          help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n          required\n          stacked\n          flexibleControlStateSize\n          inline={false}\n          transformInput={slugify}\n        />\n      </Form>\n    </Fragment>\n  );\n}\n\nexport default CreateTeamForm;\n","// Checks if `fn` is a function and calls it with `args`\nexport function callIfFunction(fn: any, ...args: any[]): any {\n  return typeof fn === 'function' && fn(...args);\n}\n","/**\n * Generic type guard for children as a function patterns.\n */\nexport function isRenderFunc<T>(func: React.ReactNode | Function): func is T {\n  return typeof func === 'function';\n}\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {useCallback, useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  // Clear API calls on unmount (if persistInFlight is disabled\n  const clearOnUnmount = useCallback(() => {\n    if (!persistInFlight) {\n      api.clear();\n    }\n  }, [api, persistInFlight]);\n\n  useEffect(() => clearOnUnmount, [clearOnUnmount]);\n\n  return api;\n}\n\nexport default useApi;\n"],"names":["doCallback","params","name","args","callIfFunction","async","fetchUserTeams","api","teams","requestPromise","orgId","TeamActions","updateTeamSuccess","teamId","data","joinTeam","options","endpoint","memberId","id","uniqueId","request","method","success","error","leaveTeam","createTeam","team","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","createActions","TextField","props","type","CreateTeamModal","Body","Header","onClose","closeModal","useApi","Fragment","closeButton","t","onSubmit","onSuccess","onError","p","dashedBorder","theme","backgroundSecondary","background","borderRadius","gray300","border","dropShadowLight","space","CreateTeamForm","formProps","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","requireChanges","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput","slugify","fn","isRenderFunc","func","str","toLowerCase","replace","persistInFlight","providedApi","localApi","useRef","undefined","current","Client","clearOnUnmount","useCallback","clear","useEffect"],"sourceRoot":""}