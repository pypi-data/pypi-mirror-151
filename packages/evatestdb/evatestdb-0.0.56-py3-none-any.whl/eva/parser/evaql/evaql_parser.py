# Generated from eva/parser/evaql/evaql_parser.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00ac")
        buf.write("\u044e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\3\2\5\2\u00ca\n\2\3")
        buf.write("\2\5\2\u00cd\n\2\3\2\3\2\3\3\3\3\5\3\u00d3\n\3\3\3\3\3")
        buf.write("\3\3\7\3\u00d8\n\3\f\3\16\3\u00db\13\3\3\3\3\3\5\3\u00df")
        buf.write("\n\3\3\3\5\3\u00e2\n\3\3\3\5\3\u00e5\n\3\3\4\3\4\3\4\5")
        buf.write("\4\u00ea\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5")
        buf.write("\6\u00f6\n\6\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00fe\n\7\3\b")
        buf.write("\3\b\5\b\u0102\n\b\3\t\3\t\3\t\5\t\u0107\n\t\3\t\3\t\3")
        buf.write("\n\3\n\3\n\3\n\5\n\u010f\n\n\3\n\3\n\3\n\3\n\3\13\3\13")
        buf.write("\3\13\5\13\u0118\n\13\3\13\3\13\3\13\3\f\3\f\3\f\5\f\u0120")
        buf.write("\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3")
        buf.write("\r\3\r\5\r\u0130\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\22\3\22")
        buf.write("\3\22\3\22\7\22\u0147\n\22\f\22\16\22\u014a\13\22\3\22")
        buf.write("\3\22\3\23\3\23\3\23\3\23\5\23\u0152\n\23\3\24\3\24\7")
        buf.write("\24\u0156\n\24\f\24\16\24\u0159\13\24\3\25\3\25\3\25\3")
        buf.write("\25\5\25\u015f\n\25\3\25\3\25\3\25\5\25\u0164\n\25\5\25")
        buf.write("\u0166\n\25\3\26\3\26\5\26\u016a\n\26\3\26\5\26\u016d")
        buf.write("\n\26\3\26\3\26\3\27\3\27\3\27\5\27\u0174\n\27\3\27\3")
        buf.write("\27\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\5\31")
        buf.write("\u0181\n\31\3\31\3\31\3\32\3\32\3\33\3\33\5\33\u0189\n")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\5\33\u0190\n\33\3\33\3\33")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u019a\n\34\3\34\7")
        buf.write("\34\u019d\n\34\f\34\16\34\u01a0\13\34\3\35\3\35\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u01ae")
        buf.write("\n\36\3\36\3\36\5\36\u01b2\n\36\3\37\3\37\3\37\3 \3 \3")
        buf.write(" \3 \3 \3 \3!\3!\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\7#\u01cb\n#\f#\16#\u01ce\13#\5#\u01d0\n#\3$\3$\3$\3")
        buf.write("$\5$\u01d6\n$\3%\3%\3%\3%\3%\5%\u01dd\n%\3%\5%\u01e0\n")
        buf.write("%\3%\3%\5%\u01e4\n%\3&\3&\3&\5&\u01e9\n&\3&\5&\u01ec\n")
        buf.write("&\3&\3&\3&\3&\7&\u01f2\n&\f&\16&\u01f5\13&\3&\3&\5&\u01f9")
        buf.write("\n&\3&\5&\u01fc\n&\3&\5&\u01ff\n&\3\'\3\'\3\'\3\'\3\'")
        buf.write("\7\'\u0206\n\'\f\'\16\'\u0209\13\'\3(\3(\5(\u020d\n(\3")
        buf.write(")\3)\3)\7)\u0212\n)\f)\16)\u0215\13)\3*\3*\7*\u0219\n")
        buf.write("*\f*\16*\u021c\13*\3+\3+\5+\u0220\n+\3+\5+\u0223\n+\3")
        buf.write("+\5+\u0226\n+\3,\3,\3,\3,\3,\3,\5,\u022e\n,\5,\u0230\n")
        buf.write(",\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u023e\n.\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\5/\u0248\n/\3\60\3\60\3\60\3\60\5")
        buf.write("\60\u024e\n\60\3\60\5\60\u0251\n\60\3\60\5\60\u0254\n")
        buf.write("\60\3\60\5\60\u0257\n\60\3\61\3\61\5\61\u025b\n\61\3\61")
        buf.write("\3\61\7\61\u025f\n\61\f\61\16\61\u0262\13\61\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\5\62\u026a\n\62\3\62\5\62\u026d\n")
        buf.write("\62\3\62\3\62\5\62\u0271\n\62\3\62\5\62\u0274\n\62\3\62")
        buf.write("\3\62\5\62\u0278\n\62\3\62\3\62\5\62\u027c\n\62\3\62\5")
        buf.write("\62\u027f\n\62\5\62\u0281\n\62\3\63\3\63\3\63\3\63\5\63")
        buf.write("\u0287\n\63\3\63\3\63\3\63\3\63\3\63\7\63\u028e\n\63\f")
        buf.write("\63\16\63\u0291\13\63\5\63\u0293\n\63\3\63\3\63\5\63\u0297")
        buf.write("\n\63\3\64\3\64\5\64\u029b\n\64\3\65\3\65\3\65\3\65\5")
        buf.write("\65\u02a1\n\65\3\65\3\65\3\65\3\65\3\65\5\65\u02a8\n\65")
        buf.write("\3\66\3\66\3\66\3\67\3\67\3\67\38\38\39\39\39\3:\3:\3")
        buf.write(":\3;\3;\3;\3;\5;\u02bc\n;\3<\3<\3=\3=\3=\5=\u02c3\n=\5")
        buf.write("=\u02c5\n=\3>\3>\3>\3>\3>\5>\u02cc\n>\3>\5>\u02cf\n>\3")
        buf.write("?\3?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\6@\u02e1")
        buf.write("\n@\r@\16@\u02e2\3A\3A\5A\u02e7\nA\3B\3B\3C\3C\3C\5C\u02ee")
        buf.write("\nC\3D\3D\3E\3E\3F\3F\3G\5G\u02f7\nG\3G\3G\3H\3H\3H\3")
        buf.write("H\7H\u02ff\nH\fH\16H\u0302\13H\3H\3H\3H\3H\5H\u0308\n")
        buf.write("H\3I\3I\3I\3I\3I\3I\3I\5I\u0311\nI\3I\3I\5I\u0315\nI\3")
        buf.write("J\3J\3K\3K\3K\5K\u031c\nK\3K\3K\5K\u0320\nK\3K\3K\5K\u0324")
        buf.write("\nK\3K\5K\u0327\nK\3K\3K\5K\u032b\nK\3K\5K\u032e\nK\3")
        buf.write("K\5K\u0331\nK\3L\3L\3L\3L\3M\3M\3M\3M\3M\3M\3N\3N\3N\3")
        buf.write("N\7N\u0341\nN\fN\16N\u0344\13N\3N\3N\3N\3O\3O\3O\7O\u034c")
        buf.write("\nO\fO\16O\u034f\13O\3P\3P\3P\7P\u0354\nP\fP\16P\u0357")
        buf.write("\13P\3Q\3Q\3Q\3Q\7Q\u035d\nQ\fQ\16Q\u0360\13Q\3Q\3Q\3")
        buf.write("R\3R\3R\7R\u0367\nR\fR\16R\u036a\13R\3S\3S\3S\7S\u036f")
        buf.write("\nS\fS\16S\u0372\13S\3T\3T\5T\u0376\nT\3U\3U\5U\u037a")
        buf.write("\nU\3V\3V\3V\3W\3W\3W\3W\3X\3X\5X\u0385\nX\3Y\3Y\3Y\3")
        buf.write("Y\3Y\5Y\u038c\nY\3Z\3Z\3Z\5Z\u0391\nZ\3Z\3Z\3Z\3Z\3Z\3")
        buf.write("Z\3Z\5Z\u039a\nZ\3Z\5Z\u039d\nZ\3Z\5Z\u03a0\nZ\3[\3[\3")
        buf.write("[\3[\5[\u03a6\n[\3[\3[\3[\3[\3[\5[\u03ad\n[\7[\u03af\n")
        buf.write("[\f[\16[\u03b2\13[\3\\\3\\\3\\\3\\\5\\\u03b8\n\\\3]\3")
        buf.write("]\3]\3]\3]\3]\5]\u03c0\n]\3]\3]\3]\5]\u03c5\n]\3]\3]\3")
        buf.write("]\3]\7]\u03cb\n]\f]\16]\u03ce\13]\3^\3^\3^\5^\u03d3\n")
        buf.write("^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u03dd\n^\3^\3^\3^\3^\5^\u03e3")
        buf.write("\n^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u03f3")
        buf.write("\n^\3^\3^\3^\5^\u03f8\n^\7^\u03fa\n^\f^\16^\u03fd\13^")
        buf.write("\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\7_\u040a\n_\f_\16_\u040d")
        buf.write("\13_\3_\3_\3_\3_\3_\3_\5_\u0415\n_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\3_\7_\u041f\n_\f_\16_\u0422\13_\3`\3`\3a\3a\3a\3a\3")
        buf.write("a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0438\na\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\5b\u0441\nb\3c\3c\3c\3c\3c\3c\3c\5")
        buf.write("c\u044a\nc\3d\3d\3d\2\6\66\u00b8\u00ba\u00bce\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\2\22\3\2PQ\3\2LM")
        buf.write("\4\2GGqq\4\2\r\r\26\26\4\2\u00a7\u00a7\u00a9\u00a9\5\2")
        buf.write("\13\13\u009b\u009d\u00a3\u00a3\4\2\35\35>>\4\2\60\60\u00a5")
        buf.write("\u00a5\3\2Ye\5\2ffhikk\4\2\7\7\30\30\4\2//\u008e\u008e")
        buf.write("\5\2\35\35>>AA\5\2\7\7\n\n<<\6\2//\u0086\u0086\u0088\u0088")
        buf.write("\u008e\u008f\3\2\u0083\u008a\2\u04a4\2\u00c9\3\2\2\2\4")
        buf.write("\u00d9\3\2\2\2\6\u00e9\3\2\2\2\b\u00eb\3\2\2\2\n\u00f5")
        buf.write("\3\2\2\2\f\u00fd\3\2\2\2\16\u0101\3\2\2\2\20\u0103\3\2")
        buf.write("\2\2\22\u010a\3\2\2\2\24\u0114\3\2\2\2\26\u011c\3\2\2")
        buf.write("\2\30\u012b\3\2\2\2\32\u0139\3\2\2\2\34\u013b\3\2\2\2")
        buf.write("\36\u013d\3\2\2\2 \u013f\3\2\2\2\"\u0142\3\2\2\2$\u0151")
        buf.write("\3\2\2\2&\u0153\3\2\2\2(\u0165\3\2\2\2*\u0167\3\2\2\2")
        buf.write(",\u0170\3\2\2\2.\u0177\3\2\2\2\60\u017d\3\2\2\2\62\u0184")
        buf.write("\3\2\2\2\64\u0186\3\2\2\2\66\u0193\3\2\2\28\u01a1\3\2")
        buf.write("\2\2:\u01a3\3\2\2\2<\u01b3\3\2\2\2>\u01b6\3\2\2\2@\u01bc")
        buf.write("\3\2\2\2B\u01be\3\2\2\2D\u01cf\3\2\2\2F\u01d1\3\2\2\2")
        buf.write("H\u01d7\3\2\2\2J\u01e5\3\2\2\2L\u0200\3\2\2\2N\u020a\3")
        buf.write("\2\2\2P\u020e\3\2\2\2R\u0216\3\2\2\2T\u021d\3\2\2\2V\u022f")
        buf.write("\3\2\2\2X\u0231\3\2\2\2Z\u0234\3\2\2\2\\\u0247\3\2\2\2")
        buf.write("^\u0249\3\2\2\2`\u025a\3\2\2\2b\u0280\3\2\2\2d\u0282\3")
        buf.write("\2\2\2f\u0298\3\2\2\2h\u029c\3\2\2\2j\u02a9\3\2\2\2l\u02ac")
        buf.write("\3\2\2\2n\u02af\3\2\2\2p\u02b1\3\2\2\2r\u02b4\3\2\2\2")
        buf.write("t\u02b7\3\2\2\2v\u02bd\3\2\2\2x\u02bf\3\2\2\2z\u02c6\3")
        buf.write("\2\2\2|\u02d0\3\2\2\2~\u02d2\3\2\2\2\u0080\u02e6\3\2\2")
        buf.write("\2\u0082\u02e8\3\2\2\2\u0084\u02ed\3\2\2\2\u0086\u02ef")
        buf.write("\3\2\2\2\u0088\u02f1\3\2\2\2\u008a\u02f3\3\2\2\2\u008c")
        buf.write("\u02f6\3\2\2\2\u008e\u0307\3\2\2\2\u0090\u0314\3\2\2\2")
        buf.write("\u0092\u0316\3\2\2\2\u0094\u0330\3\2\2\2\u0096\u0332\3")
        buf.write("\2\2\2\u0098\u0336\3\2\2\2\u009a\u033c\3\2\2\2\u009c\u0348")
        buf.write("\3\2\2\2\u009e\u0350\3\2\2\2\u00a0\u0358\3\2\2\2\u00a2")
        buf.write("\u0363\3\2\2\2\u00a4\u036b\3\2\2\2\u00a6\u0375\3\2\2\2")
        buf.write("\u00a8\u0379\3\2\2\2\u00aa\u037b\3\2\2\2\u00ac\u037e\3")
        buf.write("\2\2\2\u00ae\u0384\3\2\2\2\u00b0\u0386\3\2\2\2\u00b2\u039f")
        buf.write("\3\2\2\2\u00b4\u03a5\3\2\2\2\u00b6\u03b7\3\2\2\2\u00b8")
        buf.write("\u03c4\3\2\2\2\u00ba\u03cf\3\2\2\2\u00bc\u0414\3\2\2\2")
        buf.write("\u00be\u0423\3\2\2\2\u00c0\u0437\3\2\2\2\u00c2\u0440\3")
        buf.write("\2\2\2\u00c4\u0449\3\2\2\2\u00c6\u044b\3\2\2\2\u00c8\u00ca")
        buf.write("\5\4\3\2\u00c9\u00c8\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca")
        buf.write("\u00cc\3\2\2\2\u00cb\u00cd\7\u0087\2\2\u00cc\u00cb\3\2")
        buf.write("\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00cf")
        buf.write("\7\2\2\3\u00cf\3\3\2\2\2\u00d0\u00d2\5\6\4\2\u00d1\u00d3")
        buf.write("\7\u0087\2\2\u00d2\u00d1\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3")
        buf.write("\u00d4\3\2\2\2\u00d4\u00d5\7\u0099\2\2\u00d5\u00d8\3\2")
        buf.write("\2\2\u00d6\u00d8\5\b\5\2\u00d7\u00d0\3\2\2\2\u00d7\u00d6")
        buf.write("\3\2\2\2\u00d8\u00db\3\2\2\2\u00d9\u00d7\3\2\2\2\u00d9")
        buf.write("\u00da\3\2\2\2\u00da\u00e4\3\2\2\2\u00db\u00d9\3\2\2\2")
        buf.write("\u00dc\u00e1\5\6\4\2\u00dd\u00df\7\u0087\2\2\u00de\u00dd")
        buf.write("\3\2\2\2\u00de\u00df\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0")
        buf.write("\u00e2\7\u0099\2\2\u00e1\u00de\3\2\2\2\u00e1\u00e2\3\2")
        buf.write("\2\2\u00e2\u00e5\3\2\2\2\u00e3\u00e5\5\b\5\2\u00e4\u00dc")
        buf.write("\3\2\2\2\u00e4\u00e3\3\2\2\2\u00e5\5\3\2\2\2\u00e6\u00ea")
        buf.write("\5\n\6\2\u00e7\u00ea\5\f\7\2\u00e8\u00ea\5\16\b\2\u00e9")
        buf.write("\u00e6\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00e8\3\2\2\2")
        buf.write("\u00ea\7\3\2\2\2\u00eb\u00ec\7\u0099\2\2\u00ec\t\3\2\2")
        buf.write("\2\u00ed\u00f6\5\20\t\2\u00ee\u00f6\5\24\13\2\u00ef\u00f6")
        buf.write("\5\22\n\2\u00f0\u00f6\5\26\f\2\u00f1\u00f6\5\30\r\2\u00f2")
        buf.write("\u00f6\5,\27\2\u00f3\u00f6\5\60\31\2\u00f4\u00f6\5.\30")
        buf.write("\2\u00f5\u00ed\3\2\2\2\u00f5\u00ee\3\2\2\2\u00f5\u00ef")
        buf.write("\3\2\2\2\u00f5\u00f0\3\2\2\2\u00f5\u00f1\3\2\2\2\u00f5")
        buf.write("\u00f2\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5\u00f4\3\2\2\2")
        buf.write("\u00f6\13\3\2\2\2\u00f7\u00fe\5\66\34\2\u00f8\u00fe\5")
        buf.write("\64\33\2\u00f9\u00fe\58\35\2\u00fa\u00fe\5\62\32\2\u00fb")
        buf.write("\u00fe\5:\36\2\u00fc\u00fe\5> \2\u00fd\u00f7\3\2\2\2\u00fd")
        buf.write("\u00f8\3\2\2\2\u00fd\u00f9\3\2\2\2\u00fd\u00fa\3\2\2\2")
        buf.write("\u00fd\u00fb\3\2\2\2\u00fd\u00fc\3\2\2\2\u00fe\r\3\2\2")
        buf.write("\2\u00ff\u0102\5p9\2\u0100\u0102\5r:\2\u0101\u00ff\3\2")
        buf.write("\2\2\u0101\u0100\3\2\2\2\u0102\17\3\2\2\2\u0103\u0104")
        buf.write("\7\21\2\2\u0104\u0106\7\23\2\2\u0105\u0107\5\u00acW\2")
        buf.write("\u0106\u0105\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u0108\3")
        buf.write("\2\2\2\u0108\u0109\5\u0080A\2\u0109\21\3\2\2\2\u010a\u010b")
        buf.write("\7\21\2\2\u010b\u010c\7&\2\2\u010c\u010e\5\u0080A\2\u010d")
        buf.write("\u010f\5 \21\2\u010e\u010d\3\2\2\2\u010e\u010f\3\2\2\2")
        buf.write("\u010f\u0110\3\2\2\2\u0110\u0111\7\62\2\2\u0111\u0112")
        buf.write("\5v<\2\u0112\u0113\5\u00a0Q\2\u0113\23\3\2\2\2\u0114\u0115")
        buf.write("\7\21\2\2\u0115\u0117\7=\2\2\u0116\u0118\5\u00acW\2\u0117")
        buf.write("\u0116\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u0119\3\2\2\2")
        buf.write("\u0119\u011a\5v<\2\u011a\u011b\5\"\22\2\u011b\25\3\2\2")
        buf.write("\2\u011c\u011d\7\21\2\2\u011d\u011f\7r\2\2\u011e\u0120")
        buf.write("\5\u00acW\2\u011f\u011e\3\2\2\2\u011f\u0120\3\2\2\2\u0120")
        buf.write("\u0121\3\2\2\2\u0121\u0122\5\32\16\2\u0122\u0123\7s\2")
        buf.write("\2\u0123\u0124\5\"\22\2\u0124\u0125\7t\2\2\u0125\u0126")
        buf.write("\5\"\22\2\u0126\u0127\7u\2\2\u0127\u0128\5\34\17\2\u0128")
        buf.write("\u0129\7v\2\2\u0129\u012a\5\36\20\2\u012a\27\3\2\2\2\u012b")
        buf.write("\u012c\7\21\2\2\u012c\u012d\7w\2\2\u012d\u012f\7x\2\2")
        buf.write("\u012e\u0130\5\u00acW\2\u012f\u012e\3\2\2\2\u012f\u0130")
        buf.write("\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\5v<\2\u0132\u0133")
        buf.write("\7\u0094\2\2\u0133\u0134\5\u009cO\2\u0134\u0135\7\u0095")
        buf.write("\2\2\u0135\u0136\3\2\2\2\u0136\u0137\7\f\2\2\u0137\u0138")
        buf.write("\5\66\34\2\u0138\31\3\2\2\2\u0139\u013a\5\u0080A\2\u013a")
        buf.write("\33\3\2\2\2\u013b\u013c\5\u0080A\2\u013c\35\3\2\2\2\u013d")
        buf.write("\u013e\5\u0088E\2\u013e\37\3\2\2\2\u013f\u0140\7F\2\2")
        buf.write("\u0140\u0141\t\2\2\2\u0141!\3\2\2\2\u0142\u0143\7\u0094")
        buf.write("\2\2\u0143\u0148\5$\23\2\u0144\u0145\7\u0098\2\2\u0145")
        buf.write("\u0147\5$\23\2\u0146\u0144\3\2\2\2\u0147\u014a\3\2\2\2")
        buf.write("\u0148\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149\u014b\3")
        buf.write("\2\2\2\u014a\u0148\3\2\2\2\u014b\u014c\7\u0095\2\2\u014c")
        buf.write("#\3\2\2\2\u014d\u014e\5\u0080A\2\u014e\u014f\5&\24\2\u014f")
        buf.write("\u0152\3\2\2\2\u0150\u0152\5*\26\2\u0151\u014d\3\2\2\2")
        buf.write("\u0151\u0150\3\2\2\2\u0152%\3\2\2\2\u0153\u0157\5\u0094")
        buf.write("K\2\u0154\u0156\5(\25\2\u0155\u0154\3\2\2\2\u0156\u0159")
        buf.write("\3\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write("\'\3\2\2\2\u0159\u0157\3\2\2\2\u015a\u0166\5\u008cG\2")
        buf.write("\u015b\u015c\7\24\2\2\u015c\u0166\5\u00a6T\2\u015d\u015f")
        buf.write("\7\66\2\2\u015e\u015d\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u0160\3\2\2\2\u0160\u0166\7*\2\2\u0161\u0163\7@\2\2\u0162")
        buf.write("\u0164\7*\2\2\u0163\u0162\3\2\2\2\u0163\u0164\3\2\2\2")
        buf.write("\u0164\u0166\3\2\2\2\u0165\u015a\3\2\2\2\u0165\u015b\3")
        buf.write("\2\2\2\u0165\u015e\3\2\2\2\u0165\u0161\3\2\2\2\u0166)")
        buf.write("\3\2\2\2\u0167\u0169\7&\2\2\u0168\u016a\5\u0080A\2\u0169")
        buf.write("\u0168\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016c\3\2\2\2")
        buf.write("\u016b\u016d\5 \21\2\u016c\u016b\3\2\2\2\u016c\u016d\3")
        buf.write("\2\2\2\u016d\u016e\3\2\2\2\u016e\u016f\5\u00a0Q\2\u016f")
        buf.write("+\3\2\2\2\u0170\u0171\7\31\2\2\u0171\u0173\7\23\2\2\u0172")
        buf.write("\u0174\5\u00aaV\2\u0173\u0172\3\2\2\2\u0173\u0174\3\2")
        buf.write("\2\2\u0174\u0175\3\2\2\2\u0175\u0176\5\u0080A\2\u0176")
        buf.write("-\3\2\2\2\u0177\u0178\7\31\2\2\u0178\u0179\7&\2\2\u0179")
        buf.write("\u017a\5\u0080A\2\u017a\u017b\7\62\2\2\u017b\u017c\5v")
        buf.write("<\2\u017c/\3\2\2\2\u017d\u017e\7\31\2\2\u017e\u0180\7")
        buf.write("=\2\2\u017f\u0181\5\u00aaV\2\u0180\u017f\3\2\2\2\u0180")
        buf.write("\u0181\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0183\5\u009e")
        buf.write("P\2\u0183\61\3\2\2\2\u0184\u0185\5H%\2\u0185\63\3\2\2")
        buf.write("\2\u0186\u0188\7\'\2\2\u0187\u0189\7%\2\2\u0188\u0187")
        buf.write("\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a\3\2\2\2\u018a")
        buf.write("\u018f\5v<\2\u018b\u018c\7\u0094\2\2\u018c\u018d\5\u009c")
        buf.write("O\2\u018d\u018e\7\u0095\2\2\u018e\u0190\3\2\2\2\u018f")
        buf.write("\u018b\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0191\3\2\2\2")
        buf.write("\u0191\u0192\5D#\2\u0192\65\3\2\2\2\u0193\u0194\b\34\1")
        buf.write("\2\u0194\u0195\5^\60\2\u0195\u019e\3\2\2\2\u0196\u0197")
        buf.write("\f\3\2\2\u0197\u0199\7?\2\2\u0198\u019a\7\7\2\2\u0199")
        buf.write("\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019b\3\2\2\2")
        buf.write("\u019b\u019d\5\66\34\4\u019c\u0196\3\2\2\2\u019d\u01a0")
        buf.write("\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019f")
        buf.write("\67\3\2\2\2\u01a0\u019e\3\2\2\2\u01a1\u01a2\5J&\2\u01a2")
        buf.write("9\3\2\2\2\u01a3\u01a4\7-\2\2\u01a4\u01a5\7\22\2\2\u01a5")
        buf.write("\u01a6\7#\2\2\u01a6\u01a7\5@!\2\u01a7\u01a8\7%\2\2\u01a8")
        buf.write("\u01ad\5v<\2\u01a9\u01aa\7\u0094\2\2\u01aa\u01ab\5\u009c")
        buf.write("O\2\u01ab\u01ac\7\u0095\2\2\u01ac\u01ae\3\2\2\2\u01ad")
        buf.write("\u01a9\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b1\3\2\2\2")
        buf.write("\u01af\u01b0\7J\2\2\u01b0\u01b2\5<\37\2\u01b1\u01af\3")
        buf.write("\2\2\2\u01b1\u01b2\3\2\2\2\u01b2;\3\2\2\2\u01b3\u01b4")
        buf.write("\7K\2\2\u01b4\u01b5\t\3\2\2\u01b5=\3\2\2\2\u01b6\u01b7")
        buf.write("\7E\2\2\u01b7\u01b8\7\65\2\2\u01b8\u01b9\5@!\2\u01b9\u01ba")
        buf.write("\7\16\2\2\u01ba\u01bb\5B\"\2\u01bb?\3\2\2\2\u01bc\u01bd")
        buf.write("\5\u0088E\2\u01bdA\3\2\2\2\u01be\u01bf\5\u0088E\2\u01bf")
        buf.write("C\3\2\2\2\u01c0\u01d0\5\66\34\2\u01c1\u01c2\t\4\2\2\u01c2")
        buf.write("\u01c3\7\u0094\2\2\u01c3\u01c4\5\u00a4S\2\u01c4\u01cc")
        buf.write("\7\u0095\2\2\u01c5\u01c6\7\u0098\2\2\u01c6\u01c7\7\u0094")
        buf.write("\2\2\u01c7\u01c8\5\u00a4S\2\u01c8\u01c9\7\u0095\2\2\u01c9")
        buf.write("\u01cb\3\2\2\2\u01ca\u01c5\3\2\2\2\u01cb\u01ce\3\2\2\2")
        buf.write("\u01cc\u01ca\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01d0\3")
        buf.write("\2\2\2\u01ce\u01cc\3\2\2\2\u01cf\u01c0\3\2\2\2\u01cf\u01c1")
        buf.write("\3\2\2\2\u01d0E\3\2\2\2\u01d1\u01d2\5x=\2\u01d2\u01d5")
        buf.write("\7\u008b\2\2\u01d3\u01d6\5\u00b8]\2\u01d4\u01d6\7\24\2")
        buf.write("\2\u01d5\u01d3\3\2\2\2\u01d5\u01d4\3\2\2\2\u01d6G\3\2")
        buf.write("\2\2\u01d7\u01d8\7\25\2\2\u01d8\u01d9\7\36\2\2\u01d9\u01dc")
        buf.write("\5v<\2\u01da\u01db\7H\2\2\u01db\u01dd\5\u00b8]\2\u01dc")
        buf.write("\u01da\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01df\3\2\2\2")
        buf.write("\u01de\u01e0\5L\'\2\u01df\u01de\3\2\2\2\u01df\u01e0\3")
        buf.write("\2\2\2\u01e0\u01e3\3\2\2\2\u01e1\u01e2\7,\2\2\u01e2\u01e4")
        buf.write("\5\u0086D\2\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4")
        buf.write("I\3\2\2\2\u01e5\u01e6\7D\2\2\u01e6\u01eb\5v<\2\u01e7\u01e9")
        buf.write("\7\f\2\2\u01e8\u01e7\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9")
        buf.write("\u01ea\3\2\2\2\u01ea\u01ec\5\u0080A\2\u01eb\u01e8\3\2")
        buf.write("\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01ee")
        buf.write("\7:\2\2\u01ee\u01f3\5F$\2\u01ef\u01f0\7\u0098\2\2\u01f0")
        buf.write("\u01f2\5F$\2\u01f1\u01ef\3\2\2\2\u01f2\u01f5\3\2\2\2\u01f3")
        buf.write("\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f8\3\2\2\2")
        buf.write("\u01f5\u01f3\3\2\2\2\u01f6\u01f7\7H\2\2\u01f7\u01f9\5")
        buf.write("\u00b8]\2\u01f8\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9")
        buf.write("\u01fb\3\2\2\2\u01fa\u01fc\5L\'\2\u01fb\u01fa\3\2\2\2")
        buf.write("\u01fb\u01fc\3\2\2\2\u01fc\u01fe\3\2\2\2\u01fd\u01ff\5")
        buf.write("h\65\2\u01fe\u01fd\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ffK")
        buf.write("\3\2\2\2\u0200\u0201\7\64\2\2\u0201\u0202\7\17\2\2\u0202")
        buf.write("\u0207\5N(\2\u0203\u0204\7\u0098\2\2\u0204\u0206\5N(\2")
        buf.write("\u0205\u0203\3\2\2\2\u0206\u0209\3\2\2\2\u0207\u0205\3")
        buf.write("\2\2\2\u0207\u0208\3\2\2\2\u0208M\3\2\2\2\u0209\u0207")
        buf.write("\3\2\2\2\u020a\u020c\5\u00b8]\2\u020b\u020d\t\5\2\2\u020c")
        buf.write("\u020b\3\2\2\2\u020c\u020d\3\2\2\2\u020dO\3\2\2\2\u020e")
        buf.write("\u0213\5R*\2\u020f\u0210\7\u0098\2\2\u0210\u0212\5R*\2")
        buf.write("\u0211\u020f\3\2\2\2\u0212\u0215\3\2\2\2\u0213\u0211\3")
        buf.write("\2\2\2\u0213\u0214\3\2\2\2\u0214Q\3\2\2\2\u0215\u0213")
        buf.write("\3\2\2\2\u0216\u021a\5T+\2\u0217\u0219\5Z.\2\u0218\u0217")
        buf.write("\3\2\2\2\u0219\u021c\3\2\2\2\u021a\u0218\3\2\2\2\u021a")
        buf.write("\u021b\3\2\2\2\u021bS\3\2\2\2\u021c\u021a\3\2\2\2\u021d")
        buf.write("\u0222\5V,\2\u021e\u0220\7\f\2\2\u021f\u021e\3\2\2\2\u021f")
        buf.write("\u0220\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0223\5\u0080")
        buf.write("A\2\u0222\u021f\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0225")
        buf.write("\3\2\2\2\u0224\u0226\5X-\2\u0225\u0224\3\2\2\2\u0225\u0226")
        buf.write("\3\2\2\2\u0226U\3\2\2\2\u0227\u0230\5v<\2\u0228\u022e")
        buf.write("\5\66\34\2\u0229\u022a\7\u0094\2\2\u022a\u022b\5\66\34")
        buf.write("\2\u022b\u022c\7\u0095\2\2\u022c\u022e\3\2\2\2\u022d\u0228")
        buf.write("\3\2\2\2\u022d\u0229\3\2\2\2\u022e\u0230\3\2\2\2\u022f")
        buf.write("\u0227\3\2\2\2\u022f\u022d\3\2\2\2\u0230W\3\2\2\2\u0231")
        buf.write("\u0232\78\2\2\u0232\u0233\5\u0086D\2\u0233Y\3\2\2\2\u0234")
        buf.write("\u0235\7)\2\2\u0235\u023d\5T+\2\u0236\u0237\7\62\2\2\u0237")
        buf.write("\u023e\5\u00b8]\2\u0238\u0239\7F\2\2\u0239\u023a\7\u0094")
        buf.write("\2\2\u023a\u023b\5\u009cO\2\u023b\u023c\7\u0095\2\2\u023c")
        buf.write("\u023e\3\2\2\2\u023d\u0236\3\2\2\2\u023d\u0238\3\2\2\2")
        buf.write("\u023d\u023e\3\2\2\2\u023e[\3\2\2\2\u023f\u0240\7\u0094")
        buf.write("\2\2\u0240\u0241\5^\60\2\u0241\u0242\7\u0095\2\2\u0242")
        buf.write("\u0248\3\2\2\2\u0243\u0244\7\u0094\2\2\u0244\u0245\5\\")
        buf.write("/\2\u0245\u0246\7\u0095\2\2\u0246\u0248\3\2\2\2\u0247")
        buf.write("\u023f\3\2\2\2\u0247\u0243\3\2\2\2\u0248]\3\2\2\2\u0249")
        buf.write("\u024a\79\2\2\u024a\u024b\5`\61\2\u024b\u024d\5d\63\2")
        buf.write("\u024c\u024e\5L\'\2\u024d\u024c\3\2\2\2\u024d\u024e\3")
        buf.write("\2\2\2\u024e\u0250\3\2\2\2\u024f\u0251\5h\65\2\u0250\u024f")
        buf.write("\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0253\3\2\2\2\u0252")
        buf.write("\u0254\5j\66\2\u0253\u0252\3\2\2\2\u0253\u0254\3\2\2\2")
        buf.write("\u0254\u0256\3\2\2\2\u0255\u0257\5l\67\2\u0256\u0255\3")
        buf.write("\2\2\2\u0256\u0257\3\2\2\2\u0257_\3\2\2\2\u0258\u025b")
        buf.write("\7\u0083\2\2\u0259\u025b\5b\62\2\u025a\u0258\3\2\2\2\u025a")
        buf.write("\u0259\3\2\2\2\u025b\u0260\3\2\2\2\u025c\u025d\7\u0098")
        buf.write("\2\2\u025d\u025f\5b\62\2\u025e\u025c\3\2\2\2\u025f\u0262")
        buf.write("\3\2\2\2\u0260\u025e\3\2\2\2\u0260\u0261\3\2\2\2\u0261")
        buf.write("a\3\2\2\2\u0262\u0260\3\2\2\2\u0263\u0264\5t;\2\u0264")
        buf.write("\u0265\7\u0093\2\2\u0265\u0266\7\u0083\2\2\u0266\u0281")
        buf.write("\3\2\2\2\u0267\u026c\5x=\2\u0268\u026a\7\f\2\2\u0269\u0268")
        buf.write("\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026b\3\2\2\2\u026b")
        buf.write("\u026d\5\u0080A\2\u026c\u0269\3\2\2\2\u026c\u026d\3\2")
        buf.write("\2\2\u026d\u0281\3\2\2\2\u026e\u0273\5\u00aeX\2\u026f")
        buf.write("\u0271\7\f\2\2\u0270\u026f\3\2\2\2\u0270\u0271\3\2\2\2")
        buf.write("\u0271\u0272\3\2\2\2\u0272\u0274\5\u0080A\2\u0273\u0270")
        buf.write("\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0281\3\2\2\2\u0275")
        buf.write("\u0276\7\u00aa\2\2\u0276\u0278\7z\2\2\u0277\u0275\3\2")
        buf.write("\2\2\u0277\u0278\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027e")
        buf.write("\5\u00b8]\2\u027a\u027c\7\f\2\2\u027b\u027a\3\2\2\2\u027b")
        buf.write("\u027c\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027f\5\u0080")
        buf.write("A\2\u027e\u027b\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0281")
        buf.write("\3\2\2\2\u0280\u0263\3\2\2\2\u0280\u0267\3\2\2\2\u0280")
        buf.write("\u026e\3\2\2\2\u0280\u0277\3\2\2\2\u0281c\3\2\2\2\u0282")
        buf.write("\u0283\7\36\2\2\u0283\u0286\5P)\2\u0284\u0285\7H\2\2\u0285")
        buf.write("\u0287\5\u00b8]\2\u0286\u0284\3\2\2\2\u0286\u0287\3\2")
        buf.write("\2\2\u0287\u0292\3\2\2\2\u0288\u0289\7\37\2\2\u0289\u028a")
        buf.write("\7\17\2\2\u028a\u028f\5f\64\2\u028b\u028c\7\u0098\2\2")
        buf.write("\u028c\u028e\5f\64\2\u028d\u028b\3\2\2\2\u028e\u0291\3")
        buf.write("\2\2\2\u028f\u028d\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0293")
        buf.write("\3\2\2\2\u0291\u028f\3\2\2\2\u0292\u0288\3\2\2\2\u0292")
        buf.write("\u0293\3\2\2\2\u0293\u0296\3\2\2\2\u0294\u0295\7 \2\2")
        buf.write("\u0295\u0297\5\u00b8]\2\u0296\u0294\3\2\2\2\u0296\u0297")
        buf.write("\3\2\2\2\u0297e\3\2\2\2\u0298\u029a\5\u00b8]\2\u0299\u029b")
        buf.write("\t\5\2\2\u029a\u0299\3\2\2\2\u029a\u029b\3\2\2\2\u029b")
        buf.write("g\3\2\2\2\u029c\u02a7\7,\2\2\u029d\u029e\5\u0086D\2\u029e")
        buf.write("\u029f\7\u0098\2\2\u029f\u02a1\3\2\2\2\u02a0\u029d\3\2")
        buf.write("\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a8")
        buf.write("\5\u0086D\2\u02a3\u02a4\5\u0086D\2\u02a4\u02a5\7\61\2")
        buf.write("\2\u02a5\u02a6\5\u0086D\2\u02a6\u02a8\3\2\2\2\u02a7\u02a0")
        buf.write("\3\2\2\2\u02a7\u02a3\3\2\2\2\u02a8i\3\2\2\2\u02a9\u02aa")
        buf.write("\7N\2\2\u02aa\u02ab\7\u00a4\2\2\u02abk\3\2\2\2\u02ac\u02ad")
        buf.write("\7O\2\2\u02ad\u02ae\7\u00a4\2\2\u02aem\3\2\2\2\u02af\u02b0")
        buf.write("\7;\2\2\u02b0o\3\2\2\2\u02b1\u02b2\7\27\2\2\u02b2\u02b3")
        buf.write("\5v<\2\u02b3q\3\2\2\2\u02b4\u02b5\7o\2\2\u02b5\u02b6\7")
        buf.write("\u00a2\2\2\u02b6s\3\2\2\2\u02b7\u02bb\5\u0080A\2\u02b8")
        buf.write("\u02bc\7\u00a6\2\2\u02b9\u02ba\7\u0093\2\2\u02ba\u02bc")
        buf.write("\5\u0080A\2\u02bb\u02b8\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bcu\3\2\2\2\u02bd\u02be\5t;\2\u02be")
        buf.write("w\3\2\2\2\u02bf\u02c4\5\u0080A\2\u02c0\u02c2\5\u0084C")
        buf.write("\2\u02c1\u02c3\5\u0084C\2\u02c2\u02c1\3\2\2\2\u02c2\u02c3")
        buf.write("\3\2\2\2\u02c3\u02c5\3\2\2\2\u02c4\u02c0\3\2\2\2\u02c4")
        buf.write("\u02c5\3\2\2\2\u02c5y\3\2\2\2\u02c6\u02cb\5\u0080A\2\u02c7")
        buf.write("\u02c8\7\u0094\2\2\u02c8\u02c9\5\u0086D\2\u02c9\u02ca")
        buf.write("\7\u0095\2\2\u02ca\u02cc\3\2\2\2\u02cb\u02c7\3\2\2\2\u02cb")
        buf.write("\u02cc\3\2\2\2\u02cc\u02ce\3\2\2\2\u02cd\u02cf\t\5\2\2")
        buf.write("\u02ce\u02cd\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf{\3\2\2")
        buf.write("\2\u02d0\u02d1\t\6\2\2\u02d1}\3\2\2\2\u02d2\u02d3\5\u0086")
        buf.write("D\2\u02d3\u02d4\7\u0088\2\2\u02d4\u02d5\5\u0086D\2\u02d5")
        buf.write("\u02d6\7\u0088\2\2\u02d6\u02d7\5\u0086D\2\u02d7\u02d8")
        buf.write("\7\u0088\2\2\u02d8\u02d9\5\u0086D\2\u02d9\u02da\7\u0088")
        buf.write("\2\2\u02da\u02e0\5\u0086D\2\u02db\u02dc\7\u00a1\2\2\u02dc")
        buf.write("\u02dd\5\u0086D\2\u02dd\u02de\7\u0088\2\2\u02de\u02df")
        buf.write("\5\u0086D\2\u02df\u02e1\3\2\2\2\u02e0\u02db\3\2\2\2\u02e1")
        buf.write("\u02e2\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3\3\2\2\2")
        buf.write("\u02e3\177\3\2\2\2\u02e4\u02e7\5\u0082B\2\u02e5\u02e7")
        buf.write("\7\u00a8\2\2\u02e6\u02e4\3\2\2\2\u02e6\u02e5\3\2\2\2\u02e7")
        buf.write("\u0081\3\2\2\2\u02e8\u02e9\7\u00a7\2\2\u02e9\u0083\3\2")
        buf.write("\2\2\u02ea\u02ee\7\u00a6\2\2\u02eb\u02ec\7\u0093\2\2\u02ec")
        buf.write("\u02ee\5\u0080A\2\u02ed\u02ea\3\2\2\2\u02ed\u02eb\3\2")
        buf.write("\2\2\u02ee\u0085\3\2\2\2\u02ef\u02f0\t\7\2\2\u02f0\u0087")
        buf.write("\3\2\2\2\u02f1\u02f2\7\u00a2\2\2\u02f2\u0089\3\2\2\2\u02f3")
        buf.write("\u02f4\t\b\2\2\u02f4\u008b\3\2\2\2\u02f5\u02f7\7/\2\2")
        buf.write("\u02f6\u02f5\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f8\3")
        buf.write("\2\2\2\u02f8\u02f9\t\t\2\2\u02f9\u008d\3\2\2\2\u02fa\u02fb")
        buf.write("\7\u0096\2\2\u02fb\u0300\5\u0090I\2\u02fc\u02fd\7\u0098")
        buf.write("\2\2\u02fd\u02ff\5\u0090I\2\u02fe\u02fc\3\2\2\2\u02ff")
        buf.write("\u0302\3\2\2\2\u0300\u02fe\3\2\2\2\u0300\u0301\3\2\2\2")
        buf.write("\u0301\u0303\3\2\2\2\u0302\u0300\3\2\2\2\u0303\u0304\7")
        buf.write("\u0097\2\2\u0304\u0308\3\2\2\2\u0305\u0306\7\u0096\2\2")
        buf.write("\u0306\u0308\7\u0097\2\2\u0307\u02fa\3\2\2\2\u0307\u0305")
        buf.write("\3\2\2\2\u0308\u008f\3\2\2\2\u0309\u0315\5\u0088E\2\u030a")
        buf.write("\u0315\5\u0086D\2\u030b\u030c\7\u0088\2\2\u030c\u0315")
        buf.write("\5\u0086D\2\u030d\u0315\5\u008aF\2\u030e\u0315\7\u00a4")
        buf.write("\2\2\u030f\u0311\7/\2\2\u0310\u030f\3\2\2\2\u0310\u0311")
        buf.write("\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0315\t\t\2\2\u0313")
        buf.write("\u0315\5\u008eH\2\u0314\u0309\3\2\2\2\u0314\u030a\3\2")
        buf.write("\2\2\u0314\u030b\3\2\2\2\u0314\u030d\3\2\2\2\u0314\u030e")
        buf.write("\3\2\2\2\u0314\u0310\3\2\2\2\u0314\u0313\3\2\2\2\u0315")
        buf.write("\u0091\3\2\2\2\u0316\u0317\t\n\2\2\u0317\u0093\3\2\2\2")
        buf.write("\u0318\u0331\7T\2\2\u0319\u031b\7W\2\2\u031a\u031c\5\u0096")
        buf.write("L\2\u031b\u031a\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u0331")
        buf.write("\3\2\2\2\u031d\u031f\7U\2\2\u031e\u0320\7C\2\2\u031f\u031e")
        buf.write("\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0331\3\2\2\2\u0321")
        buf.write("\u0323\7V\2\2\u0322\u0324\5\u0098M\2\u0323\u0322\3\2\2")
        buf.write("\2\u0323\u0324\3\2\2\2\u0324\u0326\3\2\2\2\u0325\u0327")
        buf.write("\7C\2\2\u0326\u0325\3\2\2\2\u0326\u0327\3\2\2\2\u0327")
        buf.write("\u0331\3\2\2\2\u0328\u032a\7X\2\2\u0329\u032b\5\u0092")
        buf.write("J\2\u032a\u0329\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u032d")
        buf.write("\3\2\2\2\u032c\u032e\5\u009aN\2\u032d\u032c\3\2\2\2\u032d")
        buf.write("\u032e\3\2\2\2\u032e\u0331\3\2\2\2\u032f\u0331\7e\2\2")
        buf.write("\u0330\u0318\3\2\2\2\u0330\u0319\3\2\2\2\u0330\u031d\3")
        buf.write("\2\2\2\u0330\u0321\3\2\2\2\u0330\u0328\3\2\2\2\u0330\u032f")
        buf.write("\3\2\2\2\u0331\u0095\3\2\2\2\u0332\u0333\7\u0094\2\2\u0333")
        buf.write("\u0334\5\u0086D\2\u0334\u0335\7\u0095\2\2\u0335\u0097")
        buf.write("\3\2\2\2\u0336\u0337\7\u0094\2\2\u0337\u0338\5\u0086D")
        buf.write("\2\u0338\u0339\7\u0098\2\2\u0339\u033a\5\u0086D\2\u033a")
        buf.write("\u033b\7\u0095\2\2\u033b\u0099\3\2\2\2\u033c\u0342\7\u0094")
        buf.write("\2\2\u033d\u033e\5\u0086D\2\u033e\u033f\7\u0098\2\2\u033f")
        buf.write("\u0341\3\2\2\2\u0340\u033d\3\2\2\2\u0341\u0344\3\2\2\2")
        buf.write("\u0342\u0340\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0345\3")
        buf.write("\2\2\2\u0344\u0342\3\2\2\2\u0345\u0346\5\u0086D\2\u0346")
        buf.write("\u0347\7\u0095\2\2\u0347\u009b\3\2\2\2\u0348\u034d\5\u0080")
        buf.write("A\2\u0349\u034a\7\u0098\2\2\u034a\u034c\5\u0080A\2\u034b")
        buf.write("\u0349\3\2\2\2\u034c\u034f\3\2\2\2\u034d\u034b\3\2\2\2")
        buf.write("\u034d\u034e\3\2\2\2\u034e\u009d\3\2\2\2\u034f\u034d\3")
        buf.write("\2\2\2\u0350\u0355\5v<\2\u0351\u0352\7\u0098\2\2\u0352")
        buf.write("\u0354\5v<\2\u0353\u0351\3\2\2\2\u0354\u0357\3\2\2\2\u0355")
        buf.write("\u0353\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u009f\3\2\2\2")
        buf.write("\u0357\u0355\3\2\2\2\u0358\u0359\7\u0094\2\2\u0359\u035e")
        buf.write("\5z>\2\u035a\u035b\7\u0098\2\2\u035b\u035d\5z>\2\u035c")
        buf.write("\u035a\3\2\2\2\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2")
        buf.write("\u035e\u035f\3\2\2\2\u035f\u0361\3\2\2\2\u0360\u035e\3")
        buf.write("\2\2\2\u0361\u0362\7\u0095\2\2\u0362\u00a1\3\2\2\2\u0363")
        buf.write("\u0368\5\u00b8]\2\u0364\u0365\7\u0098\2\2\u0365\u0367")
        buf.write("\5\u00b8]\2\u0366\u0364\3\2\2\2\u0367\u036a\3\2\2\2\u0368")
        buf.write("\u0366\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u00a3\3\2\2\2")
        buf.write("\u036a\u0368\3\2\2\2\u036b\u0370\5\u00a8U\2\u036c\u036d")
        buf.write("\7\u0098\2\2\u036d\u036f\5\u00a8U\2\u036e\u036c\3\2\2")
        buf.write("\2\u036f\u0372\3\2\2\2\u0370\u036e\3\2\2\2\u0370\u0371")
        buf.write("\3\2\2\2\u0371\u00a5\3\2\2\2\u0372\u0370\3\2\2\2\u0373")
        buf.write("\u0376\7\60\2\2\u0374\u0376\5\u0090I\2\u0375\u0373\3\2")
        buf.write("\2\2\u0375\u0374\3\2\2\2\u0376\u00a7\3\2\2\2\u0377\u037a")
        buf.write("\5\u00b8]\2\u0378\u037a\7\24\2\2\u0379\u0377\3\2\2\2\u0379")
        buf.write("\u0378\3\2\2\2\u037a\u00a9\3\2\2\2\u037b\u037c\7!\2\2")
        buf.write("\u037c\u037d\7\33\2\2\u037d\u00ab\3\2\2\2\u037e\u037f")
        buf.write("\7!\2\2\u037f\u0380\7/\2\2\u0380\u0381\7\33\2\2\u0381")
        buf.write("\u00ad\3\2\2\2\u0382\u0385\5\u00b0Y\2\u0383\u0385\5\u00b2")
        buf.write("Z\2\u0384\u0382\3\2\2\2\u0384\u0383\3\2\2\2\u0385\u00af")
        buf.write("\3\2\2\2\u0386\u0387\5\u0082B\2\u0387\u0388\7\u0094\2")
        buf.write("\2\u0388\u0389\5\u00b4[\2\u0389\u038b\7\u0095\2\2\u038a")
        buf.write("\u038c\5\u0084C\2\u038b\u038a\3\2\2\2\u038b\u038c\3\2")
        buf.write("\2\2\u038c\u00b1\3\2\2\2\u038d\u038e\t\13\2\2\u038e\u0390")
        buf.write("\7\u0094\2\2\u038f\u0391\t\f\2\2\u0390\u038f\3\2\2\2\u0390")
        buf.write("\u0391\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0393\5\u00b6")
        buf.write("\\\2\u0393\u0394\7\u0095\2\2\u0394\u03a0\3\2\2\2\u0395")
        buf.write("\u0396\7g\2\2\u0396\u039c\7\u0094\2\2\u0397\u039d\7\u0083")
        buf.write("\2\2\u0398\u039a\7\7\2\2\u0399\u0398\3\2\2\2\u0399\u039a")
        buf.write("\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039d\5\u00b6\\\2\u039c")
        buf.write("\u0397\3\2\2\2\u039c\u0399\3\2\2\2\u039d\u039e\3\2\2\2")
        buf.write("\u039e\u03a0\7\u0095\2\2\u039f\u038d\3\2\2\2\u039f\u0395")
        buf.write("\3\2\2\2\u03a0\u00b3\3\2\2\2\u03a1\u03a6\5\u0090I\2\u03a2")
        buf.write("\u03a6\5x=\2\u03a3\u03a6\5\u00aeX\2\u03a4\u03a6\5\u00b8")
        buf.write("]\2\u03a5\u03a1\3\2\2\2\u03a5\u03a2\3\2\2\2\u03a5\u03a3")
        buf.write("\3\2\2\2\u03a5\u03a4\3\2\2\2\u03a6\u03b0\3\2\2\2\u03a7")
        buf.write("\u03ac\7\u0098\2\2\u03a8\u03ad\5\u0090I\2\u03a9\u03ad")
        buf.write("\5x=\2\u03aa\u03ad\5\u00aeX\2\u03ab\u03ad\5\u00b8]\2\u03ac")
        buf.write("\u03a8\3\2\2\2\u03ac\u03a9\3\2\2\2\u03ac\u03aa\3\2\2\2")
        buf.write("\u03ac\u03ab\3\2\2\2\u03ad\u03af\3\2\2\2\u03ae\u03a7\3")
        buf.write("\2\2\2\u03af\u03b2\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b0\u03b1")
        buf.write("\3\2\2\2\u03b1\u00b5\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b3")
        buf.write("\u03b8\5\u0090I\2\u03b4\u03b8\5x=\2\u03b5\u03b8\5\u00ae")
        buf.write("X\2\u03b6\u03b8\5\u00b8]\2\u03b7\u03b3\3\2\2\2\u03b7\u03b4")
        buf.write("\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7\u03b6\3\2\2\2\u03b8")
        buf.write("\u00b7\3\2\2\2\u03b9\u03ba\b]\1\2\u03ba\u03bb\t\r\2\2")
        buf.write("\u03bb\u03c5\5\u00b8]\6\u03bc\u03bd\5\u00ba^\2\u03bd\u03bf")
        buf.write("\7(\2\2\u03be\u03c0\7/\2\2\u03bf\u03be\3\2\2\2\u03bf\u03c0")
        buf.write("\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\t\16\2\2\u03c2")
        buf.write("\u03c5\3\2\2\2\u03c3\u03c5\5\u00ba^\2\u03c4\u03b9\3\2")
        buf.write("\2\2\u03c4\u03bc\3\2\2\2\u03c4\u03c3\3\2\2\2\u03c5\u03cc")
        buf.write("\3\2\2\2\u03c6\u03c7\f\5\2\2\u03c7\u03c8\5\u00c2b\2\u03c8")
        buf.write("\u03c9\5\u00b8]\6\u03c9\u03cb\3\2\2\2\u03ca\u03c6\3\2")
        buf.write("\2\2\u03cb\u03ce\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd")
        buf.write("\3\2\2\2\u03cd\u00b9\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf")
        buf.write("\u03d2\b^\1\2\u03d0\u03d1\7\u00aa\2\2\u03d1\u03d3\7z\2")
        buf.write("\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4")
        buf.write("\3\2\2\2\u03d4\u03d5\5\u00bc_\2\u03d5\u03fb\3\2\2\2\u03d6")
        buf.write("\u03d7\f\6\2\2\u03d7\u03d8\5\u00c0a\2\u03d8\u03d9\5\u00ba")
        buf.write("^\7\u03d9\u03fa\3\2\2\2\u03da\u03dc\f\b\2\2\u03db\u03dd")
        buf.write("\7/\2\2\u03dc\u03db\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd")
        buf.write("\u03de\3\2\2\2\u03de\u03df\7\"\2\2\u03df\u03e2\7\u0094")
        buf.write("\2\2\u03e0\u03e3\5\66\34\2\u03e1\u03e3\5\u00a2R\2\u03e2")
        buf.write("\u03e0\3\2\2\2\u03e2\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2")
        buf.write("\u03e4\u03e5\7\u0095\2\2\u03e5\u03fa\3\2\2\2\u03e6\u03e7")
        buf.write("\f\7\2\2\u03e7\u03e8\7(\2\2\u03e8\u03fa\5\u008cG\2\u03e9")
        buf.write("\u03ea\f\5\2\2\u03ea\u03eb\5\u00c0a\2\u03eb\u03ec\t\17")
        buf.write("\2\2\u03ec\u03ed\7\u0094\2\2\u03ed\u03ee\5\66\34\2\u03ee")
        buf.write("\u03ef\7\u0095\2\2\u03ef\u03fa\3\2\2\2\u03f0\u03f2\f\4")
        buf.write("\2\2\u03f1\u03f3\7/\2\2\u03f2\u03f1\3\2\2\2\u03f2\u03f3")
        buf.write("\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f5\7+\2\2\u03f5")
        buf.write("\u03f7\5\u00ba^\2\u03f6\u03f8\7\u00a2\2\2\u03f7\u03f6")
        buf.write("\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa\3\2\2\2\u03f9")
        buf.write("\u03d6\3\2\2\2\u03f9\u03da\3\2\2\2\u03f9\u03e6\3\2\2\2")
        buf.write("\u03f9\u03e9\3\2\2\2\u03f9\u03f0\3\2\2\2\u03fa\u03fd\3")
        buf.write("\2\2\2\u03fb\u03f9\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u00bb")
        buf.write("\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fe\u03ff\b_\1\2\u03ff")
        buf.write("\u0415\5\u0090I\2\u0400\u0415\5x=\2\u0401\u0415\5\u00ae")
        buf.write("X\2\u0402\u0403\5\u00be`\2\u0403\u0404\5\u00bc_\7\u0404")
        buf.write("\u0415\3\2\2\2\u0405\u0406\7\u0094\2\2\u0406\u040b\5\u00b8")
        buf.write("]\2\u0407\u0408\7\u0098\2\2\u0408\u040a\5\u00b8]\2\u0409")
        buf.write("\u0407\3\2\2\2\u040a\u040d\3\2\2\2\u040b\u0409\3\2\2\2")
        buf.write("\u040b\u040c\3\2\2\2\u040c\u040e\3\2\2\2\u040d\u040b\3")
        buf.write("\2\2\2\u040e\u040f\7\u0095\2\2\u040f\u0415\3\2\2\2\u0410")
        buf.write("\u0411\7\u0094\2\2\u0411\u0412\5\66\34\2\u0412\u0413\7")
        buf.write("\u0095\2\2\u0413\u0415\3\2\2\2\u0414\u03fe\3\2\2\2\u0414")
        buf.write("\u0400\3\2\2\2\u0414\u0401\3\2\2\2\u0414\u0402\3\2\2\2")
        buf.write("\u0414\u0405\3\2\2\2\u0414\u0410\3\2\2\2\u0415\u0420\3")
        buf.write("\2\2\2\u0416\u0417\f\4\2\2\u0417\u0418\5\u00c4c\2\u0418")
        buf.write("\u0419\5\u00bc_\5\u0419\u041f\3\2\2\2\u041a\u041b\f\3")
        buf.write("\2\2\u041b\u041c\5\u00c6d\2\u041c\u041d\5\u00bc_\4\u041d")
        buf.write("\u041f\3\2\2\2\u041e\u0416\3\2\2\2\u041e\u041a\3\2\2\2")
        buf.write("\u041f\u0422\3\2\2\2\u0420\u041e\3\2\2\2\u0420\u0421\3")
        buf.write("\2\2\2\u0421\u00bd\3\2\2\2\u0422\u0420\3\2\2\2\u0423\u0424")
        buf.write("\t\20\2\2\u0424\u00bf\3\2\2\2\u0425\u0438\7\u008b\2\2")
        buf.write("\u0426\u0438\7\u008c\2\2\u0427\u0438\7\u008d\2\2\u0428")
        buf.write("\u0429\7\u008d\2\2\u0429\u0438\7\u008b\2\2\u042a\u042b")
        buf.write("\7\u008c\2\2\u042b\u0438\7\u008b\2\2\u042c\u042d\7\u008d")
        buf.write("\2\2\u042d\u0438\7\u008c\2\2\u042e\u042f\7\u008e\2\2\u042f")
        buf.write("\u0438\7\u008b\2\2\u0430\u0431\7\u008d\2\2\u0431\u0432")
        buf.write("\7\u008b\2\2\u0432\u0438\7\u008c\2\2\u0433\u0434\7\u009a")
        buf.write("\2\2\u0434\u0438\7\u008c\2\2\u0435\u0436\7\u008d\2\2\u0436")
        buf.write("\u0438\7\u009a\2\2\u0437\u0425\3\2\2\2\u0437\u0426\3\2")
        buf.write("\2\2\u0437\u0427\3\2\2\2\u0437\u0428\3\2\2\2\u0437\u042a")
        buf.write("\3\2\2\2\u0437\u042c\3\2\2\2\u0437\u042e\3\2\2\2\u0437")
        buf.write("\u0430\3\2\2\2\u0437\u0433\3\2\2\2\u0437\u0435\3\2\2\2")
        buf.write("\u0438\u00c1\3\2\2\2\u0439\u0441\7\t\2\2\u043a\u043b\7")
        buf.write("\u0091\2\2\u043b\u0441\7\u0091\2\2\u043c\u0441\7I\2\2")
        buf.write("\u043d\u0441\7\63\2\2\u043e\u043f\7\u0090\2\2\u043f\u0441")
        buf.write("\7\u0090\2\2\u0440\u0439\3\2\2\2\u0440\u043a\3\2\2\2\u0440")
        buf.write("\u043c\3\2\2\2\u0440\u043d\3\2\2\2\u0440\u043e\3\2\2\2")
        buf.write("\u0441\u00c3\3\2\2\2\u0442\u0443\7\u008d\2\2\u0443\u044a")
        buf.write("\7\u008d\2\2\u0444\u0445\7\u008c\2\2\u0445\u044a\7\u008c")
        buf.write("\2\2\u0446\u044a\7\u0091\2\2\u0447\u044a\7\u0092\2\2\u0448")
        buf.write("\u044a\7\u0090\2\2\u0449\u0442\3\2\2\2\u0449\u0444\3\2")
        buf.write("\2\2\u0449\u0446\3\2\2\2\u0449\u0447\3\2\2\2\u0449\u0448")
        buf.write("\3\2\2\2\u044a\u00c5\3\2\2\2\u044b\u044c\t\21\2\2\u044c")
        buf.write("\u00c7\3\2\2\2\u0086\u00c9\u00cc\u00d2\u00d7\u00d9\u00de")
        buf.write("\u00e1\u00e4\u00e9\u00f5\u00fd\u0101\u0106\u010e\u0117")
        buf.write("\u011f\u012f\u0148\u0151\u0157\u015e\u0163\u0165\u0169")
        buf.write("\u016c\u0173\u0180\u0188\u018f\u0199\u019e\u01ad\u01b1")
        buf.write("\u01cc\u01cf\u01d5\u01dc\u01df\u01e3\u01e8\u01eb\u01f3")
        buf.write("\u01f8\u01fb\u01fe\u0207\u020c\u0213\u021a\u021f\u0222")
        buf.write("\u0225\u022d\u022f\u023d\u0247\u024d\u0250\u0253\u0256")
        buf.write("\u025a\u0260\u0269\u026c\u0270\u0273\u0277\u027b\u027e")
        buf.write("\u0280\u0286\u028f\u0292\u0296\u029a\u02a0\u02a7\u02bb")
        buf.write("\u02c2\u02c4\u02cb\u02ce\u02e2\u02e6\u02ed\u02f6\u0300")
        buf.write("\u0307\u0310\u0314\u031b\u031f\u0323\u0326\u032a\u032d")
        buf.write("\u0330\u0342\u034d\u0355\u035e\u0368\u0370\u0375\u0379")
        buf.write("\u0384\u038b\u0390\u0399\u039c\u039f\u03a5\u03ac\u03b0")
        buf.write("\u03b7\u03bf\u03c4\u03cc\u03d2\u03dc\u03e2\u03f2\u03f7")
        buf.write("\u03f9\u03fb\u040b\u0414\u041e\u0420\u0437\u0440\u0449")
        return buf.getvalue()


class evaql_parser ( Parser ):

    grammarFileName = "evaql_parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ALL'", "'ALTER'", "'AND'", "'ANY'", 
                     "'ANYDIM'", "'AS'", "'ASC'", "'BLOB'", "'BY'", "'COLUMN'", 
                     "'CREATE'", "'DATA'", "'DATABASE'", "'DEFAULT'", "'DELETE'", 
                     "'DESC'", "'DESCRIBE'", "'DISTINCT'", "'DROP'", "'EXIT'", 
                     "'EXISTS'", "'EXPLAIN'", "'FALSE'", "'FROM'", "'GROUP'", 
                     "'HAVING'", "'IF'", "'IN'", "'INFILE'", "'INDIR'", 
                     "'INTO'", "'INDEX'", "'INSERT'", "'IS'", "'JOIN'", 
                     "'KEY'", "'LIKE'", "'LIMIT'", "'LOAD'", "'NO'", "'NOT'", 
                     "'NULL'", "'OFFSET'", "'ON'", "'OR'", "'ORDER'", "'PATH'", 
                     "'PRIMARY'", "'REFERENCES'", "'SAMPLE'", "'SELECT'", 
                     "'SET'", "'SHUTDOWN'", "'SOME'", "'TABLE'", "'TRUE'", 
                     "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLOCK'", "'UNSIGNED'", 
                     "'UPDATE'", "'UPLOAD'", "'USING'", "'VALUES'", "'WHERE'", 
                     "'XOR'", "'WITH'", "'FORMAT'", "'CSV'", "'VIDEO'", 
                     "'ERROR_WITHIN'", "'AT_CONFIDENCE'", "'BTREE'", "'HASH'", 
                     "'OBJECT_DETECTION'", "'ACTION_CLASSICATION'", "'BOOLEAN'", 
                     "'INTEGER'", "'FLOAT'", "'TEXT'", "'NDARRAY'", "'INT8'", 
                     "'UINT8'", "'INT16'", "'INT32'", "'INT64'", "'UNICODE'", 
                     "'BOOL'", "'FLOAT32'", "'FLOAT64'", "'DECIMAL'", "'STR'", 
                     "'DATETIME'", "'ANYTYPE'", "'AVG'", "'COUNT'", "'MAX'", 
                     "'MIN'", "'STD'", "'SUM'", "'FCOUNT'", "'AUTO_INCREMENT'", 
                     "'COLUMNS'", "'HELP'", "'TEMPTABLE'", "'VALUE'", "'UDF'", 
                     "'INPUT'", "'OUTPUT'", "'TYPE'", "'IMPL'", "'MATERIALIZED'", 
                     "'VIEW'", "'ABS'", "':='", "'+='", "'-='", "'*='", 
                     "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
                     "'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", "'='", 
                     "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
                     "'('", "')'", "'['", "']'", "','", "';'", "'@'", "'0'", 
                     "'1'", "'2'", "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SPEC_EVAQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "ALL", "ALTER", "AND", "ANY", "ANYDIM", 
                      "AS", "ASC", "BLOB", "BY", "COLUMN", "CREATE", "DATA", 
                      "DATABASE", "DEFAULT", "DELETE", "DESC", "DESCRIBE", 
                      "DISTINCT", "DROP", "EXIT", "EXISTS", "EXPLAIN", "FALSE", 
                      "FROM", "GROUP", "HAVING", "IF", "IN", "INFILE", "INDIR", 
                      "INTO", "INDEX", "INSERT", "IS", "JOIN", "KEY", "LIKE", 
                      "LIMIT", "LOAD", "NO", "NOT", "NULL_LITERAL", "OFFSET", 
                      "ON", "OR", "ORDER", "PATH", "PRIMARY", "REFERENCES", 
                      "SAMPLE", "SELECT", "SET", "SHUTDOWN", "SOME", "TABLE", 
                      "TRUE", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNSIGNED", 
                      "UPDATE", "UPLOAD", "USING", "VALUES", "WHERE", "XOR", 
                      "WITH", "FORMAT", "CSV", "VIDEO", "ERROR_BOUNDS", 
                      "CONFIDENCE_LEVEL", "BTREE", "HASH", "OBJECT_DETECTION", 
                      "ACTION_CLASSICATION", "BOOLEAN", "INTEGER", "FLOAT", 
                      "TEXT", "NDARRAY", "INT8", "UINT8", "INT16", "INT32", 
                      "INT64", "UNICODE", "BOOL", "FLOAT32", "FLOAT64", 
                      "DECIMAL", "STR", "DATETIME", "ANYTYPE", "AVG", "COUNT", 
                      "MAX", "MIN", "STD", "SUM", "FCOUNT", "AUTO_INCREMENT", 
                      "COLUMNS", "HELP", "TEMPTABLE", "VALUE", "UDF", "INPUT", 
                      "OUTPUT", "TYPE", "IMPL", "MATERIALIZED", "VIEW", 
                      "ABS", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", 
                      "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                      "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
                      "DOT", "LR_BRACKET", "RR_BRACKET", "LR_SQ_BRACKET", 
                      "RR_SQ_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
                      "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
                      "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
                      "STRING_LITERAL", "DECIMAL_LITERAL", "REAL_LITERAL", 
                      "NULL_SPEC_LITERAL", "DOT_ID", "ID", "REVERSE_QUOTE_ID", 
                      "STRING_USER_NAME", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION" ]

    RULE_root = 0
    RULE_sqlStatements = 1
    RULE_sqlStatement = 2
    RULE_emptyStatement = 3
    RULE_ddlStatement = 4
    RULE_dmlStatement = 5
    RULE_utilityStatement = 6
    RULE_createDatabase = 7
    RULE_createIndex = 8
    RULE_createTable = 9
    RULE_createUdf = 10
    RULE_createMaterializedView = 11
    RULE_udfName = 12
    RULE_udfType = 13
    RULE_udfImpl = 14
    RULE_indexType = 15
    RULE_createDefinitions = 16
    RULE_createDefinition = 17
    RULE_columnDefinition = 18
    RULE_columnConstraint = 19
    RULE_indexColumnDefinition = 20
    RULE_dropDatabase = 21
    RULE_dropIndex = 22
    RULE_dropTable = 23
    RULE_deleteStatement = 24
    RULE_insertStatement = 25
    RULE_selectStatement = 26
    RULE_updateStatement = 27
    RULE_loadStatement = 28
    RULE_fileOptions = 29
    RULE_uploadStatement = 30
    RULE_fileName = 31
    RULE_videoBlob = 32
    RULE_insertStatementValue = 33
    RULE_updatedElement = 34
    RULE_singleDeleteStatement = 35
    RULE_singleUpdateStatement = 36
    RULE_orderByClause = 37
    RULE_orderByExpression = 38
    RULE_tableSources = 39
    RULE_tableSource = 40
    RULE_tableSourceItemWithSample = 41
    RULE_tableSourceItem = 42
    RULE_sampleClause = 43
    RULE_joinPart = 44
    RULE_queryExpression = 45
    RULE_querySpecification = 46
    RULE_selectElements = 47
    RULE_selectElement = 48
    RULE_fromClause = 49
    RULE_groupByItem = 50
    RULE_limitClause = 51
    RULE_errorBoundsExpression = 52
    RULE_confidenceLevelExpression = 53
    RULE_shutdownStatement = 54
    RULE_simpleDescribeStatement = 55
    RULE_helpStatement = 56
    RULE_fullId = 57
    RULE_tableName = 58
    RULE_fullColumnName = 59
    RULE_indexColumnName = 60
    RULE_userName = 61
    RULE_uuidSet = 62
    RULE_uid = 63
    RULE_simpleId = 64
    RULE_dottedId = 65
    RULE_decimalLiteral = 66
    RULE_stringLiteral = 67
    RULE_booleanLiteral = 68
    RULE_nullNotnull = 69
    RULE_arrayLiteral = 70
    RULE_constant = 71
    RULE_arrayType = 72
    RULE_dataType = 73
    RULE_lengthOneDimension = 74
    RULE_lengthTwoDimension = 75
    RULE_lengthDimensionList = 76
    RULE_uidList = 77
    RULE_tables = 78
    RULE_indexColumnNames = 79
    RULE_expressions = 80
    RULE_expressionsWithDefaults = 81
    RULE_defaultValue = 82
    RULE_expressionOrDefault = 83
    RULE_ifExists = 84
    RULE_ifNotExists = 85
    RULE_functionCall = 86
    RULE_udfFunction = 87
    RULE_aggregateWindowedFunction = 88
    RULE_functionArgs = 89
    RULE_functionArg = 90
    RULE_expression = 91
    RULE_predicate = 92
    RULE_expressionAtom = 93
    RULE_unaryOperator = 94
    RULE_comparisonOperator = 95
    RULE_logicalOperator = 96
    RULE_bitOperator = 97
    RULE_mathOperator = 98

    ruleNames =  [ "root", "sqlStatements", "sqlStatement", "emptyStatement", 
                   "ddlStatement", "dmlStatement", "utilityStatement", "createDatabase", 
                   "createIndex", "createTable", "createUdf", "createMaterializedView", 
                   "udfName", "udfType", "udfImpl", "indexType", "createDefinitions", 
                   "createDefinition", "columnDefinition", "columnConstraint", 
                   "indexColumnDefinition", "dropDatabase", "dropIndex", 
                   "dropTable", "deleteStatement", "insertStatement", "selectStatement", 
                   "updateStatement", "loadStatement", "fileOptions", "uploadStatement", 
                   "fileName", "videoBlob", "insertStatementValue", "updatedElement", 
                   "singleDeleteStatement", "singleUpdateStatement", "orderByClause", 
                   "orderByExpression", "tableSources", "tableSource", "tableSourceItemWithSample", 
                   "tableSourceItem", "sampleClause", "joinPart", "queryExpression", 
                   "querySpecification", "selectElements", "selectElement", 
                   "fromClause", "groupByItem", "limitClause", "errorBoundsExpression", 
                   "confidenceLevelExpression", "shutdownStatement", "simpleDescribeStatement", 
                   "helpStatement", "fullId", "tableName", "fullColumnName", 
                   "indexColumnName", "userName", "uuidSet", "uid", "simpleId", 
                   "dottedId", "decimalLiteral", "stringLiteral", "booleanLiteral", 
                   "nullNotnull", "arrayLiteral", "constant", "arrayType", 
                   "dataType", "lengthOneDimension", "lengthTwoDimension", 
                   "lengthDimensionList", "uidList", "tables", "indexColumnNames", 
                   "expressions", "expressionsWithDefaults", "defaultValue", 
                   "expressionOrDefault", "ifExists", "ifNotExists", "functionCall", 
                   "udfFunction", "aggregateWindowedFunction", "functionArgs", 
                   "functionArg", "expression", "predicate", "expressionAtom", 
                   "unaryOperator", "comparisonOperator", "logicalOperator", 
                   "bitOperator", "mathOperator" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_EVAQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    ALL=5
    ALTER=6
    AND=7
    ANY=8
    ANYDIM=9
    AS=10
    ASC=11
    BLOB=12
    BY=13
    COLUMN=14
    CREATE=15
    DATA=16
    DATABASE=17
    DEFAULT=18
    DELETE=19
    DESC=20
    DESCRIBE=21
    DISTINCT=22
    DROP=23
    EXIT=24
    EXISTS=25
    EXPLAIN=26
    FALSE=27
    FROM=28
    GROUP=29
    HAVING=30
    IF=31
    IN=32
    INFILE=33
    INDIR=34
    INTO=35
    INDEX=36
    INSERT=37
    IS=38
    JOIN=39
    KEY=40
    LIKE=41
    LIMIT=42
    LOAD=43
    NO=44
    NOT=45
    NULL_LITERAL=46
    OFFSET=47
    ON=48
    OR=49
    ORDER=50
    PATH=51
    PRIMARY=52
    REFERENCES=53
    SAMPLE=54
    SELECT=55
    SET=56
    SHUTDOWN=57
    SOME=58
    TABLE=59
    TRUE=60
    UNION=61
    UNIQUE=62
    UNKNOWN=63
    UNLOCK=64
    UNSIGNED=65
    UPDATE=66
    UPLOAD=67
    USING=68
    VALUES=69
    WHERE=70
    XOR=71
    WITH=72
    FORMAT=73
    CSV=74
    VIDEO=75
    ERROR_BOUNDS=76
    CONFIDENCE_LEVEL=77
    BTREE=78
    HASH=79
    OBJECT_DETECTION=80
    ACTION_CLASSICATION=81
    BOOLEAN=82
    INTEGER=83
    FLOAT=84
    TEXT=85
    NDARRAY=86
    INT8=87
    UINT8=88
    INT16=89
    INT32=90
    INT64=91
    UNICODE=92
    BOOL=93
    FLOAT32=94
    FLOAT64=95
    DECIMAL=96
    STR=97
    DATETIME=98
    ANYTYPE=99
    AVG=100
    COUNT=101
    MAX=102
    MIN=103
    STD=104
    SUM=105
    FCOUNT=106
    AUTO_INCREMENT=107
    COLUMNS=108
    HELP=109
    TEMPTABLE=110
    VALUE=111
    UDF=112
    INPUT=113
    OUTPUT=114
    TYPE=115
    IMPL=116
    MATERIALIZED=117
    VIEW=118
    ABS=119
    VAR_ASSIGN=120
    PLUS_ASSIGN=121
    MINUS_ASSIGN=122
    MULT_ASSIGN=123
    DIV_ASSIGN=124
    MOD_ASSIGN=125
    AND_ASSIGN=126
    XOR_ASSIGN=127
    OR_ASSIGN=128
    STAR=129
    DIVIDE=130
    MODULE=131
    PLUS=132
    MINUSMINUS=133
    MINUS=134
    DIV=135
    MOD=136
    EQUAL_SYMBOL=137
    GREATER_SYMBOL=138
    LESS_SYMBOL=139
    EXCLAMATION_SYMBOL=140
    BIT_NOT_OP=141
    BIT_OR_OP=142
    BIT_AND_OP=143
    BIT_XOR_OP=144
    DOT=145
    LR_BRACKET=146
    RR_BRACKET=147
    LR_SQ_BRACKET=148
    RR_SQ_BRACKET=149
    COMMA=150
    SEMI=151
    AT_SIGN=152
    ZERO_DECIMAL=153
    ONE_DECIMAL=154
    TWO_DECIMAL=155
    SINGLE_QUOTE_SYMB=156
    DOUBLE_QUOTE_SYMB=157
    REVERSE_QUOTE_SYMB=158
    COLON_SYMB=159
    STRING_LITERAL=160
    DECIMAL_LITERAL=161
    REAL_LITERAL=162
    NULL_SPEC_LITERAL=163
    DOT_ID=164
    ID=165
    REVERSE_QUOTE_ID=166
    STRING_USER_NAME=167
    LOCAL_ID=168
    GLOBAL_ID=169
    ERROR_RECONGNIGION=170

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(evaql_parser.EOF, 0)

        def sqlStatements(self):
            return self.getTypedRuleContext(evaql_parser.SqlStatementsContext,0)


        def MINUSMINUS(self):
            return self.getToken(evaql_parser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = evaql_parser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & ((1 << (evaql_parser.CREATE - 15)) | (1 << (evaql_parser.DELETE - 15)) | (1 << (evaql_parser.DESCRIBE - 15)) | (1 << (evaql_parser.DROP - 15)) | (1 << (evaql_parser.INSERT - 15)) | (1 << (evaql_parser.LOAD - 15)) | (1 << (evaql_parser.SELECT - 15)) | (1 << (evaql_parser.UPDATE - 15)) | (1 << (evaql_parser.UPLOAD - 15)))) != 0) or _la==evaql_parser.HELP or _la==evaql_parser.SEMI:
                self.state = 198
                self.sqlStatements()


            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.MINUSMINUS:
                self.state = 201
                self.match(evaql_parser.MINUSMINUS)


            self.state = 204
            self.match(evaql_parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.SqlStatementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.SqlStatementContext,i)


        def emptyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.EmptyStatementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.EmptyStatementContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.SEMI)
            else:
                return self.getToken(evaql_parser.SEMI, i)

        def MINUSMINUS(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.MINUSMINUS)
            else:
                return self.getToken(evaql_parser.MINUSMINUS, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_sqlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatements" ):
                listener.enterSqlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatements" ):
                listener.exitSqlStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlStatements" ):
                return visitor.visitSqlStatements(self)
            else:
                return visitor.visitChildren(self)




    def sqlStatements(self):

        localctx = evaql_parser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 213
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [evaql_parser.CREATE, evaql_parser.DELETE, evaql_parser.DESCRIBE, evaql_parser.DROP, evaql_parser.INSERT, evaql_parser.LOAD, evaql_parser.SELECT, evaql_parser.UPDATE, evaql_parser.UPLOAD, evaql_parser.HELP]:
                        self.state = 206
                        self.sqlStatement()
                        self.state = 208
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==evaql_parser.MINUSMINUS:
                            self.state = 207
                            self.match(evaql_parser.MINUSMINUS)


                        self.state = 210
                        self.match(evaql_parser.SEMI)
                        pass
                    elif token in [evaql_parser.SEMI]:
                        self.state = 212
                        self.emptyStatement()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.CREATE, evaql_parser.DELETE, evaql_parser.DESCRIBE, evaql_parser.DROP, evaql_parser.INSERT, evaql_parser.LOAD, evaql_parser.SELECT, evaql_parser.UPDATE, evaql_parser.UPLOAD, evaql_parser.HELP]:
                self.state = 218
                self.sqlStatement()
                self.state = 223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 220
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.MINUSMINUS:
                        self.state = 219
                        self.match(evaql_parser.MINUSMINUS)


                    self.state = 222
                    self.match(evaql_parser.SEMI)


                pass
            elif token in [evaql_parser.SEMI]:
                self.state = 225
                self.emptyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(evaql_parser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(evaql_parser.DmlStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(evaql_parser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlStatement" ):
                return visitor.visitSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def sqlStatement(self):

        localctx = evaql_parser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sqlStatement)
        try:
            self.state = 231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.CREATE, evaql_parser.DROP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 228
                self.ddlStatement()
                pass
            elif token in [evaql_parser.DELETE, evaql_parser.INSERT, evaql_parser.LOAD, evaql_parser.SELECT, evaql_parser.UPDATE, evaql_parser.UPLOAD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 229
                self.dmlStatement()
                pass
            elif token in [evaql_parser.DESCRIBE, evaql_parser.HELP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 230
                self.utilityStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(evaql_parser.SEMI, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = evaql_parser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(evaql_parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(evaql_parser.CreateDatabaseContext,0)


        def createTable(self):
            return self.getTypedRuleContext(evaql_parser.CreateTableContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(evaql_parser.CreateIndexContext,0)


        def createUdf(self):
            return self.getTypedRuleContext(evaql_parser.CreateUdfContext,0)


        def createMaterializedView(self):
            return self.getTypedRuleContext(evaql_parser.CreateMaterializedViewContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(evaql_parser.DropDatabaseContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(evaql_parser.DropTableContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(evaql_parser.DropIndexContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdlStatement" ):
                return visitor.visitDdlStatement(self)
            else:
                return visitor.visitChildren(self)




    def ddlStatement(self):

        localctx = evaql_parser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ddlStatement)
        try:
            self.state = 243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 235
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 236
                self.createTable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 237
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 238
                self.createUdf()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 239
                self.createMaterializedView()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 240
                self.dropDatabase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 241
                self.dropTable()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 242
                self.dropIndex()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(evaql_parser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(evaql_parser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(evaql_parser.DeleteStatementContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(evaql_parser.LoadStatementContext,0)


        def uploadStatement(self):
            return self.getTypedRuleContext(evaql_parser.UploadStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)




    def dmlStatement(self):

        localctx = evaql_parser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_dmlStatement)
        try:
            self.state = 251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self.selectStatement(0)
                pass
            elif token in [evaql_parser.INSERT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 246
                self.insertStatement()
                pass
            elif token in [evaql_parser.UPDATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 247
                self.updateStatement()
                pass
            elif token in [evaql_parser.DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 248
                self.deleteStatement()
                pass
            elif token in [evaql_parser.LOAD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 249
                self.loadStatement()
                pass
            elif token in [evaql_parser.UPLOAD]:
                self.enterOuterAlt(localctx, 6)
                self.state = 250
                self.uploadStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDescribeStatement(self):
            return self.getTypedRuleContext(evaql_parser.SimpleDescribeStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(evaql_parser.HelpStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUtilityStatement" ):
                return visitor.visitUtilityStatement(self)
            else:
                return visitor.visitChildren(self)




    def utilityStatement(self):

        localctx = evaql_parser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_utilityStatement)
        try:
            self.state = 255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.DESCRIBE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.simpleDescribeStatement()
                pass
            elif token in [evaql_parser.HELP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 254
                self.helpStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(evaql_parser.DATABASE, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabase" ):
                return visitor.visitCreateDatabase(self)
            else:
                return visitor.visitChildren(self)




    def createDatabase(self):

        localctx = evaql_parser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(evaql_parser.CREATE)
            self.state = 258
            self.match(evaql_parser.DATABASE)
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 259
                self.ifNotExists()


            self.state = 262
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def INDEX(self):
            return self.getToken(evaql_parser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ON(self):
            return self.getToken(evaql_parser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(evaql_parser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(evaql_parser.IndexTypeContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndex" ):
                return visitor.visitCreateIndex(self)
            else:
                return visitor.visitChildren(self)




    def createIndex(self):

        localctx = evaql_parser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(evaql_parser.CREATE)
            self.state = 265
            self.match(evaql_parser.INDEX)
            self.state = 266
            self.uid()
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.USING:
                self.state = 267
                self.indexType()


            self.state = 270
            self.match(evaql_parser.ON)
            self.state = 271
            self.tableName()
            self.state = 272
            self.indexColumnNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)
        def TABLE(self):
            return self.getToken(evaql_parser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(evaql_parser.CreateDefinitionsContext,0)

        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnCreateTable" ):
                return visitor.visitColumnCreateTable(self)
            else:
                return visitor.visitChildren(self)



    def createTable(self):

        localctx = evaql_parser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            localctx = evaql_parser.ColumnCreateTableContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.match(evaql_parser.CREATE)
            self.state = 275
            self.match(evaql_parser.TABLE)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 276
                self.ifNotExists()


            self.state = 279
            self.tableName()
            self.state = 280
            self.createDefinitions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def UDF(self):
            return self.getToken(evaql_parser.UDF, 0)

        def udfName(self):
            return self.getTypedRuleContext(evaql_parser.UdfNameContext,0)


        def INPUT(self):
            return self.getToken(evaql_parser.INPUT, 0)

        def createDefinitions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.CreateDefinitionsContext)
            else:
                return self.getTypedRuleContext(evaql_parser.CreateDefinitionsContext,i)


        def OUTPUT(self):
            return self.getToken(evaql_parser.OUTPUT, 0)

        def TYPE(self):
            return self.getToken(evaql_parser.TYPE, 0)

        def udfType(self):
            return self.getTypedRuleContext(evaql_parser.UdfTypeContext,0)


        def IMPL(self):
            return self.getToken(evaql_parser.IMPL, 0)

        def udfImpl(self):
            return self.getTypedRuleContext(evaql_parser.UdfImplContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createUdf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdf" ):
                listener.enterCreateUdf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdf" ):
                listener.exitCreateUdf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUdf" ):
                return visitor.visitCreateUdf(self)
            else:
                return visitor.visitChildren(self)




    def createUdf(self):

        localctx = evaql_parser.CreateUdfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_createUdf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.match(evaql_parser.CREATE)
            self.state = 283
            self.match(evaql_parser.UDF)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 284
                self.ifNotExists()


            self.state = 287
            self.udfName()
            self.state = 288
            self.match(evaql_parser.INPUT)
            self.state = 289
            self.createDefinitions()
            self.state = 290
            self.match(evaql_parser.OUTPUT)
            self.state = 291
            self.createDefinitions()
            self.state = 292
            self.match(evaql_parser.TYPE)
            self.state = 293
            self.udfType()
            self.state = 294
            self.match(evaql_parser.IMPL)
            self.state = 295
            self.udfImpl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMaterializedViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def MATERIALIZED(self):
            return self.getToken(evaql_parser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(evaql_parser.VIEW, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createMaterializedView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedView" ):
                listener.enterCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedView" ):
                listener.exitCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateMaterializedView" ):
                return visitor.visitCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)




    def createMaterializedView(self):

        localctx = evaql_parser.CreateMaterializedViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_createMaterializedView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(evaql_parser.CREATE)
            self.state = 298
            self.match(evaql_parser.MATERIALIZED)
            self.state = 299
            self.match(evaql_parser.VIEW)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 300
                self.ifNotExists()


            self.state = 303
            self.tableName()

            self.state = 304
            self.match(evaql_parser.LR_BRACKET)
            self.state = 305
            localctx.columns = self.uidList()
            self.state = 306
            self.match(evaql_parser.RR_BRACKET)
            self.state = 308
            self.match(evaql_parser.AS)
            self.state = 309
            self.selectStatement(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfName" ):
                listener.enterUdfName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfName" ):
                listener.exitUdfName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfName" ):
                return visitor.visitUdfName(self)
            else:
                return visitor.visitChildren(self)




    def udfName(self):

        localctx = evaql_parser.UdfNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_udfName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfType" ):
                listener.enterUdfType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfType" ):
                listener.exitUdfType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfType" ):
                return visitor.visitUdfType(self)
            else:
                return visitor.visitChildren(self)




    def udfType(self):

        localctx = evaql_parser.UdfTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_udfType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfImplContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfImpl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfImpl" ):
                listener.enterUdfImpl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfImpl" ):
                listener.exitUdfImpl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfImpl" ):
                return visitor.visitUdfImpl(self)
            else:
                return visitor.visitChildren(self)




    def udfImpl(self):

        localctx = evaql_parser.UdfImplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_udfImpl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(evaql_parser.USING, 0)

        def BTREE(self):
            return self.getToken(evaql_parser.BTREE, 0)

        def HASH(self):
            return self.getToken(evaql_parser.HASH, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexType" ):
                return visitor.visitIndexType(self)
            else:
                return visitor.visitChildren(self)




    def indexType(self):

        localctx = evaql_parser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(evaql_parser.USING)
            self.state = 318
            _la = self._input.LA(1)
            if not(_la==evaql_parser.BTREE or _la==evaql_parser.HASH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.CreateDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDefinitions" ):
                return visitor.visitCreateDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def createDefinitions(self):

        localctx = evaql_parser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(evaql_parser.LR_BRACKET)
            self.state = 321
            self.createDefinition()
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 322
                self.match(evaql_parser.COMMA)
                self.state = 323
                self.createDefinition()
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 329
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(evaql_parser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDeclaration" ):
                return visitor.visitColumnDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(evaql_parser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexDeclaration" ):
                return visitor.visitIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def createDefinition(self):

        localctx = evaql_parser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createDefinition)
        try:
            self.state = 335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID]:
                localctx = evaql_parser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 331
                self.uid()
                self.state = 332
                self.columnDefinition()
                pass
            elif token in [evaql_parser.INDEX]:
                localctx = evaql_parser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 334
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(evaql_parser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return evaql_parser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = evaql_parser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.dataType()
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << evaql_parser.DEFAULT) | (1 << evaql_parser.KEY) | (1 << evaql_parser.NOT) | (1 << evaql_parser.NULL_LITERAL) | (1 << evaql_parser.PRIMARY) | (1 << evaql_parser.UNIQUE))) != 0) or _la==evaql_parser.NULL_SPEC_LITERAL:
                self.state = 338
                self.columnConstraint()
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(evaql_parser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(evaql_parser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryKeyColumnConstraint" ):
                return visitor.visitPrimaryKeyColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(evaql_parser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(evaql_parser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueKeyColumnConstraint" ):
                return visitor.visitUniqueKeyColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(evaql_parser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullColumnConstraint" ):
                return visitor.visitNullColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class DefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(evaql_parser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(evaql_parser.DefaultValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultColumnConstraint" ):
                listener.enterDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultColumnConstraint" ):
                listener.exitDefaultColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultColumnConstraint" ):
                return visitor.visitDefaultColumnConstraint(self)
            else:
                return visitor.visitChildren(self)



    def columnConstraint(self):

        localctx = evaql_parser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.NULL_SPEC_LITERAL]:
                localctx = evaql_parser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 344
                self.nullNotnull()
                pass
            elif token in [evaql_parser.DEFAULT]:
                localctx = evaql_parser.DefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 345
                self.match(evaql_parser.DEFAULT)
                self.state = 346
                self.defaultValue()
                pass
            elif token in [evaql_parser.KEY, evaql_parser.PRIMARY]:
                localctx = evaql_parser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.PRIMARY:
                    self.state = 347
                    self.match(evaql_parser.PRIMARY)


                self.state = 350
                self.match(evaql_parser.KEY)
                pass
            elif token in [evaql_parser.UNIQUE]:
                localctx = evaql_parser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 351
                self.match(evaql_parser.UNIQUE)
                self.state = 353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 352
                    self.match(evaql_parser.KEY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(evaql_parser.INDEX, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(evaql_parser.IndexColumnNamesContext,0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(evaql_parser.IndexTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleIndexDeclaration" ):
                return visitor.visitSimpleIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def indexColumnDefinition(self):

        localctx = evaql_parser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            localctx = evaql_parser.SimpleIndexDeclarationContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(evaql_parser.INDEX)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                self.state = 358
                self.uid()


            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.USING:
                self.state = 361
                self.indexType()


            self.state = 364
            self.indexColumnNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def DATABASE(self):
            return self.getToken(evaql_parser.DATABASE, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(evaql_parser.IfExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropDatabase" ):
                return visitor.visitDropDatabase(self)
            else:
                return visitor.visitChildren(self)




    def dropDatabase(self):

        localctx = evaql_parser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(evaql_parser.DROP)
            self.state = 367
            self.match(evaql_parser.DATABASE)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 368
                self.ifExists()


            self.state = 371
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def INDEX(self):
            return self.getToken(evaql_parser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ON(self):
            return self.getToken(evaql_parser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropIndex" ):
                return visitor.visitDropIndex(self)
            else:
                return visitor.visitChildren(self)




    def dropIndex(self):

        localctx = evaql_parser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_dropIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(evaql_parser.DROP)
            self.state = 374
            self.match(evaql_parser.INDEX)
            self.state = 375
            self.uid()
            self.state = 376
            self.match(evaql_parser.ON)
            self.state = 377
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def TABLE(self):
            return self.getToken(evaql_parser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(evaql_parser.TablesContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(evaql_parser.IfExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)




    def dropTable(self):

        localctx = evaql_parser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(evaql_parser.DROP)
            self.state = 380
            self.match(evaql_parser.TABLE)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 381
                self.ifExists()


            self.state = 384
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(evaql_parser.SingleDeleteStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatement" ):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = evaql_parser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_deleteStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.singleDeleteStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext

        def INSERT(self):
            return self.getToken(evaql_parser.INSERT, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(evaql_parser.InsertStatementValueContext,0)


        def INTO(self):
            return self.getToken(evaql_parser.INTO, 0)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatement" ):
                return visitor.visitInsertStatement(self)
            else:
                return visitor.visitChildren(self)




    def insertStatement(self):

        localctx = evaql_parser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(evaql_parser.INSERT)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.INTO:
                self.state = 389
                self.match(evaql_parser.INTO)


            self.state = 392
            self.tableName()

            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LR_BRACKET:
                self.state = 393
                self.match(evaql_parser.LR_BRACKET)
                self.state = 394
                localctx.columns = self.uidList()
                self.state = 395
                self.match(evaql_parser.RR_BRACKET)


            self.state = 399
            self.insertStatementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectStatementContext
            super().__init__(parser)
            self.left = None # SelectStatementContext
            self.unionAll = None # Token
            self.right = None # SelectStatementContext
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(evaql_parser.UNION, 0)
        def selectStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.SelectStatementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.SelectStatementContext,i)

        def ALL(self):
            return self.getToken(evaql_parser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionSelect" ):
                return visitor.visitUnionSelect(self)
            else:
                return visitor.visitChildren(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(evaql_parser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleSelect" ):
                return visitor.visitSimpleSelect(self)
            else:
                return visitor.visitChildren(self)



    def selectStatement(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.SelectStatementContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_selectStatement, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = evaql_parser.SimpleSelectContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 402
            self.querySpecification()
            self._ctx.stop = self._input.LT(-1)
            self.state = 412
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = evaql_parser.UnionSelectContext(self, evaql_parser.SelectStatementContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_selectStatement)
                    self.state = 404
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 405
                    self.match(evaql_parser.UNION)
                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.ALL:
                        self.state = 406
                        localctx.unionAll = self.match(evaql_parser.ALL)


                    self.state = 409
                    localctx.right = self.selectStatement(2) 
                self.state = 414
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleUpdateStatement(self):
            return self.getTypedRuleContext(evaql_parser.SingleUpdateStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateStatement" ):
                return visitor.visitUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def updateStatement(self):

        localctx = evaql_parser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_updateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.singleUpdateStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext

        def LOAD(self):
            return self.getToken(evaql_parser.LOAD, 0)

        def DATA(self):
            return self.getToken(evaql_parser.DATA, 0)

        def INFILE(self):
            return self.getToken(evaql_parser.INFILE, 0)

        def fileName(self):
            return self.getTypedRuleContext(evaql_parser.FileNameContext,0)


        def INTO(self):
            return self.getToken(evaql_parser.INTO, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def WITH(self):
            return self.getToken(evaql_parser.WITH, 0)

        def fileOptions(self):
            return self.getTypedRuleContext(evaql_parser.FileOptionsContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_loadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStatement" ):
                listener.enterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStatement" ):
                listener.exitLoadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadStatement" ):
                return visitor.visitLoadStatement(self)
            else:
                return visitor.visitChildren(self)




    def loadStatement(self):

        localctx = evaql_parser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_loadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(evaql_parser.LOAD)
            self.state = 418
            self.match(evaql_parser.DATA)
            self.state = 419
            self.match(evaql_parser.INFILE)
            self.state = 420
            self.fileName()
            self.state = 421
            self.match(evaql_parser.INTO)
            self.state = 422
            self.tableName()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LR_BRACKET:
                self.state = 423
                self.match(evaql_parser.LR_BRACKET)
                self.state = 424
                localctx.columns = self.uidList()
                self.state = 425
                self.match(evaql_parser.RR_BRACKET)


            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.WITH:
                self.state = 429
                self.match(evaql_parser.WITH)
                self.state = 430
                self.fileOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fileFormat = None # Token

        def FORMAT(self):
            return self.getToken(evaql_parser.FORMAT, 0)

        def CSV(self):
            return self.getToken(evaql_parser.CSV, 0)

        def VIDEO(self):
            return self.getToken(evaql_parser.VIDEO, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_fileOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileOptions" ):
                listener.enterFileOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileOptions" ):
                listener.exitFileOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileOptions" ):
                return visitor.visitFileOptions(self)
            else:
                return visitor.visitChildren(self)




    def fileOptions(self):

        localctx = evaql_parser.FileOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fileOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.match(evaql_parser.FORMAT)
            self.state = 434
            localctx.fileFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==evaql_parser.CSV or _la==evaql_parser.VIDEO):
                localctx.fileFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UploadStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPLOAD(self):
            return self.getToken(evaql_parser.UPLOAD, 0)

        def PATH(self):
            return self.getToken(evaql_parser.PATH, 0)

        def fileName(self):
            return self.getTypedRuleContext(evaql_parser.FileNameContext,0)


        def BLOB(self):
            return self.getToken(evaql_parser.BLOB, 0)

        def videoBlob(self):
            return self.getTypedRuleContext(evaql_parser.VideoBlobContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_uploadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUploadStatement" ):
                listener.enterUploadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUploadStatement" ):
                listener.exitUploadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUploadStatement" ):
                return visitor.visitUploadStatement(self)
            else:
                return visitor.visitChildren(self)




    def uploadStatement(self):

        localctx = evaql_parser.UploadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_uploadStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(evaql_parser.UPLOAD)
            self.state = 437
            self.match(evaql_parser.PATH)
            self.state = 438
            self.fileName()
            self.state = 439
            self.match(evaql_parser.BLOB)
            self.state = 440
            self.videoBlob()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_fileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileName" ):
                listener.enterFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileName" ):
                listener.exitFileName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileName" ):
                return visitor.visitFileName(self)
            else:
                return visitor.visitChildren(self)




    def fileName(self):

        localctx = evaql_parser.FileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fileName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VideoBlobContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_videoBlob

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVideoBlob" ):
                listener.enterVideoBlob(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVideoBlob" ):
                listener.exitVideoBlob(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVideoBlob" ):
                return visitor.visitVideoBlob(self)
            else:
                return visitor.visitChildren(self)




    def videoBlob(self):

        localctx = evaql_parser.VideoBlobContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_videoBlob)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.LR_BRACKET)
            else:
                return self.getToken(evaql_parser.LR_BRACKET, i)

        def expressionsWithDefaults(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionsWithDefaultsContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.RR_BRACKET)
            else:
                return self.getToken(evaql_parser.RR_BRACKET, i)

        def VALUES(self):
            return self.getToken(evaql_parser.VALUES, 0)

        def VALUE(self):
            return self.getToken(evaql_parser.VALUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatementValue" ):
                return visitor.visitInsertStatementValue(self)
            else:
                return visitor.visitChildren(self)




    def insertStatementValue(self):

        localctx = evaql_parser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                self.selectStatement(0)
                pass
            elif token in [evaql_parser.VALUES, evaql_parser.VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 447
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.VALUES or _la==evaql_parser.VALUE):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 448
                self.match(evaql_parser.LR_BRACKET)
                self.state = 449
                self.expressionsWithDefaults()
                self.state = 450
                self.match(evaql_parser.RR_BRACKET)
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==evaql_parser.COMMA:
                    self.state = 451
                    self.match(evaql_parser.COMMA)
                    self.state = 452
                    self.match(evaql_parser.LR_BRACKET)
                    self.state = 453
                    self.expressionsWithDefaults()
                    self.state = 454
                    self.match(evaql_parser.RR_BRACKET)
                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatedElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(evaql_parser.EQUAL_SYMBOL, 0)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(evaql_parser.DEFAULT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdatedElement" ):
                return visitor.visitUpdatedElement(self)
            else:
                return visitor.visitChildren(self)




    def updatedElement(self):

        localctx = evaql_parser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.fullColumnName()
            self.state = 464
            self.match(evaql_parser.EQUAL_SYMBOL)
            self.state = 467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                self.state = 465
                self.expression(0)
                pass
            elif token in [evaql_parser.DEFAULT]:
                self.state = 466
                self.match(evaql_parser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(evaql_parser.DELETE, 0)

        def FROM(self):
            return self.getToken(evaql_parser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def WHERE(self):
            return self.getToken(evaql_parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(evaql_parser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(evaql_parser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDeleteStatement" ):
                return visitor.visitSingleDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleDeleteStatement(self):

        localctx = evaql_parser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(evaql_parser.DELETE)
            self.state = 470
            self.match(evaql_parser.FROM)
            self.state = 471
            self.tableName()
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.WHERE:
                self.state = 472
                self.match(evaql_parser.WHERE)
                self.state = 473
                self.expression(0)


            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ORDER:
                self.state = 476
                self.orderByClause()


            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LIMIT:
                self.state = 479
                self.match(evaql_parser.LIMIT)
                self.state = 480
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleUpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(evaql_parser.UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def SET(self):
            return self.getToken(evaql_parser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.UpdatedElementContext,i)


        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def WHERE(self):
            return self.getToken(evaql_parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(evaql_parser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(evaql_parser.LimitClauseContext,0)


        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_singleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleUpdateStatement" ):
                listener.enterSingleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleUpdateStatement" ):
                listener.exitSingleUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleUpdateStatement" ):
                return visitor.visitSingleUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleUpdateStatement(self):

        localctx = evaql_parser.SingleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_singleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(evaql_parser.UPDATE)
            self.state = 484
            self.tableName()
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS:
                    self.state = 485
                    self.match(evaql_parser.AS)


                self.state = 488
                self.uid()


            self.state = 491
            self.match(evaql_parser.SET)
            self.state = 492
            self.updatedElement()
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 493
                self.match(evaql_parser.COMMA)
                self.state = 494
                self.updatedElement()
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.WHERE:
                self.state = 500
                self.match(evaql_parser.WHERE)
                self.state = 501
                self.expression(0)


            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ORDER:
                self.state = 504
                self.orderByClause()


            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LIMIT:
                self.state = 507
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(evaql_parser.ORDER, 0)

        def BY(self):
            return self.getToken(evaql_parser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.OrderByExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = evaql_parser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(evaql_parser.ORDER)
            self.state = 511
            self.match(evaql_parser.BY)
            self.state = 512
            self.orderByExpression()
            self.state = 517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 513
                    self.match(evaql_parser.COMMA)
                    self.state = 514
                    self.orderByExpression() 
                self.state = 519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(evaql_parser.ASC, 0)

        def DESC(self):
            return self.getToken(evaql_parser.DESC, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByExpression" ):
                return visitor.visitOrderByExpression(self)
            else:
                return visitor.visitChildren(self)




    def orderByExpression(self):

        localctx = evaql_parser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.expression(0)
            self.state = 522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 521
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.ASC or _la==evaql_parser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.TableSourceContext)
            else:
                return self.getTypedRuleContext(evaql_parser.TableSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSources" ):
                return visitor.visitTableSources(self)
            else:
                return visitor.visitChildren(self)




    def tableSources(self):

        localctx = evaql_parser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_tableSources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.tableSource()
            self.state = 529
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 525
                    self.match(evaql_parser.COMMA)
                    self.state = 526
                    self.tableSource() 
                self.state = 531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItemWithSample(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceItemWithSampleContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.JoinPartContext)
            else:
                return self.getTypedRuleContext(evaql_parser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSourceBase" ):
                return visitor.visitTableSourceBase(self)
            else:
                return visitor.visitChildren(self)



    def tableSource(self):

        localctx = evaql_parser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_tableSource)
        try:
            localctx = evaql_parser.TableSourceBaseContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.tableSourceItemWithSample()
            self.state = 536
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 533
                    self.joinPart() 
                self.state = 538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemWithSampleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSourceItem(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceItemContext,0)


        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def sampleClause(self):
            return self.getTypedRuleContext(evaql_parser.SampleClauseContext,0)


        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_tableSourceItemWithSample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceItemWithSample" ):
                listener.enterTableSourceItemWithSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceItemWithSample" ):
                listener.exitTableSourceItemWithSample(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSourceItemWithSample" ):
                return visitor.visitTableSourceItemWithSample(self)
            else:
                return visitor.visitChildren(self)




    def tableSourceItemWithSample(self):

        localctx = evaql_parser.TableSourceItemWithSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tableSourceItemWithSample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.tableSourceItem()
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS:
                    self.state = 540
                    self.match(evaql_parser.AS)


                self.state = 543
                self.uid()


            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 546
                self.sampleClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryTableItem" ):
                return visitor.visitSubqueryTableItem(self)
            else:
                return visitor.visitChildren(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomTableItem" ):
                return visitor.visitAtomTableItem(self)
            else:
                return visitor.visitChildren(self)



    def tableSourceItem(self):

        localctx = evaql_parser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tableSourceItem)
        try:
            self.state = 557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID]:
                localctx = evaql_parser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 549
                self.tableName()
                pass
            elif token in [evaql_parser.SELECT, evaql_parser.LR_BRACKET]:
                localctx = evaql_parser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [evaql_parser.SELECT]:
                    self.state = 550
                    self.selectStatement(0)
                    pass
                elif token in [evaql_parser.LR_BRACKET]:
                    self.state = 551
                    self.match(evaql_parser.LR_BRACKET)
                    self.state = 552
                    self.selectStatement(0)
                    self.state = 553
                    self.match(evaql_parser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(evaql_parser.SAMPLE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_sampleClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleClause" ):
                listener.enterSampleClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleClause" ):
                listener.exitSampleClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = evaql_parser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(evaql_parser.SAMPLE)
            self.state = 560
            self.decimalLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(evaql_parser.JOIN, 0)
        def tableSourceItemWithSample(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceItemWithSampleContext,0)

        def ON(self):
            return self.getToken(evaql_parser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)

        def USING(self):
            return self.getToken(evaql_parser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerJoin" ):
                return visitor.visitInnerJoin(self)
            else:
                return visitor.visitChildren(self)



    def joinPart(self):

        localctx = evaql_parser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_joinPart)
        try:
            localctx = evaql_parser.InnerJoinContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(evaql_parser.JOIN)
            self.state = 563
            self.tableSourceItemWithSample()
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 564
                self.match(evaql_parser.ON)
                self.state = 565
                self.expression(0)

            elif la_ == 2:
                self.state = 566
                self.match(evaql_parser.USING)
                self.state = 567
                self.match(evaql_parser.LR_BRACKET)
                self.state = 568
                self.uidList()
                self.state = 569
                self.match(evaql_parser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def querySpecification(self):
            return self.getTypedRuleContext(evaql_parser.QuerySpecificationContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(evaql_parser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpression" ):
                return visitor.visitQueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def queryExpression(self):

        localctx = evaql_parser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_queryExpression)
        try:
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.match(evaql_parser.LR_BRACKET)
                self.state = 574
                self.querySpecification()
                self.state = 575
                self.match(evaql_parser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.match(evaql_parser.LR_BRACKET)
                self.state = 578
                self.queryExpression()
                self.state = 579
                self.match(evaql_parser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(evaql_parser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(evaql_parser.SelectElementsContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(evaql_parser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(evaql_parser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(evaql_parser.LimitClauseContext,0)


        def errorBoundsExpression(self):
            return self.getTypedRuleContext(evaql_parser.ErrorBoundsExpressionContext,0)


        def confidenceLevelExpression(self):
            return self.getTypedRuleContext(evaql_parser.ConfidenceLevelExpressionContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = evaql_parser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(evaql_parser.SELECT)
            self.state = 584
            self.selectElements()
            self.state = 585
            self.fromClause()
            self.state = 587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 586
                self.orderByClause()


            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 589
                self.limitClause()


            self.state = 593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 592
                self.errorBoundsExpression()


            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 595
                self.confidenceLevelExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.SelectElementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.SelectElementContext,i)


        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectElements" ):
                return visitor.visitSelectElements(self)
            else:
                return visitor.visitChildren(self)




    def selectElements(self):

        localctx = evaql_parser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.STAR]:
                self.state = 598
                localctx.star = self.match(evaql_parser.STAR)
                pass
            elif token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                self.state = 599
                self.selectElement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 602
                self.match(evaql_parser.COMMA)
                self.state = 603
                self.selectElement()
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(evaql_parser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(evaql_parser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpressionElement" ):
                return visitor.visitSelectExpressionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectFunctionElement" ):
                return visitor.visitSelectFunctionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(evaql_parser.FullIdContext,0)

        def DOT(self):
            return self.getToken(evaql_parser.DOT, 0)
        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStarElement" ):
                return visitor.visitSelectStarElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectColumnElement" ):
                return visitor.visitSelectColumnElement(self)
            else:
                return visitor.visitChildren(self)



    def selectElement(self):

        localctx = evaql_parser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                localctx = evaql_parser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.fullId()
                self.state = 610
                self.match(evaql_parser.DOT)
                self.state = 611
                self.match(evaql_parser.STAR)
                pass

            elif la_ == 2:
                localctx = evaql_parser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.fullColumnName()
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.AS:
                        self.state = 614
                        self.match(evaql_parser.AS)


                    self.state = 617
                    self.uid()


                pass

            elif la_ == 3:
                localctx = evaql_parser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 620
                self.functionCall()
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                    self.state = 622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.AS:
                        self.state = 621
                        self.match(evaql_parser.AS)


                    self.state = 624
                    self.uid()


                pass

            elif la_ == 4:
                localctx = evaql_parser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 627
                    self.match(evaql_parser.LOCAL_ID)
                    self.state = 628
                    self.match(evaql_parser.VAR_ASSIGN)


                self.state = 631
                self.expression(0)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                    self.state = 633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.AS:
                        self.state = 632
                        self.match(evaql_parser.AS)


                    self.state = 635
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext
            self.havingExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(evaql_parser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(evaql_parser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(evaql_parser.WHERE, 0)

        def GROUP(self):
            return self.getToken(evaql_parser.GROUP, 0)

        def BY(self):
            return self.getToken(evaql_parser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(evaql_parser.GroupByItemContext,i)


        def HAVING(self):
            return self.getToken(evaql_parser.HAVING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = evaql_parser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.match(evaql_parser.FROM)
            self.state = 641
            self.tableSources()
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 642
                self.match(evaql_parser.WHERE)
                self.state = 643
                localctx.whereExpr = self.expression(0)


            self.state = 656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 646
                self.match(evaql_parser.GROUP)
                self.state = 647
                self.match(evaql_parser.BY)
                self.state = 648
                self.groupByItem()
                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 649
                        self.match(evaql_parser.COMMA)
                        self.state = 650
                        self.groupByItem() 
                    self.state = 655
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)



            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 658
                self.match(evaql_parser.HAVING)
                self.state = 659
                localctx.havingExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(evaql_parser.ASC, 0)

        def DESC(self):
            return self.getToken(evaql_parser.DESC, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByItem" ):
                return visitor.visitGroupByItem(self)
            else:
                return visitor.visitChildren(self)




    def groupByItem(self):

        localctx = evaql_parser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.expression(0)
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 663
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.ASC or _la==evaql_parser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # DecimalLiteralContext
            self.limit = None # DecimalLiteralContext

        def LIMIT(self):
            return self.getToken(evaql_parser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(evaql_parser.OFFSET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(evaql_parser.COMMA, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = evaql_parser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(evaql_parser.LIMIT)
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 667
                    localctx.offset = self.decimalLiteral()
                    self.state = 668
                    self.match(evaql_parser.COMMA)


                self.state = 672
                localctx.limit = self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 673
                localctx.limit = self.decimalLiteral()
                self.state = 674
                self.match(evaql_parser.OFFSET)
                self.state = 675
                localctx.offset = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorBoundsExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_BOUNDS(self):
            return self.getToken(evaql_parser.ERROR_BOUNDS, 0)

        def REAL_LITERAL(self):
            return self.getToken(evaql_parser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_errorBoundsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorBoundsExpression" ):
                listener.enterErrorBoundsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorBoundsExpression" ):
                listener.exitErrorBoundsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorBoundsExpression" ):
                return visitor.visitErrorBoundsExpression(self)
            else:
                return visitor.visitChildren(self)




    def errorBoundsExpression(self):

        localctx = evaql_parser.ErrorBoundsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_errorBoundsExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(evaql_parser.ERROR_BOUNDS)
            self.state = 680
            self.match(evaql_parser.REAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfidenceLevelExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIDENCE_LEVEL(self):
            return self.getToken(evaql_parser.CONFIDENCE_LEVEL, 0)

        def REAL_LITERAL(self):
            return self.getToken(evaql_parser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_confidenceLevelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfidenceLevelExpression" ):
                listener.enterConfidenceLevelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfidenceLevelExpression" ):
                listener.exitConfidenceLevelExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfidenceLevelExpression" ):
                return visitor.visitConfidenceLevelExpression(self)
            else:
                return visitor.visitChildren(self)




    def confidenceLevelExpression(self):

        localctx = evaql_parser.ConfidenceLevelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_confidenceLevelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(evaql_parser.CONFIDENCE_LEVEL)
            self.state = 683
            self.match(evaql_parser.REAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShutdownStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(evaql_parser.SHUTDOWN, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_shutdownStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShutdownStatement" ):
                listener.enterShutdownStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShutdownStatement" ):
                listener.exitShutdownStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShutdownStatement" ):
                return visitor.visitShutdownStatement(self)
            else:
                return visitor.visitChildren(self)




    def shutdownStatement(self):

        localctx = evaql_parser.ShutdownStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_shutdownStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(evaql_parser.SHUTDOWN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDescribeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIBE(self):
            return self.getToken(evaql_parser.DESCRIBE, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_simpleDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDescribeStatement" ):
                listener.enterSimpleDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDescribeStatement" ):
                listener.exitSimpleDescribeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDescribeStatement" ):
                return visitor.visitSimpleDescribeStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleDescribeStatement(self):

        localctx = evaql_parser.SimpleDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_simpleDescribeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(evaql_parser.DESCRIBE)
            self.state = 688
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(evaql_parser.HELP, 0)

        def STRING_LITERAL(self):
            return self.getToken(evaql_parser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_helpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStatement" ):
                listener.enterHelpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStatement" ):
                listener.exitHelpStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHelpStatement" ):
                return visitor.visitHelpStatement(self)
            else:
                return visitor.visitChildren(self)




    def helpStatement(self):

        localctx = evaql_parser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(evaql_parser.HELP)
            self.state = 691
            self.match(evaql_parser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.UidContext)
            else:
                return self.getTypedRuleContext(evaql_parser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(evaql_parser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(evaql_parser.DOT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullId" ):
                return visitor.visitFullId(self)
            else:
                return visitor.visitChildren(self)




    def fullId(self):

        localctx = evaql_parser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.uid()
            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 694
                self.match(evaql_parser.DOT_ID)

            elif la_ == 2:
                self.state = 695
                self.match(evaql_parser.DOT)
                self.state = 696
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(evaql_parser.FullIdContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)




    def tableName(self):

        localctx = evaql_parser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DottedIdContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DottedIdContext,i)


        def getRuleIndex(self):
            return evaql_parser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnName" ):
                return visitor.visitFullColumnName(self)
            else:
                return visitor.visitChildren(self)




    def fullColumnName(self):

        localctx = evaql_parser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.uid()
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 702
                self.dottedId()
                self.state = 704
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 703
                    self.dottedId()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def ASC(self):
            return self.getToken(evaql_parser.ASC, 0)

        def DESC(self):
            return self.getToken(evaql_parser.DESC, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexColumnName" ):
                return visitor.visitIndexColumnName(self)
            else:
                return visitor.visitChildren(self)




    def indexColumnName(self):

        localctx = evaql_parser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.uid()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LR_BRACKET:
                self.state = 709
                self.match(evaql_parser.LR_BRACKET)
                self.state = 710
                self.decimalLiteral()
                self.state = 711
                self.match(evaql_parser.RR_BRACKET)


            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ASC or _la==evaql_parser.DESC:
                self.state = 715
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.ASC or _la==evaql_parser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(evaql_parser.STRING_USER_NAME, 0)

        def ID(self):
            return self.getToken(evaql_parser.ID, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserName" ):
                return visitor.visitUserName(self)
            else:
                return visitor.visitChildren(self)




    def userName(self):

        localctx = evaql_parser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_userName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            _la = self._input.LA(1)
            if not(_la==evaql_parser.ID or _la==evaql_parser.STRING_USER_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.MINUS)
            else:
                return self.getToken(evaql_parser.MINUS, i)

        def COLON_SYMB(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COLON_SYMB)
            else:
                return self.getToken(evaql_parser.COLON_SYMB, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_uuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidSet" ):
                listener.enterUuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidSet" ):
                listener.exitUuidSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUuidSet" ):
                return visitor.visitUuidSet(self)
            else:
                return visitor.visitChildren(self)




    def uuidSet(self):

        localctx = evaql_parser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.decimalLiteral()
            self.state = 721
            self.match(evaql_parser.MINUS)
            self.state = 722
            self.decimalLiteral()
            self.state = 723
            self.match(evaql_parser.MINUS)
            self.state = 724
            self.decimalLiteral()
            self.state = 725
            self.match(evaql_parser.MINUS)
            self.state = 726
            self.decimalLiteral()
            self.state = 727
            self.match(evaql_parser.MINUS)
            self.state = 728
            self.decimalLiteral()
            self.state = 734 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 729
                self.match(evaql_parser.COLON_SYMB)
                self.state = 730
                self.decimalLiteral()
                self.state = 731
                self.match(evaql_parser.MINUS)
                self.state = 732
                self.decimalLiteral()
                self.state = 736 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==evaql_parser.COLON_SYMB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(evaql_parser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(evaql_parser.REVERSE_QUOTE_ID, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUid" ):
                return visitor.visitUid(self)
            else:
                return visitor.visitChildren(self)




    def uid(self):

        localctx = evaql_parser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_uid)
        try:
            self.state = 740
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.simpleId()
                pass
            elif token in [evaql_parser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.match(evaql_parser.REVERSE_QUOTE_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(evaql_parser.ID, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_simpleId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleId" ):
                listener.enterSimpleId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleId" ):
                listener.exitSimpleId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleId" ):
                return visitor.visitSimpleId(self)
            else:
                return visitor.visitChildren(self)




    def simpleId(self):

        localctx = evaql_parser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_simpleId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(evaql_parser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(evaql_parser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(evaql_parser.DOT, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDottedId" ):
                return visitor.visitDottedId(self)
            else:
                return visitor.visitChildren(self)




    def dottedId(self):

        localctx = evaql_parser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_dottedId)
        try:
            self.state = 747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.match(evaql_parser.DOT_ID)
                pass
            elif token in [evaql_parser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.match(evaql_parser.DOT)
                self.state = 746
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(evaql_parser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(evaql_parser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(evaql_parser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(evaql_parser.TWO_DECIMAL, 0)

        def ANYDIM(self):
            return self.getToken(evaql_parser.ANYDIM, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def decimalLiteral(self):

        localctx = evaql_parser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            _la = self._input.LA(1)
            if not(_la==evaql_parser.ANYDIM or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & ((1 << (evaql_parser.ZERO_DECIMAL - 153)) | (1 << (evaql_parser.ONE_DECIMAL - 153)) | (1 << (evaql_parser.TWO_DECIMAL - 153)) | (1 << (evaql_parser.DECIMAL_LITERAL - 153)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(evaql_parser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = evaql_parser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(evaql_parser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(evaql_parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(evaql_parser.FALSE, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = evaql_parser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            _la = self._input.LA(1)
            if not(_la==evaql_parser.FALSE or _la==evaql_parser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullNotnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(evaql_parser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(evaql_parser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullNotnull" ):
                return visitor.visitNullNotnull(self)
            else:
                return visitor.visitChildren(self)




    def nullNotnull(self):

        localctx = evaql_parser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.NOT:
                self.state = 755
                self.match(evaql_parser.NOT)


            self.state = 758
            _la = self._input.LA(1)
            if not(_la==evaql_parser.NULL_LITERAL or _la==evaql_parser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_SQ_BRACKET(self):
            return self.getToken(evaql_parser.LR_SQ_BRACKET, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ConstantContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ConstantContext,i)


        def RR_SQ_BRACKET(self):
            return self.getToken(evaql_parser.RR_SQ_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = evaql_parser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self.match(evaql_parser.LR_SQ_BRACKET)
                self.state = 761
                self.constant()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==evaql_parser.COMMA:
                    self.state = 762
                    self.match(evaql_parser.COMMA)
                    self.state = 763
                    self.constant()
                    self.state = 768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 769
                self.match(evaql_parser.RR_SQ_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(evaql_parser.LR_SQ_BRACKET)
                self.state = 772
                self.match(evaql_parser.RR_SQ_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def MINUS(self):
            return self.getToken(evaql_parser.MINUS, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(evaql_parser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(evaql_parser.REAL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(evaql_parser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(evaql_parser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def arrayLiteral(self):
            return self.getTypedRuleContext(evaql_parser.ArrayLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = evaql_parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.stringLiteral()
                pass
            elif token in [evaql_parser.ANYDIM, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.decimalLiteral()
                pass
            elif token in [evaql_parser.MINUS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 777
                self.match(evaql_parser.MINUS)
                self.state = 778
                self.decimalLiteral()
                pass
            elif token in [evaql_parser.FALSE, evaql_parser.TRUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 779
                self.booleanLiteral()
                pass
            elif token in [evaql_parser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 780
                self.match(evaql_parser.REAL_LITERAL)
                pass
            elif token in [evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.NULL_SPEC_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.NOT:
                    self.state = 781
                    self.match(evaql_parser.NOT)


                self.state = 784
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.NULL_LITERAL or _la==evaql_parser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [evaql_parser.LR_SQ_BRACKET]:
                self.enterOuterAlt(localctx, 7)
                self.state = 785
                self.arrayLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT8(self):
            return self.getToken(evaql_parser.INT8, 0)

        def UINT8(self):
            return self.getToken(evaql_parser.UINT8, 0)

        def INT16(self):
            return self.getToken(evaql_parser.INT16, 0)

        def INT32(self):
            return self.getToken(evaql_parser.INT32, 0)

        def INT64(self):
            return self.getToken(evaql_parser.INT64, 0)

        def UNICODE(self):
            return self.getToken(evaql_parser.UNICODE, 0)

        def BOOL(self):
            return self.getToken(evaql_parser.BOOL, 0)

        def FLOAT32(self):
            return self.getToken(evaql_parser.FLOAT32, 0)

        def FLOAT64(self):
            return self.getToken(evaql_parser.FLOAT64, 0)

        def DECIMAL(self):
            return self.getToken(evaql_parser.DECIMAL, 0)

        def STR(self):
            return self.getToken(evaql_parser.STR, 0)

        def DATETIME(self):
            return self.getToken(evaql_parser.DATETIME, 0)

        def ANYTYPE(self):
            return self.getToken(evaql_parser.ANYTYPE, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = evaql_parser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_arrayType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            _la = self._input.LA(1)
            if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (evaql_parser.INT8 - 87)) | (1 << (evaql_parser.UINT8 - 87)) | (1 << (evaql_parser.INT16 - 87)) | (1 << (evaql_parser.INT32 - 87)) | (1 << (evaql_parser.INT64 - 87)) | (1 << (evaql_parser.UNICODE - 87)) | (1 << (evaql_parser.BOOL - 87)) | (1 << (evaql_parser.FLOAT32 - 87)) | (1 << (evaql_parser.FLOAT64 - 87)) | (1 << (evaql_parser.DECIMAL - 87)) | (1 << (evaql_parser.STR - 87)) | (1 << (evaql_parser.DATETIME - 87)) | (1 << (evaql_parser.ANYTYPE - 87)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IntegerDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER(self):
            return self.getToken(evaql_parser.INTEGER, 0)
        def UNSIGNED(self):
            return self.getToken(evaql_parser.UNSIGNED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerDataType" ):
                listener.enterIntegerDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerDataType" ):
                listener.exitIntegerDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerDataType" ):
                return visitor.visitIntegerDataType(self)
            else:
                return visitor.visitChildren(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(evaql_parser.TEXT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(evaql_parser.LengthOneDimensionContext,0)

        def FLOAT(self):
            return self.getToken(evaql_parser.FLOAT, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(evaql_parser.LengthTwoDimensionContext,0)

        def UNSIGNED(self):
            return self.getToken(evaql_parser.UNSIGNED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensionDataType" ):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensionDataType" ):
                listener.exitDimensionDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimensionDataType" ):
                return visitor.visitDimensionDataType(self)
            else:
                return visitor.visitChildren(self)


    class AnyDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANYTYPE(self):
            return self.getToken(evaql_parser.ANYTYPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyDataType" ):
                listener.enterAnyDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyDataType" ):
                listener.exitAnyDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnyDataType" ):
                return visitor.visitAnyDataType(self)
            else:
                return visitor.visitChildren(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN(self):
            return self.getToken(evaql_parser.BOOLEAN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataType" ):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataType" ):
                listener.exitSimpleDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDataType" ):
                return visitor.visitSimpleDataType(self)
            else:
                return visitor.visitChildren(self)


    class ArrayDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NDARRAY(self):
            return self.getToken(evaql_parser.NDARRAY, 0)
        def arrayType(self):
            return self.getTypedRuleContext(evaql_parser.ArrayTypeContext,0)

        def lengthDimensionList(self):
            return self.getTypedRuleContext(evaql_parser.LengthDimensionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDataType" ):
                listener.enterArrayDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDataType" ):
                listener.exitArrayDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDataType" ):
                return visitor.visitArrayDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = evaql_parser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.BOOLEAN]:
                localctx = evaql_parser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.match(evaql_parser.BOOLEAN)
                pass
            elif token in [evaql_parser.TEXT]:
                localctx = evaql_parser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.match(evaql_parser.TEXT)
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.LR_BRACKET:
                    self.state = 792
                    self.lengthOneDimension()


                pass
            elif token in [evaql_parser.INTEGER]:
                localctx = evaql_parser.IntegerDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 795
                self.match(evaql_parser.INTEGER)
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.UNSIGNED:
                    self.state = 796
                    self.match(evaql_parser.UNSIGNED)


                pass
            elif token in [evaql_parser.FLOAT]:
                localctx = evaql_parser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 799
                self.match(evaql_parser.FLOAT)
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.LR_BRACKET:
                    self.state = 800
                    self.lengthTwoDimension()


                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.UNSIGNED:
                    self.state = 803
                    self.match(evaql_parser.UNSIGNED)


                pass
            elif token in [evaql_parser.NDARRAY]:
                localctx = evaql_parser.ArrayDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 806
                self.match(evaql_parser.NDARRAY)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (evaql_parser.INT8 - 87)) | (1 << (evaql_parser.UINT8 - 87)) | (1 << (evaql_parser.INT16 - 87)) | (1 << (evaql_parser.INT32 - 87)) | (1 << (evaql_parser.INT64 - 87)) | (1 << (evaql_parser.UNICODE - 87)) | (1 << (evaql_parser.BOOL - 87)) | (1 << (evaql_parser.FLOAT32 - 87)) | (1 << (evaql_parser.FLOAT64 - 87)) | (1 << (evaql_parser.DECIMAL - 87)) | (1 << (evaql_parser.STR - 87)) | (1 << (evaql_parser.DATETIME - 87)) | (1 << (evaql_parser.ANYTYPE - 87)))) != 0):
                    self.state = 807
                    self.arrayType()


                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.LR_BRACKET:
                    self.state = 810
                    self.lengthDimensionList()


                pass
            elif token in [evaql_parser.ANYTYPE]:
                localctx = evaql_parser.AnyDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 813
                self.match(evaql_parser.ANYTYPE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthOneDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_lengthOneDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthOneDimension" ):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthOneDimension" ):
                listener.exitLengthOneDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthOneDimension" ):
                return visitor.visitLengthOneDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthOneDimension(self):

        localctx = evaql_parser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(evaql_parser.LR_BRACKET)
            self.state = 817
            self.decimalLiteral()
            self.state = 818
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(evaql_parser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_lengthTwoDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoDimension" ):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoDimension" ):
                listener.exitLengthTwoDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthTwoDimension" ):
                return visitor.visitLengthTwoDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthTwoDimension(self):

        localctx = evaql_parser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(evaql_parser.LR_BRACKET)
            self.state = 821
            self.decimalLiteral()
            self.state = 822
            self.match(evaql_parser.COMMA)
            self.state = 823
            self.decimalLiteral()
            self.state = 824
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthDimensionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_lengthDimensionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthDimensionList" ):
                listener.enterLengthDimensionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthDimensionList" ):
                listener.exitLengthDimensionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthDimensionList" ):
                return visitor.visitLengthDimensionList(self)
            else:
                return visitor.visitChildren(self)




    def lengthDimensionList(self):

        localctx = evaql_parser.LengthDimensionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_lengthDimensionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(evaql_parser.LR_BRACKET)
            self.state = 832
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 827
                    self.decimalLiteral()
                    self.state = 828
                    self.match(evaql_parser.COMMA) 
                self.state = 834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

            self.state = 835
            self.decimalLiteral()
            self.state = 836
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.UidContext)
            else:
                return self.getTypedRuleContext(evaql_parser.UidContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUidList" ):
                return visitor.visitUidList(self)
            else:
                return visitor.visitChildren(self)




    def uidList(self):

        localctx = evaql_parser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_uidList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.uid()
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 839
                self.match(evaql_parser.COMMA)
                self.state = 840
                self.uid()
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.TableNameContext)
            else:
                return self.getTypedRuleContext(evaql_parser.TableNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTables" ):
                return visitor.visitTables(self)
            else:
                return visitor.visitChildren(self)




    def tables(self):

        localctx = evaql_parser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.tableName()
            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 847
                self.match(evaql_parser.COMMA)
                self.state = 848
                self.tableName()
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(evaql_parser.IndexColumnNameContext,i)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexColumnNames" ):
                return visitor.visitIndexColumnNames(self)
            else:
                return visitor.visitChildren(self)




    def indexColumnNames(self):

        localctx = evaql_parser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(evaql_parser.LR_BRACKET)
            self.state = 855
            self.indexColumnName()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 856
                self.match(evaql_parser.COMMA)
                self.state = 857
                self.indexColumnName()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 863
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = evaql_parser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.expression(0)
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 866
                self.match(evaql_parser.COMMA)
                self.state = 867
                self.expression(0)
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsWithDefaultsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionOrDefaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionsWithDefaults" ):
                return visitor.visitExpressionsWithDefaults(self)
            else:
                return visitor.visitChildren(self)




    def expressionsWithDefaults(self):

        localctx = evaql_parser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.expressionOrDefault()
            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 874
                self.match(evaql_parser.COMMA)
                self.state = 875
                self.expressionOrDefault()
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(evaql_parser.NULL_LITERAL, 0)

        def constant(self):
            return self.getTypedRuleContext(evaql_parser.ConstantContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = evaql_parser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_defaultValue)
        try:
            self.state = 883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.match(evaql_parser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(evaql_parser.DEFAULT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionOrDefault" ):
                return visitor.visitExpressionOrDefault(self)
            else:
                return visitor.visitChildren(self)




    def expressionOrDefault(self):

        localctx = evaql_parser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_expressionOrDefault)
        try:
            self.state = 887
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self.expression(0)
                pass
            elif token in [evaql_parser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.match(evaql_parser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(evaql_parser.IF, 0)

        def EXISTS(self):
            return self.getToken(evaql_parser.EXISTS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExists" ):
                return visitor.visitIfExists(self)
            else:
                return visitor.visitChildren(self)




    def ifExists(self):

        localctx = evaql_parser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(evaql_parser.IF)
            self.state = 890
            self.match(evaql_parser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(evaql_parser.IF, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(evaql_parser.EXISTS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNotExists" ):
                return visitor.visitIfNotExists(self)
            else:
                return visitor.visitChildren(self)




    def ifNotExists(self):

        localctx = evaql_parser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(evaql_parser.IF)
            self.state = 893
            self.match(evaql_parser.NOT)
            self.state = 894
            self.match(evaql_parser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def udfFunction(self):
            return self.getTypedRuleContext(evaql_parser.UdfFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfFunctionCall" ):
                return visitor.visitUdfFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(evaql_parser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionCall" ):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionCall" ):
                listener.exitAggregateFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateFunctionCall" ):
                return visitor.visitAggregateFunctionCall(self)
            else:
                return visitor.visitChildren(self)



    def functionCall(self):

        localctx = evaql_parser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_functionCall)
        try:
            self.state = 898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID]:
                localctx = evaql_parser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.udfFunction()
                pass
            elif token in [evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM]:
                localctx = evaql_parser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.aggregateWindowedFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(evaql_parser.SimpleIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(evaql_parser.FunctionArgsContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def dottedId(self):
            return self.getTypedRuleContext(evaql_parser.DottedIdContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunction" ):
                listener.enterUdfFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunction" ):
                listener.exitUdfFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfFunction" ):
                return visitor.visitUdfFunction(self)
            else:
                return visitor.visitChildren(self)




    def udfFunction(self):

        localctx = evaql_parser.UdfFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_udfFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.simpleId()
            self.state = 901
            self.match(evaql_parser.LR_BRACKET)
            self.state = 902
            self.functionArgs()
            self.state = 903
            self.match(evaql_parser.RR_BRACKET)
            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 904
                self.dottedId()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateWindowedFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregator = None # Token
            self.starArg = None # Token

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(evaql_parser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(evaql_parser.AVG, 0)

        def MAX(self):
            return self.getToken(evaql_parser.MAX, 0)

        def MIN(self):
            return self.getToken(evaql_parser.MIN, 0)

        def SUM(self):
            return self.getToken(evaql_parser.SUM, 0)

        def ALL(self):
            return self.getToken(evaql_parser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(evaql_parser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(evaql_parser.COUNT, 0)

        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_aggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateWindowedFunction" ):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateWindowedFunction" ):
                listener.exitAggregateWindowedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateWindowedFunction" ):
                return visitor.visitAggregateWindowedFunction(self)
            else:
                return visitor.visitChildren(self)




    def aggregateWindowedFunction(self):

        localctx = evaql_parser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.AVG, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                _la = self._input.LA(1)
                if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (evaql_parser.AVG - 100)) | (1 << (evaql_parser.MAX - 100)) | (1 << (evaql_parser.MIN - 100)) | (1 << (evaql_parser.SUM - 100)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 908
                self.match(evaql_parser.LR_BRACKET)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.ALL or _la==evaql_parser.DISTINCT:
                    self.state = 909
                    localctx.aggregator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==evaql_parser.ALL or _la==evaql_parser.DISTINCT):
                        localctx.aggregator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 912
                self.functionArg()
                self.state = 913
                self.match(evaql_parser.RR_BRACKET)
                pass
            elif token in [evaql_parser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(evaql_parser.COUNT)
                self.state = 916
                self.match(evaql_parser.LR_BRACKET)
                self.state = 922
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [evaql_parser.STAR]:
                    self.state = 917
                    localctx.starArg = self.match(evaql_parser.STAR)
                    pass
                elif token in [evaql_parser.ALL, evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                    self.state = 919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.ALL:
                        self.state = 918
                        localctx.aggregator = self.match(evaql_parser.ALL)


                    self.state = 921
                    self.functionArg()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 924
                self.match(evaql_parser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ConstantContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(evaql_parser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgs" ):
                return visitor.visitFunctionArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionArgs(self):

        localctx = evaql_parser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 927
                self.constant()
                pass

            elif la_ == 2:
                self.state = 928
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 929
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 930
                self.expression(0)
                pass


            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 933
                self.match(evaql_parser.COMMA)
                self.state = 938
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 934
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 935
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 936
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 937
                    self.expression(0)
                    pass


                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(evaql_parser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArg" ):
                return visitor.visitFunctionArg(self)
            else:
                return visitor.visitChildren(self)




    def functionArg(self):

        localctx = evaql_parser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_functionArg)
        try:
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 945
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 946
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 947
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 948
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def IS(self):
            return self.getToken(evaql_parser.IS, 0)
        def TRUE(self):
            return self.getToken(evaql_parser.TRUE, 0)
        def FALSE(self):
            return self.getToken(evaql_parser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(evaql_parser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsExpression" ):
                return visitor.visitIsExpression(self)
            else:
                return visitor.visitChildren(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)
        def EXCLAMATION_SYMBOL(self):
            return self.getToken(evaql_parser.EXCLAMATION_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpression" ):
                return visitor.visitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(evaql_parser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalExpression" ):
                return visitor.visitLogicalExpression(self)
            else:
                return visitor.visitChildren(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateExpression" ):
                return visitor.visitPredicateExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 182
        self.enterRecursionRule(localctx, 182, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                localctx = evaql_parser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 952
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.NOT or _la==evaql_parser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 953
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = evaql_parser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 954
                self.predicate(0)
                self.state = 955
                self.match(evaql_parser.IS)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.NOT:
                    self.state = 956
                    self.match(evaql_parser.NOT)


                self.state = 959
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << evaql_parser.FALSE) | (1 << evaql_parser.TRUE) | (1 << evaql_parser.UNKNOWN))) != 0)):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = evaql_parser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 961
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 970
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = evaql_parser.LogicalExpressionContext(self, evaql_parser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 964
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 965
                    self.logicalOperator()
                    self.state = 966
                    self.expression(4) 
                self.state = 972
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(evaql_parser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(evaql_parser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionAtomPredicate" ):
                return visitor.visitExpressionAtomPredicate(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(evaql_parser.ComparisonOperatorContext,0)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)
        def ALL(self):
            return self.getToken(evaql_parser.ALL, 0)
        def ANY(self):
            return self.getToken(evaql_parser.ANY, 0)
        def SOME(self):
            return self.getToken(evaql_parser.SOME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryComparisonPredicate" ):
                listener.enterSubqueryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryComparisonPredicate" ):
                listener.exitSubqueryComparisonPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryComparisonPredicate" ):
                return visitor.visitSubqueryComparisonPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BinaryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(evaql_parser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.PredicateContext)
            else:
                return self.getTypedRuleContext(evaql_parser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparisonPredicate" ):
                listener.enterBinaryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparisonPredicate" ):
                listener.exitBinaryComparisonPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryComparisonPredicate" ):
                return visitor.visitBinaryComparisonPredicate(self)
            else:
                return visitor.visitChildren(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def IN(self):
            return self.getToken(evaql_parser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInPredicate" ):
                return visitor.visitInPredicate(self)
            else:
                return visitor.visitChildren(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def IS(self):
            return self.getToken(evaql_parser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(evaql_parser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsNullPredicate" ):
                return visitor.visitIsNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.PredicateContext)
            else:
                return self.getTypedRuleContext(evaql_parser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(evaql_parser.LIKE, 0)
        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)
        def STRING_LITERAL(self):
            return self.getToken(evaql_parser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikePredicate" ):
                return visitor.visitLikePredicate(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = evaql_parser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LOCAL_ID:
                self.state = 974
                self.match(evaql_parser.LOCAL_ID)
                self.state = 975
                self.match(evaql_parser.VAR_ASSIGN)


            self.state = 978
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1017
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1015
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                    if la_ == 1:
                        localctx = evaql_parser.BinaryComparisonPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 980
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 981
                        self.comparisonOperator()
                        self.state = 982
                        localctx.right = self.predicate(5)
                        pass

                    elif la_ == 2:
                        localctx = evaql_parser.InPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 984
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 986
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==evaql_parser.NOT:
                            self.state = 985
                            self.match(evaql_parser.NOT)


                        self.state = 988
                        self.match(evaql_parser.IN)
                        self.state = 989
                        self.match(evaql_parser.LR_BRACKET)
                        self.state = 992
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [evaql_parser.SELECT]:
                            self.state = 990
                            self.selectStatement(0)
                            pass
                        elif token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                            self.state = 991
                            self.expressions()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 994
                        self.match(evaql_parser.RR_BRACKET)
                        pass

                    elif la_ == 3:
                        localctx = evaql_parser.IsNullPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 996
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 997
                        self.match(evaql_parser.IS)
                        self.state = 998
                        self.nullNotnull()
                        pass

                    elif la_ == 4:
                        localctx = evaql_parser.SubqueryComparisonPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 999
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1000
                        self.comparisonOperator()
                        self.state = 1001
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << evaql_parser.ALL) | (1 << evaql_parser.ANY) | (1 << evaql_parser.SOME))) != 0)):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1002
                        self.match(evaql_parser.LR_BRACKET)
                        self.state = 1003
                        self.selectStatement(0)
                        self.state = 1004
                        self.match(evaql_parser.RR_BRACKET)
                        pass

                    elif la_ == 5:
                        localctx = evaql_parser.LikePredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1006
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1008
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==evaql_parser.NOT:
                            self.state = 1007
                            self.match(evaql_parser.NOT)


                        self.state = 1010
                        self.match(evaql_parser.LIKE)
                        self.state = 1011
                        self.predicate(0)
                        self.state = 1013
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 1012
                            self.match(evaql_parser.STRING_LITERAL)


                        pass

             
                self.state = 1019
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionAtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(evaql_parser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpressionAtom" ):
                return visitor.visitUnaryExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpessionAtom" ):
                listener.enterSubqueryExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpessionAtom" ):
                listener.exitSubqueryExpessionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpessionAtom" ):
                return visitor.visitSubqueryExpessionAtom(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(evaql_parser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpressionAtom" ):
                return visitor.visitConstantExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallExpressionAtom" ):
                return visitor.visitFunctionCallExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnNameExpressionAtom" ):
                return visitor.visitFullColumnNameExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(evaql_parser.BitOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpressionAtom" ):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpressionAtom" ):
                listener.exitBitExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitExpressionAtom" ):
                return visitor.visitBitExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedExpressionAtom" ):
                return visitor.visitNestedExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(evaql_parser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathExpressionAtom" ):
                return visitor.visitMathExpressionAtom(self)
            else:
                return visitor.visitChildren(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 186
        self.enterRecursionRule(localctx, 186, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                localctx = evaql_parser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1021
                self.constant()
                pass

            elif la_ == 2:
                localctx = evaql_parser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1022
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = evaql_parser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1023
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = evaql_parser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1024
                self.unaryOperator()
                self.state = 1025
                self.expressionAtom(5)
                pass

            elif la_ == 5:
                localctx = evaql_parser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1027
                self.match(evaql_parser.LR_BRACKET)
                self.state = 1028
                self.expression(0)
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==evaql_parser.COMMA:
                    self.state = 1029
                    self.match(evaql_parser.COMMA)
                    self.state = 1030
                    self.expression(0)
                    self.state = 1035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1036
                self.match(evaql_parser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = evaql_parser.SubqueryExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1038
                self.match(evaql_parser.LR_BRACKET)
                self.state = 1039
                self.selectStatement(0)
                self.state = 1040
                self.match(evaql_parser.RR_BRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1054
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1052
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        localctx = evaql_parser.BitExpressionAtomContext(self, evaql_parser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1044
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1045
                        self.bitOperator()
                        self.state = 1046
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 2:
                        localctx = evaql_parser.MathExpressionAtomContext(self, evaql_parser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1048
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1049
                        self.mathOperator()
                        self.state = 1050
                        localctx.right = self.expressionAtom(2)
                        pass

             
                self.state = 1056
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(evaql_parser.EXCLAMATION_SYMBOL, 0)

        def BIT_NOT_OP(self):
            return self.getToken(evaql_parser.BIT_NOT_OP, 0)

        def PLUS(self):
            return self.getToken(evaql_parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(evaql_parser.MINUS, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = evaql_parser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            _la = self._input.LA(1)
            if not(_la==evaql_parser.NOT or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (evaql_parser.PLUS - 132)) | (1 << (evaql_parser.MINUS - 132)) | (1 << (evaql_parser.EXCLAMATION_SYMBOL - 132)) | (1 << (evaql_parser.BIT_NOT_OP - 132)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(evaql_parser.EQUAL_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(evaql_parser.GREATER_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(evaql_parser.LESS_SYMBOL, 0)

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(evaql_parser.EXCLAMATION_SYMBOL, 0)

        def AT_SIGN(self):
            return self.getToken(evaql_parser.AT_SIGN, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = evaql_parser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_comparisonOperator)
        try:
            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1059
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1061
                self.match(evaql_parser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1062
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1063
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1064
                self.match(evaql_parser.GREATER_SYMBOL)
                self.state = 1065
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1066
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1067
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1068
                self.match(evaql_parser.EXCLAMATION_SYMBOL)
                self.state = 1069
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1070
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1071
                self.match(evaql_parser.EQUAL_SYMBOL)
                self.state = 1072
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1073
                self.match(evaql_parser.AT_SIGN)
                self.state = 1074
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1075
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1076
                self.match(evaql_parser.AT_SIGN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(evaql_parser.AND, 0)

        def BIT_AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.BIT_AND_OP)
            else:
                return self.getToken(evaql_parser.BIT_AND_OP, i)

        def XOR(self):
            return self.getToken(evaql_parser.XOR, 0)

        def OR(self):
            return self.getToken(evaql_parser.OR, 0)

        def BIT_OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.BIT_OR_OP)
            else:
                return self.getToken(evaql_parser.BIT_OR_OP, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOperator" ):
                return visitor.visitLogicalOperator(self)
            else:
                return visitor.visitChildren(self)




    def logicalOperator(self):

        localctx = evaql_parser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_logicalOperator)
        try:
            self.state = 1086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1079
                self.match(evaql_parser.AND)
                pass
            elif token in [evaql_parser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.match(evaql_parser.BIT_AND_OP)
                self.state = 1081
                self.match(evaql_parser.BIT_AND_OP)
                pass
            elif token in [evaql_parser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1082
                self.match(evaql_parser.XOR)
                pass
            elif token in [evaql_parser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1083
                self.match(evaql_parser.OR)
                pass
            elif token in [evaql_parser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1084
                self.match(evaql_parser.BIT_OR_OP)
                self.state = 1085
                self.match(evaql_parser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.LESS_SYMBOL)
            else:
                return self.getToken(evaql_parser.LESS_SYMBOL, i)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.GREATER_SYMBOL)
            else:
                return self.getToken(evaql_parser.GREATER_SYMBOL, i)

        def BIT_AND_OP(self):
            return self.getToken(evaql_parser.BIT_AND_OP, 0)

        def BIT_XOR_OP(self):
            return self.getToken(evaql_parser.BIT_XOR_OP, 0)

        def BIT_OR_OP(self):
            return self.getToken(evaql_parser.BIT_OR_OP, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_bitOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOperator" ):
                listener.enterBitOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOperator" ):
                listener.exitBitOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOperator" ):
                return visitor.visitBitOperator(self)
            else:
                return visitor.visitChildren(self)




    def bitOperator(self):

        localctx = evaql_parser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_bitOperator)
        try:
            self.state = 1095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.LESS_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1088
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1089
                self.match(evaql_parser.LESS_SYMBOL)
                pass
            elif token in [evaql_parser.GREATER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1090
                self.match(evaql_parser.GREATER_SYMBOL)
                self.state = 1091
                self.match(evaql_parser.GREATER_SYMBOL)
                pass
            elif token in [evaql_parser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1092
                self.match(evaql_parser.BIT_AND_OP)
                pass
            elif token in [evaql_parser.BIT_XOR_OP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1093
                self.match(evaql_parser.BIT_XOR_OP)
                pass
            elif token in [evaql_parser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1094
                self.match(evaql_parser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(evaql_parser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(evaql_parser.MODULE, 0)

        def DIV(self):
            return self.getToken(evaql_parser.DIV, 0)

        def MOD(self):
            return self.getToken(evaql_parser.MOD, 0)

        def PLUS(self):
            return self.getToken(evaql_parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(evaql_parser.MINUS, 0)

        def MINUSMINUS(self):
            return self.getToken(evaql_parser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathOperator" ):
                return visitor.visitMathOperator(self)
            else:
                return visitor.visitChildren(self)




    def mathOperator(self):

        localctx = evaql_parser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            _la = self._input.LA(1)
            if not(((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (evaql_parser.STAR - 129)) | (1 << (evaql_parser.DIVIDE - 129)) | (1 << (evaql_parser.MODULE - 129)) | (1 << (evaql_parser.PLUS - 129)) | (1 << (evaql_parser.MINUSMINUS - 129)) | (1 << (evaql_parser.MINUS - 129)) | (1 << (evaql_parser.DIV - 129)) | (1 << (evaql_parser.MOD - 129)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[26] = self.selectStatement_sempred
        self._predicates[91] = self.expression_sempred
        self._predicates[92] = self.predicate_sempred
        self._predicates[93] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def selectStatement_sempred(self, localctx:SelectStatementContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         




