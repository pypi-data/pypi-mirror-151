import{de as t}from"./main-ac83c92b.js";import{C as e,a as s,b as n,c as a,d as i}from"./c.9184f690.js";const r=t=>((t,e,s)=>new Promise(((n,a)=>{const i=document.createElement(t);let r="src",o="body";switch(i.onload=()=>n(e),i.onerror=()=>a(e),t){case"script":i.async=!0,s&&(i.type=s);break;case"link":i.type="text/css",i.rel="stylesheet",r="href",o="head"}i[r]=e,document[o].appendChild(i)})))("script",t);let o;let c;class h{constructor(s){t(this,"auth",void 0),t(this,"status",void 0),t(this,"_eventListeners",{}),this.auth=s;const n=this.castContext;n.setOptions({receiverApplicationId:e,autoJoinPolicy:chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED}),n.addEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED,(t=>this._sessionStateChanged(t))),n.addEventListener(cast.framework.CastContextEventType.CAST_STATE_CHANGED,(t=>this._castStateChanged(t)))}addEventListener(t,e){return t in this._eventListeners||(this._eventListeners[t]=[]),this._eventListeners[t].push(e),()=>{this._eventListeners[t].splice(this._eventListeners[t].indexOf(e))}}get castConnectedToOurHass(){return void 0!==this.status&&void 0!==this.auth&&this.status.connected&&(this.status.hassUrl===this.auth.data.hassUrl||s&&this.status.hassUrl===n)}sendMessage(t){this.castSession.sendMessage(a,t)}get castState(){return this.castContext.getCastState()}get castContext(){return cast.framework.CastContext.getInstance()}get castSession(){return this.castContext.getCurrentSession()}requestSession(){return this.castContext.requestSession()}_fireEvent(t){for(const e of this._eventListeners[t]||[])e()}_receiveMessage(t){"receiver_status"===t.type&&(this.status=t,this._fireEvent("connection-changed"))}_sessionStateChanged(t){"SESSION_STARTED"===t.sessionState||"SESSION_RESUMED"===t.sessionState?(this.auth?i(this,this.auth):this.sendMessage({type:"get_status"}),this._attachMessageListener()):"SESSION_ENDED"===t.sessionState&&(this.status=void 0,this._fireEvent("connection-changed"))}_castStateChanged(t){this._fireEvent("state-changed")}_attachMessageListener(){this.castSession.addMessageListener(a,((t,e)=>this._receiveMessage(JSON.parse(e))))}}const d=t=>(c||(c=(()=>{if(o)return o;o=new Promise((t=>{window.__onGCastApiAvailable=t}));const t=document.createElement("div");return t.id="cast",document.body.append(t),r("https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1"),o})().then((e=>{if(!e)throw new Error("No Cast API available");return new h(t)}))),c);export{h as CastManager,d as getCastManager};
