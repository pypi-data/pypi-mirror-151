# AUTOGENERATED! DO NOT EDIT! File to edit: 02_CLI.ipynb (unless otherwise specified).

__all__ = []

# Cell
# export
import click
from pathlib import Path
import os
import ase
from ase.calculators.vasp import Vasp
from ase import units as un
from numpy import savetxt, loadtxt
from .core import *
import hecss

# Internal Cell
# exporti
def dfset_writer(s, sl, workdir='', dfset='', scale='', xsl=None):
    '''
    Write samples to the DFSET file in the workdir directory.
    If the scale and xsl list are not empy save amplitude correction
    and empty the xsl list (!).
    '''
    wd = Path(workdir)
    write_dfset(f'{wd.joinpath(dfset)}', s)
    if scale and xsl:
        with open(wd.joinpath(scale), 'at') as sf:
            for xs in xsl:
                savetxt(sf, xs, fmt='%8.5f', header=f'{xs.shape}, {len(sl)}, {len(xsl)}')
        xsl.clear()
    # Important! Return False to keep iteration going
    return False

# Internal Cell
# exporti
_version_message=("HECSS, version %(version)s\n"
                  'High Efficiency Configuration Space Sampler\n'
                  '(C) 2021-2022 by Pawe≈Ç T. Jochym\n'
                  '    License: GPL v3 or later')

# Internal Cell
# exporti
@click.command()
@click.argument('fname', type=click.Path(exists=True))
@click.option('-W', '--workdir', default="WORK", type=click.Path(exists=True), help="Work directory")
@click.option('-l', '--label', default="hecss", help="Label for the calculations.")
@click.option('-T', '--temp', default=300, type=float, help="Target temperature in Kelvin.")
@click.option('-w', '--width', default=1.0, type=float, help="Initial scale of the prior distribution")
@click.option('-a', '--ampl', default='', type=click.Path(), help='Initialise amplitude correction from the file.')
@click.option('-s', '--scale', default='', type=click.Path(), help='Save amplitude correction history')
@click.option('-C', '--calc', default="VASP", type=str,
              help="ASE calculator to be used for the job. "
                      "Supported calculators: VASP (default)")
@click.option('-n', '--nodfset', is_flag=True, help='Do not write DFSET file for ALAMODE')
@click.option('-d', '--dfset', default='DFSET.dat', help='Name of the DFSET file')
@click.option('-N', '--nsamples', default=10, type=int, help="Number of samples to be generated")
@click.option('-c', '--command', default='./run-calc', help="Command to run calculator")
@click.version_option(hecss.__version__, '-V', '--version', message=_version_message)
@click.help_option('-h', '--help')
def hecss_sampler(fname, workdir, label, temp, width, ampl, scale, calc, nodfset, dfset, nsamples, command):
    '''
    Run HECSS sampler on the structure in the provided file (FNAME).\b
    Read the docs at: https://jochym.gitlab.io/hecss/

    \b
    FNAME - Supercell structure file. The containing
            directory must be readable by Vasp(restart).
            Usually this is a CONTCAR file for a supercell.
    '''

    print(f'HECSS ({hecss.__version__})\n'
          f'Supercell:      {fname}\n'
          f'Temperature:    {temp}K\n'
          f'Work directory: {workdir}\n'
          f'Calculator:     {calc}')

    src_path = Path(fname)

    if calc=="VASP":
        calculator = Vasp(label=label, directory=src_path.parent, restart=True)
        cryst = ase.Atoms(calculator.atoms)
        cryst.set_calculator(calculator)
        calculator.set(directory=workdir)
        command = Path(command)
        calculator.set(command=f'{command.absolute()} {label}')
    else:
        print(f'The {calc} calculator is not supported.')
        return

    if nodfset :
        sentinel = None
    else :
        sentinel = dfset_writer

    xsl = None
    if scale:
        xsl = []

    xsi = None
    if ampl:
        xsi = loadtxt(ampl)

    sampler = HECSS(cryst, calculator, temp, directory=workdir, width=width, xscale_init=xsi, xscale_list=xsl)
    samples = sampler.generate(nsamples, sentinel=sentinel, workdir=workdir, dfset=dfset, scale=scale, xsl=xsl)
    return

# Internal Cell
# exporti
@click.command()
@click.argument('supercell', type=click.Path(exists=True))
@click.argument('scale', type=click.Path(exists=True))
@click.option('-o', '--output', type=click.Path(), default="", help='Write output to the file.')
@click.option('-s', '--skip', default=0, type=int, help='Skip this number of samples at the beginning')
@click.version_option(hecss.__version__, '-V', '--version', message=_version_message)
@click.help_option('-h', '--help')
def calculate_xscale(supercell, scale, output, skip):
    '''
    Calculate initial values for amplitude correction coefficients
    from the scale file data for the specified supercell.
    '''
    sc = ase.io.read(supercell)
    xsl = loadtxt(scale).reshape((-1, len(sc), 3))
    xsi = calc_init_xscale(sc, xsl, skip=skip if skip else None)
    savetxt(output, xsi, fmt='%9.4f')

# Internal Cell
# exporti
@click.command()
@click.argument('dfset', type=click.Path(exists=True))
@click.argument('T', type=float)
@click.option('-n', '--sqrn', is_flag=True, help='Show sqrt(N) bars on the histogram.')
@click.option('-s', '--sixel', is_flag=True, help='Use SixEl driver for terminal graphics.')
@click.option('-w', '--width', type=float, default=6, help='Width of the figure.')
@click.option('-h', '--height', type=float, default=4, help='Height of the figure.')
@click.option('-o', '--output', type=click.Path(), default="", help='Write output to the file.')
@click.option('-x', is_flag=True, default=False, help='Make plot in an interactive window')
@click.version_option(hecss.__version__, '-V', '--version', message=_version_message)
def plot_stats( dfset, t, output, x, sixel, sqrn, width, height):
    """
    Plot the statistics of the samples from the DFSET file.
    Use T(K) as a reference target temperature. Optionally
    write out the plot to the output graphics file.
    """
    import hecss.monitor as hm
    import matplotlib.pylab as plt

    p = Path(dfset)

    plt.figure(figsize=(float(width), float(height)))
    hm.plot_stats(hm.load_dfset(p.parent, p.name), T=t, sqrN=sqrn, show=x)
    if output:
        plt.savefig(output)
    if sixel:
        try :
            import sixelplot
        except ImportError:
            print('SixEl graphics support not installed. Install sixelplot package.')
            return
        sixelplot.show()

# Internal Cell
# exporti
@click.command()
@click.argument('bands', type=click.Path(exists=True), nargs=-1)
@click.option('-s', '--sixel', is_flag=True, help='Use SixEl driver for terminal graphics.')
@click.option('-n', '--nodecor', is_flag=True, help='Decorate the plot.')
@click.option('-w', '--width', type=float, default=6, help='Width of the figure.')
@click.option('-h', '--height', type=float, default=4, help='Height of the figure.')
@click.option('-o', '--output', type=click.Path(), default="",
              help='Write output to the file.')
@click.option('-l', '--label', type=str, default="",
              help='Label(s) for the plot. Comma-separated list')
@click.option('-x', is_flag=True, default=False,
              help='Make plot in an interactive window')
@click.version_option(hecss.__version__, '-V', '--version', message=_version_message)
def plot_bands( bands, output, x, sixel, width, height, label, nodecor):
    """
    Plot the phonon dispersion from the file generated by ALAMODE.
    Optionally write out the plot to the output graphics file.
    """
    import hecss.monitor as hm
    import matplotlib.pylab as plt


    plt.figure(figsize=(float(width), float(height)))

    ll = label.split(',')
    if len(ll) < len(bands):
        cp = os.path.commonpath(bands)
        rpl = [p[len(cp):][::-1] for p in bands]
        cs = os.path.commonpath(rpl)
        ll = [p[len(cp):-len(cs)] for p in bands]

    for b, l in zip(bands, ll):
        p = Path(b)

        hm.plot_bands_file(p, lbl=l, decorate=not nodecor)

    if label or len(bands)>1:
        plt.legend()

    if output:
        plt.savefig(output)
    if sixel:
        try :
            import sixelplot
        except ImportError:
            print('SixEl graphics support not installed. Install sixelplot package.')
            return
        sixelplot.show()