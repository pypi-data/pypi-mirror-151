/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/MixinNetwork/mixin */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */



#line 3 "mixin_api.go"
 static char* get_p(char **pp, int i)
 {
	    return pp[i];
 }

#line 1 "cgo-generated-wrapper"

#line 19 "pin.go"

#include <stdint.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
// typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
// typedef float _Complex GoComplex64;
// typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern GoInt MixinMain(char* _args);
extern void Init();
extern char* CreateAddress(char* _params);
extern char* DecodeAddress(char* _address);
extern char* DecodeSignature(char* _signature);
extern char* DecryptGhost(char* _ghostKey);
extern char* DecodeTransaction(char* _raw);
extern char* EncodeTransaction(char* params, char* signs);
extern char* SignTransaction(char* _params);
extern char* SignRawTransaction(char* _params);
extern char* AddSignaturesToRawTransaction(char* _raw, char* signs);
extern char* BuildRawTransaction(char* _params);
extern char* PledgeNode(char* _params);
extern char* CancelNode(char* _params);
extern char* DecodePledgeNode(char* _params);
extern char* BuildTransactionWithGhostKeys(char* assetId_, char* ghostKeys_, char* trxHash_, char* outputAmount_, char* memo_, GoInt outputIndex_);
extern char* GetPublicKey(char* _private);
extern char* SignMessage(char* _key, char* _msg);
extern char* VerifySignature(char* _msg, char* _pub, char* _sig);
extern char* GetAssetId(char* _asset);
extern char* GetFeeAssetId(char* _asset);
extern GoUint8 BatchVerify(char* msg, int msg_size, char** keys, int keys_size, char** sigs, int sigs_size);
extern char* NewGhostKeys(char* _seed, char* accounts, int outputs);
extern char* GetMixinVersion();
extern char* GenerateRandomSeed();
extern char* EncryptEd25519PIN(char* pin, char* pinTokenBase64, char* sessionId, char* privateKey, uint64_t interator);

#ifdef __cplusplus
}
#endif
