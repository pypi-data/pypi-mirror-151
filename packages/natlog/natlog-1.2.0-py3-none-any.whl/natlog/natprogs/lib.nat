true.

eq X X.

member X (X _).
member X (_ Xs) : member X Xs.

append () Xs Xs.
append (X Xs) Ys (X Zs) : append Xs Ys Zs.

permute () ().
permute (X Xs) Zs : permute Xs Ys, insert X Ys Zs.

insert X Xs (X Xs).
insert X (Y Xs) (Y Ys) : insert X Xs Ys.

select X Xs Ys : insert X Ys Xs.


% metacall operations require arguments parenthesized.

or X _ : call X.
or _ Y : call Y.

once X : if X true fail.

maplist _ ().
maplist F (X Xs) : F X , maplist F Xs.

maplist _ () ().
maplist F (X Xs) (Y Ys) : F X Y, maplist F Xs Ys.

maplist _ () () ().
maplist F (X Xs) (Y Ys) (Z Zs) : F X Y Z, maplist F Xs Ys Zs.

nth 0 (X _) X .
nth N (_ Xs) R : @ N > 0, - N 1 M , nth M Xs R.

max X Y Z : `max X Y Z.
min X Y Z : `min X Y Z.
sum X Y Z : `add X Y Z.

between A B X : + B 1 SB, `` range A SB X.

arg I T X : `arg T I X.
tuple Xs T : `from_goal Xs T.
list T Xs : `to_goal T Xs.

findall X G Xs : eng X G E, ask E Y, collect E Y Xs.

collect _ no ().
collect E (the X) (X Xs) : ask E Y, collect E Y Xs.

copy_term T CT : eng T true E, ask E (the CT).


in E X : ask E A, more in E A X.

more in E (the X) X.
more in E (the _) X : in E X.

+ X Y Z  : `add X Y Z.
- X Y Z  : `sub X Y Z.
* X Y Z  : `mul X Y Z.
/ X  Y Z : `truediv X Y Z.
// Z X Y : `floordiv X Y Z.

% defs that have a var as 1-st arg should start with @ .

@ X < Y  : `lt X Y R, `int R 1.
@ X > Y  : `gt X Y R, `int R 1.
@ X <= Y : `le X Y R, `int R 1.
@ X >= Y : `ge X Y R, `int R 1.
@ X <> Y : `ne X Y R, `int R 1.
@ X == Y : `eq X Y R, `int R 1.

writeln X : #print X.
nl : #print.

t1 : `numlist 1 5 X, #print X, maplist permute (X (X ())) Ys, #print Ys, fail.
t2 : `numlist 1 5 X, `numlist 11 15 Y, maplist sum X Y Z, #print Z, fail.
t3 : `numlist 1 5 X, nth 2 X R, #print R ,fail.
t4 : list (1 2 3) Xs, permute Xs Ys, #print Ys, fail.

t5 : list (1 2 3) Xs, #print Xs, eng X (member X Xs) E,  #print E,
     ask E R1, ask E R2, ask E R3, ask E R4, #print R1 R2 R3 R4, fail.

p 1.
p 2.
p 3.
p 4.


t6 : eng X (p X) E, #print engine  E,
     ask E R1, ask E R2, ask E R3, ask E R4, #print results R1 R2 R3 R4, fail.
