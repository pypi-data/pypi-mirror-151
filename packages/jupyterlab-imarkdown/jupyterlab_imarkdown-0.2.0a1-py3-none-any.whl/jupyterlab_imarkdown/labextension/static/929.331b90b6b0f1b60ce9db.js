"use strict";(self.webpackChunkjupyterlab_imarkdown=self.webpackChunkjupyterlab_imarkdown||[]).push([[929],{929:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});function r(e,t){var n,r;const s=null!==(n=null==t?void 0:t.openDelim)&&void 0!==n?n:"{{",o=null!==(r=null==t?void 0:t.closeDelim)&&void 0!==r?r:"}}";e.inline.ruler.after("emphasis","expr",(function(e,t){let n=e.pos;if(e.src[n]!==s[0])return!1;if(e.src.slice(n,n+s.length)!==s)return!1;n+=s.length;const r=n;let i=-1;for(;-1===i;){if(n=e.src.indexOf(o[0],n),-1===n)return!1;e.src.slice(n,n+o.length)===o?(i=n,n+=o.length):n++}const a=e.src.slice(r,i);e.pos=n;const l=e.push("expr","input",0);return l.attrSet("type","hidden"),l.attrSet("class","im-expr"),l.attrSet("value",a),!0}))}const s=(0,n(626).simpleMarkdownItPlugin)("@agoose77/jupyterlab-imarkdown",{id:"markdown-it-expression",title:"Create spans with stored expressions from Markdown",description:"Embed Markdown text in a data attribute in rendered spans",documentationUrls:{Plugin:"..."},plugin:async()=>[r]});var o=n(309),i=n(681),a=n(973),l=n(526);const d="application/vnd.jupyterlab-imarkdown.output",c="application/vnd.jupyterlab-imarkdown.error",u="im-rendered";class p extends a.MarkdownCell{constructor(e){super(e),this.__expressions={},this.__placeholders={},this.__lastContent="",this.__doneRendering=new l.PromiseDelegate,this.__rendermime=e.rendermime}get expressions(){return this.__expressions}get doneRendering(){return this.__doneRendering.promise}_createExpressionResultModel(e){let t;return t="ok"===e.status?{trusted:this.model.trusted,data:e.data,metadata:e.metadata}:{data:{"application/vnd.jupyter.stderr":e.traceback.join("\n")||`${e.ename}: ${e.evalue}`}},this.__rendermime.createModel(t)}_renderExpressionResult(e){const t=this._createExpressionResultModel(e),n=this.__rendermime.preferredMimeType(t.data,"any");if(void 0===n)return console.error("Couldn't find mimetype"),this._renderError();const r=this.__rendermime.createRenderer(n);return r.addClass(u),r.addClass("im-result"),r.renderModel(t),r.node}_renderError(){const e=document.createElement("span");return e.classList.add(u),e.classList.add("im-error"),e}_renderExpression(e){var t;const n=this.model.attachments.get(e);if(void 0===n)return console.error(`Couldn't find attachment ${e}`),this._renderError();const r=null!==(t=n.data[d])&&void 0!==t?t:n.data[c];return void 0!==r?this._renderExpressionResult(r):(console.error(`Couldn't find valid MIME bundle for attachment ${e}`),this._renderError())}renderExpressions(){console.log("Rendering expressions");for(const e in this.__expressions){const t=this._renderExpression(e);this._replaceRenderedExpression(e,t)}}_replaceRenderedExpression(e,t){var n;const r=this.__placeholders[e];null===(n=r.parentNode)||void 0===n||n.replaceChild(t,r),this.__placeholders[e]=t}_waitForRender(e,t){return new Promise((n=>{!function r(){if(null!==e.node.querySelector(".jp-RenderedMarkdown *"))return n();setTimeout(r,t)}()}))}renderInput(e){super.renderInput(e);const t=this.model.value.text;void 0!==this.__lastContent&&this.__lastContent!==t&&(this.__doneRendering=new l.PromiseDelegate,this._waitForRender(e,10).then((()=>{this._identifyExpressions(e),this.renderExpressions(),this.__doneRendering.resolve()})),this.__lastContent=t)}_identifyExpressions(e){const t=e.node.querySelectorAll("input.im-expr");this.__expressions={},this.__placeholders={},t.forEach(((e,t)=>{const n=`jupyterlab-imarkdown-${t}`;this.__expressions[n]=e.value,this.__placeholders[n]=e})),console.log("Found expressions",this.__expressions,this.__placeholders)}}class h extends o.NotebookPanel.ContentFactory{createMarkdownCell(e,t){return e.contentFactory||(e.contentFactory=this),new p(e).initializeState()}}const m=[{id:"@agoose77/jupyterlab-imarkdown:factory",provides:o.NotebookPanel.IContentFactory,requires:[i.IEditorServices],autoStart:!0,activate:(e,t)=>{console.log("Using jupyterlab-imarkdown:editor");const n=t.factoryService.newInlineEditor;return new h({editorFactory:n})}},{id:"@agoose77/jupyterlab-imarkdown:executor",requires:[o.INotebookTracker],autoStart:!0,activate:(e,t)=>{console.log("Using jupyterlab-imarkdown:executor"),o.NotebookActions.executed.connect(((e,n)=>{const{notebook:r,cell:s}=n,o=t.find((e=>e.content===r)),i=null==o?void 0:o.sessionContext;void 0!==i&&function(e){return"markdown"===e.model.type}(s)&&(console.log("Markdown cell was executed, waiting for render to complete ..."),s.doneRendering.then((()=>{console.log("Clearing results from cell attachments"),function(e){const t=e.model.attachments;t.keys.filter((e=>{e.startsWith("jupyterlab-imarkdown")})).map(t.remove)}(s),console.log("Loading results from kernel"),async function(e,t){var n;const r=e.model,s={cellId:r.id},o={code:"",user_expressions:e.expressions};console.log("Performing kernel request",e.expressions);const i=null===(n=t.session)||void 0===n?void 0:n.kernel;if(!i)throw new Error("Session has no kernel.");const a=i.requestExecute(o,!1,Object.assign(Object.assign({},r.metadata.toJSON()),s));a.onReply=t=>{const n=t.content;if("ok"===n.status){console.log("Handling kernel response",t);for(const t in n.user_expressions){const r=n.user_expressions[t],s={};s["error"===r.status?c:d]=r,e.model.attachments.set(t,s),console.log(`Saving ${t} to cell attachments`)}}},await a.done}(s,i).then((()=>{console.log("Re-rendering cell!"),s.renderExpressions()}))})))}))}},s]}}]);