"use strict";(self.webpackChunk_agoose77_jupyterlab_imarkdown=self.webpackChunk_agoose77_jupyterlab_imarkdown||[]).push([[814],{814:(e,s,t)=>{t.r(s),t.d(s,{default:()=>g});var n=t(309),r=t(681),o=t(973),i=t(433),a=t(526);const d="user_expressions";var c=t(352);class l extends c.RenderedCommon{constructor(e){super(e),this.addClass("im-RenderedText")}render(e){return function(e){const{host:s,sanitizer:t,source:n}=e;let r;r=t.sanitize(n,{allowedTags:[]}),e.strip_quotes&&(r=r.replace(/^(["'])(.*)\1$/,"$2"));const o=document.createElement("span");return o.innerHTML=r,s.appendChild(o),Promise.resolve(void 0)}({host:this.node,sanitizer:this.sanitizer,source:String(e.data[this.mimeType]),strip_quotes:!0})}}const u={safe:!0,mimeTypes:["text/plain"],defaultRank:100,createRenderer:e=>new l(e)};class p extends i.Widget{constructor(){super(),this.addClass("im-RenderedExpressionError")}}class h extends i.Widget{constructor(e){super(),this.trusted=e.trusted,this.expression=e.expression,this.rendermime=e.rendermime,this.safe=e.safe,this.addClass("im-RenderedExpression"),(this.layout=new i.SingletonLayout).widget=new p}renderExpression(e){const s=this.layout;let t;t="ok"===e.status?{trusted:this.trusted,data:e.data,metadata:e.metadata}:{data:{"application/vnd.jupyter.stderr":e.traceback.join("\n")||`${e.ename}: ${e.evalue}`}};const n=this.rendermime.createModel(t),r=this.rendermime.preferredMimeType(n.data,this.safe);if(void 0===r)return console.error("Couldn't find mimetype for ",n),s.widget=new p,Promise.resolve();const o=this.rendermime.createRenderer(r);return s.widget=o,console.assert(o.isAttached,"renderer was not attached!",o),o.renderModel(n)}}class m extends o.MarkdownCell{constructor(e){super(e),this.__lastContent="",this._expressions=[],this._doneRendering=new a.PromiseDelegate,this.__rendermime=e.rendermime.clone(),this.__rendermime.addFactory(u),this._expressions=[],this._triageElement=document.createElement("div"),this._triageElement.setAttribute("visibility","hidden"),this.node.appendChild(this._triageElement)}get expressions(){return this._expressions.map((e=>e.expression))}get doneRendering(){return this._doneRendering.promise}renderExpressionsFromMetadata(){console.debug("Rendering expressions",this.expressions);const e=this.model.metadata.get(d);if(void 0===e)return console.debug("Aborting rendering of expressions: no metadata",this.expressions),Promise.reject();if(e.length!==this._expressions.length)return console.error("Aborting rendering of expressions: expressions mismatch",this.expressions,e),Promise.reject();const s=[];return this._expressions.forEach(((t,n)=>{const r=e[n];r.expression===t.expression?void 0!==r.result?(console.debug(`Rendering ${r.expression}`),s.push(t.renderExpression(r.result))):console.error(`Metadata has no result at index ${n}`):console.error(`Metadata expression does not match Markdown expression at index ${n}`)})),Promise.all(s).then()}_waitForRender(e,s){return new Promise((t=>{!function n(){if(null!==e.node.querySelector(".jp-RenderedMarkdown *"))return t();setTimeout(n,s)}()}))}renderInput(e){super.renderInput(e);const s=this.model.value.text;void 0!==this.__lastContent&&this.__lastContent!==s&&(this._doneRendering=new a.PromiseDelegate,this._waitForRender(e,2).then((()=>(this._clearExpressions(),this._identifyExpressions(e),this.renderExpressionsFromMetadata()))).catch(console.error).then((()=>{this._doneRendering.resolve()})),this.__lastContent=s)}_clearExpressions(){console.debug("Clearing expressions"),void 0!==this._expressions&&void 0!==this._triageElement&&this._expressions.forEach((e=>{document.body.contains(e.node)||this._triageElement.appendChild(e.node),e.dispose()})),this._expressions=[]}_identifyExpressions(e){const s=e.node.querySelectorAll("input.eval-expr");this._expressions=[...s].map((s=>{const t=s,n=new h({expression:t.value,trusted:this.model.trusted,rendermime:this.__rendermime,safe:"any"});return i.Widget.attach(n,t.parentElement||e.node,t),console.assert(n.isAttached,"expr should be attached",n),t.remove(),n})),console.debug("Found expressions",this._expressions)}}class x extends n.NotebookPanel.ContentFactory{createMarkdownCell(e,s){return e.contentFactory||(e.contentFactory=this),new m(e).initializeState()}}const g=[{id:"@agoose77/jupyterlab-imarkdown:factory",provides:n.NotebookPanel.IContentFactory,requires:[r.IEditorServices],autoStart:!0,activate:(e,s)=>{console.log("Using jupyterlab-imarkdown:editor");const t=s.factoryService.newInlineEditor;return new x({editorFactory:t})}},{id:"@agoose77/jupyterlab-imarkdown:executor",requires:[n.INotebookTracker],autoStart:!0,activate:(e,s)=>{console.log("Using jupyterlab-imarkdown:executor"),n.NotebookActions.executed.connect(((e,t)=>{const{notebook:n,cell:r}=t;!function(e,s,t){const n=t.find((s=>s.content===e)),r=null==n?void 0:n.sessionContext;void 0!==r&&function(e){return"markdown"===e.model.type}(s)&&(console.debug(`Markdown cell ${s.model.id} was executed, waiting for render to complete ...`),s.doneRendering.then((()=>async function(e,s){var t;const n=null===(t=s.session)||void 0===t?void 0:t.kernel;if(!n)throw new Error("Session has no kernel.");const r=e.model,o={cellId:r.id},i=new Map(e.expressions.map(((e,s)=>[`${s}`,e]))),a={};i.forEach(((e,s)=>{a[s]=e}));const c={code:"",user_expressions:a};console.debug("Performing kernel request",c);const l=n.requestExecute(c,!1,Object.assign(Object.assign({},r.metadata.toJSON()),o));l.onReply=s=>{console.debug("Handling kernel response",s);const t=s.content;if("ok"!==t.status)return void console.error("Kernel response was not OK",s);console.debug("Clear existing metadata"),e.model.metadata.delete(d);const n=[];for(const e in t.user_expressions){const s=i.get(e);if(void 0===s){console.error("namedExpressions doesn't have key. This should never happen");continue}const r={expression:s,result:t.user_expressions[e]};n.push(r),console.debug(`Saving ${s} to cell attachments`,r)}e.model.metadata.set(d,n)},await l.done}(s,r))).catch(console.error).then((()=>s.renderExpressionsFromMetadata())).catch(console.error))}(n,r,s)}))}}]}}]);