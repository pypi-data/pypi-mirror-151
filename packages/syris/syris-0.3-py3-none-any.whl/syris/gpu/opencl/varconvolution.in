{}
kernel void {} (read_only image2d_t input,
                global vfloat *output,
                const sampler_t sampler,
                int2 window{})
{{
    int idx = get_global_id (0);
    int idy = get_global_id (1);
    int width = get_global_size (0);
    int i, j, tx, ty, imx, imy;
    vfloat value, weight, result = 0.0;

    {}

    for (j = 0; j < window.y; j++) {{
        ty = window.y - j - 1;
        imy = idy + j - window.y / 2;
        {}
        for (i = 0; i < window.x; i++) {{
            imx = idx + i - window.x / 2;
            value = read_imagef (input, sampler, (int2)(imx, imy)).x;
            tx = window.x - i - 1;
            {}
            result += value * weight;
        }}
    }}

    {}

    output[idy * width + idx] = result;
}}
%nl
{}
kernel void {} (read_only image2d_t input_real,
                read_only image2d_t input_imag,
                global vcomplex *output,
                const sampler_t sampler,
                int2 window{})
{{
    int idx = get_global_id (0);
    int idy = get_global_id (1);
    int width = get_global_size (0);
    int i, j, tx, ty, imx, imy;
    vcomplex value, weight, result = (vcomplex)(0.0, 0.0);

    {}

    for (j = 0; j < window.y; j++) {{
        ty = window.y - j - 1;
        imy = idy + j - window.y / 2;
        {}
        for (i = 0; i < window.x; i++) {{
            imx = idx + i - window.x / 2;
            value.x = read_imagef (input_real, sampler, (int2)(imx, imy)).x;
            value.y = read_imagef (input_imag, sampler, (int2)(imx, imy)).x;
            tx = window.x - i - 1;
            {}
            result += vc_mul (&value, &weight);
        }}
    }}

    {}

    output[idy * width + idx] = result;
}}
%nl
vfloat get_gauss (const vfloat2 *p, const vfloat2 *sigma)
{
    return exp (-((p->x * p->x) / (2 * sigma->x * sigma->x) + (p->y * p->y) / (2 * sigma->y * sigma->y)));
}
%nl
vfloat get_disk (const vfloat2 *p, const vfloat2 *radius)
{
    /* Stretch y to make an ellipse */
    vfloat y_adj = radius->x / radius->y * p->y;
    return sqrt (p->x * p->x + y_adj * y_adj) < radius->x ? 1 : 0;
}
%nl
vfloat get_disk_smooth (const vfloat2 *p, const vfloat2 *radius)
{
    /* Stretch y to make an ellipse */
    vfloat y_adj = radius->x / radius->y * p->y;
    vfloat diff = sqrt (p->x * p->x + y_adj * y_adj) - radius->x;
    vfloat result = 0.0;

    if (diff < 0) {
        result = 1;
    } else if (diff < 1) {
        /* Make the transition smooth */
        result = 1 - diff;
    }

    return result;
}
%nl
vcomplex get_propagator (const vfloat2 *p, vfloat lam, vfloat distance, const vfloat2 *sigma) {
    vfloat cos_value;
    vfloat tmp = M_PI * (p->x * p->x + p->y * p->y) / (lam * distance);
    vfloat sin_value = sincos (tmp, &cos_value);
    vfloat mollifier = get_gauss (p, sigma);
    tmp = mollifier / (lam * distance);

    return (vcomplex)(tmp * sin_value, -tmp * cos_value);
}
