from typing import Type, Tuple, Union, Any, Iterable
import ctypes
from enum import IntEnum
from .imgui import ImVec2
class ImGuiContext(ctypes.Structure):
    pass

class ImRect(ctypes.Structure):
    Min: ImVec2 # ImVec2WrapType: ImVec2
    Max: ImVec2 # ImVec2WrapType: ImVec2

def ImHashData(data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], data_size: int, seed: int=0)->int: ...
def ImHashStr(data: Union[str, bytes, None], data_size: int=0, seed: int=0)->int: ...
def ImAlphaBlendColors(col_a: int, col_b: int)->int: ...
def ImIsPowerOfTwo(v: int)->bool: ...
def ImIsPowerOfTwo_2(v: int)->bool: ...
def ImUpperPowerOfTwo(v: int)->int: ...
def ImStricmp(str1: Union[str, bytes, None], str2: Union[str, bytes, None])->int: ...
def ImStrnicmp(str1: Union[str, bytes, None], str2: Union[str, bytes, None], count: int)->int: ...
def ImStrncpy(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], src: Union[str, bytes, None], count: int)->None: ...
def ImStrdup(str: Union[str, bytes, None])->ctypes.c_void_p: ...
def ImStrdupcpy(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_dst_size: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], str: Union[str, bytes, None])->ctypes.c_void_p: ...
def ImStrchrRange(str_begin: Union[str, bytes, None], str_end: Union[str, bytes, None], c: int)->str: ...
def ImStrlenW(str: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def ImStreolRange(str: Union[str, bytes, None], str_end: Union[str, bytes, None])->str: ...
def ImStrbolW(buf_mid_line: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], buf_begin: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->ctypes.c_void_p: ...
def ImStristr(haystack: Union[str, bytes, None], haystack_end: Union[str, bytes, None], needle: Union[str, bytes, None], needle_end: Union[str, bytes, None])->str: ...
def ImStrTrimBlanks(str: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def ImStrSkipBlank(str: Union[str, bytes, None])->str: ...
def ImCharIsBlankA(c: int)->bool: ...
def ImCharIsBlankW(c: int)->bool: ...
def ImFormatString(buf: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], buf_size: int, fmt: Union[str, bytes, None])->int: ...
def ImParseFormatFindStart(format: Union[str, bytes, None])->str: ...
def ImParseFormatFindEnd(format: Union[str, bytes, None])->str: ...
def ImParseFormatTrimDecorations(format: Union[str, bytes, None], buf: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], buf_size: int)->str: ...
def ImParseFormatSanitizeForPrinting(fmt_in: Union[str, bytes, None], fmt_out: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], fmt_out_size: int)->None: ...
def ImParseFormatSanitizeForScanning(fmt_in: Union[str, bytes, None], fmt_out: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], fmt_out_size: int)->str: ...
def ImParseFormatPrecision(format: Union[str, bytes, None], default_value: int)->int: ...
def ImTextCharToUtf8(out_buf: Union[ctypes.Array, ctypes.c_void_p, None], c: int)->str: ...
def ImTextStrToUtf8(out_buf: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_buf_size: int, in_text: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], in_text_end: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def ImTextCharFromUtf8(out_char: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], in_text: Union[str, bytes, None], in_text_end: Union[str, bytes, None])->int: ...
def ImTextStrFromUtf8(out_buf: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_buf_size: int, in_text: Union[str, bytes, None], in_text_end: Union[str, bytes, None], in_remaining: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->int: ...
def ImTextCountCharsFromUtf8(in_text: Union[str, bytes, None], in_text_end: Union[str, bytes, None])->int: ...
def ImTextCountUtf8BytesFromChar(in_text: Union[str, bytes, None], in_text_end: Union[str, bytes, None])->int: ...
def ImTextCountUtf8BytesFromStr(in_text: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], in_text_end: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def ImFileOpen(filename: Union[str, bytes, None], mode: Union[str, bytes, None])->ctypes.c_void_p: ...
def ImFileClose(file: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def ImFileGetSize(file: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def ImFileRead(data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], size: int, count: int, file: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def ImFileWrite(data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], size: int, count: int, file: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def ImFileLoadToMemory(filename: Union[str, bytes, None], mode: Union[str, bytes, None], out_file_size: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, padding_bytes: int=0)->ctypes.c_void_p: ...
def ImPow(x: float, y: float)->float: ...
def ImPow_2(x: float, y: float)->float: ...
def ImLog(x: float)->float: ...
def ImLog_2(x: float)->float: ...
def ImAbs(x: int)->int: ...
def ImAbs_2(x: float)->float: ...
def ImAbs_3(x: float)->float: ...
def ImSign(x: float)->float: ...
def ImSign_2(x: float)->float: ...
def ImRsqrt(x: float)->float: ...
def ImRsqrt_2(x: float)->float: ...
def ImMin(lhs: Union[ImVec2, Tuple[float, float], None], rhs: Union[ImVec2, Tuple[float, float], None])->ImVec2: ...
def ImMax(lhs: Union[ImVec2, Tuple[float, float], None], rhs: Union[ImVec2, Tuple[float, float], None])->ImVec2: ...
def ImClamp(v: Union[ImVec2, Tuple[float, float], None], mn: Union[ImVec2, Tuple[float, float], None], mx: Union[ImVec2, Tuple[float, float], None])->ImVec2: ...
def ImLerp(a: Union[ImVec2, Tuple[float, float], None], b: Union[ImVec2, Tuple[float, float], None], t: float)->ImVec2: ...
def ImLerp_2(a: Union[ImVec2, Tuple[float, float], None], b: Union[ImVec2, Tuple[float, float], None], t: Union[ImVec2, Tuple[float, float], None])->ImVec2: ...
def ImLerp_3(a: ImVec4, b: ImVec4, t: float)->ImVec4: ...
def ImSaturate(f: float)->float: ...
def ImLengthSqr(lhs: Union[ImVec2, Tuple[float, float], None])->float: ...
def ImLengthSqr_2(lhs: ImVec4)->float: ...
def ImInvLength(lhs: Union[ImVec2, Tuple[float, float], None], fail_value: float)->float: ...
def ImFloor(f: float)->float: ...
def ImFloorSigned(f: float)->float: ...
def ImFloor_2(v: Union[ImVec2, Tuple[float, float], None])->ImVec2: ...
def ImFloorSigned_2(v: Union[ImVec2, Tuple[float, float], None])->ImVec2: ...
def ImModPositive(a: int, b: int)->int: ...
def ImDot(a: Union[ImVec2, Tuple[float, float], None], b: Union[ImVec2, Tuple[float, float], None])->float: ...
def ImRotate(v: Union[ImVec2, Tuple[float, float], None], cos_a: float, sin_a: float)->ImVec2: ...
def ImLinearSweep(current: float, target: float, speed: float)->float: ...
def ImMul(lhs: Union[ImVec2, Tuple[float, float], None], rhs: Union[ImVec2, Tuple[float, float], None])->ImVec2: ...
def ImIsFloatAboveGuaranteedIntegerPrecision(f: float)->bool: ...
def ImBezierCubicCalc(p1: Union[ImVec2, Tuple[float, float], None], p2: Union[ImVec2, Tuple[float, float], None], p3: Union[ImVec2, Tuple[float, float], None], p4: Union[ImVec2, Tuple[float, float], None], t: float)->ImVec2: ...
def ImBezierCubicClosestPoint(p1: Union[ImVec2, Tuple[float, float], None], p2: Union[ImVec2, Tuple[float, float], None], p3: Union[ImVec2, Tuple[float, float], None], p4: Union[ImVec2, Tuple[float, float], None], p: Union[ImVec2, Tuple[float, float], None], num_segments: int)->ImVec2: ...
def ImBezierCubicClosestPointCasteljau(p1: Union[ImVec2, Tuple[float, float], None], p2: Union[ImVec2, Tuple[float, float], None], p3: Union[ImVec2, Tuple[float, float], None], p4: Union[ImVec2, Tuple[float, float], None], p: Union[ImVec2, Tuple[float, float], None], tess_tol: float)->ImVec2: ...
def ImBezierQuadraticCalc(p1: Union[ImVec2, Tuple[float, float], None], p2: Union[ImVec2, Tuple[float, float], None], p3: Union[ImVec2, Tuple[float, float], None], t: float)->ImVec2: ...
def ImLineClosestPoint(a: Union[ImVec2, Tuple[float, float], None], b: Union[ImVec2, Tuple[float, float], None], p: Union[ImVec2, Tuple[float, float], None])->ImVec2: ...
def ImTriangleContainsPoint(a: Union[ImVec2, Tuple[float, float], None], b: Union[ImVec2, Tuple[float, float], None], c: Union[ImVec2, Tuple[float, float], None], p: Union[ImVec2, Tuple[float, float], None])->bool: ...
def ImTriangleClosestPoint(a: Union[ImVec2, Tuple[float, float], None], b: Union[ImVec2, Tuple[float, float], None], c: Union[ImVec2, Tuple[float, float], None], p: Union[ImVec2, Tuple[float, float], None])->ImVec2: ...
def ImTriangleBarycentricCoords(a: Union[ImVec2, Tuple[float, float], None], b: Union[ImVec2, Tuple[float, float], None], c: Union[ImVec2, Tuple[float, float], None], p: Union[ImVec2, Tuple[float, float], None], out_u: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_w: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def ImTriangleArea(a: Union[ImVec2, Tuple[float, float], None], b: Union[ImVec2, Tuple[float, float], None], c: Union[ImVec2, Tuple[float, float], None])->float: ...
def ImGetDirQuadrantFromDelta(dx: float, dy: float)->int: ...
def ImBitArrayTestBit(arr: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], n: int)->bool: ...
def ImBitArrayClearBit(arr: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], n: int)->None: ...
def ImBitArraySetBit(arr: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], n: int)->None: ...
def ImBitArraySetBitRange(arr: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], n: int, n2: int)->None: ...
def GetCurrentWindowRead()->ctypes.c_void_p: ...
def GetCurrentWindow()->ctypes.c_void_p: ...
def FindWindowByID(_id: int)->ctypes.c_void_p: ...
def FindWindowByName(name: Union[str, bytes, None])->ctypes.c_void_p: ...
def UpdateWindowParentAndRootLinks(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], flags: int, parent_window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def CalcWindowNextAutoFitSize(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->ImVec2: ...
def IsWindowChildOf(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], potential_parent: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], popup_hierarchy: bool, dock_hierarchy: bool)->bool: ...
def IsWindowWithinBeginStackOf(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], potential_parent: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def IsWindowAbove(potential_above: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], potential_below: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def IsWindowNavFocusable(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def SetWindowPos(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], pos: Union[ImVec2, Tuple[float, float], None], cond: int=0)->None: ...
def SetWindowSize(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], size: Union[ImVec2, Tuple[float, float], None], cond: int=0)->None: ...
def SetWindowCollapsed(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], collapsed: bool, cond: int=0)->None: ...
def SetWindowHitTestHole(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], pos: Union[ImVec2, Tuple[float, float], None], size: Union[ImVec2, Tuple[float, float], None])->None: ...
def WindowRectAbsToRel(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], r: ImRect)->ImRect: ...
def WindowRectRelToAbs(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], r: ImRect)->ImRect: ...
def FocusWindow(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def FocusTopMostWindowUnderOne(under_this_window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], ignore_window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def BringWindowToFocusFront(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def BringWindowToDisplayFront(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def BringWindowToDisplayBack(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def BringWindowToDisplayBehind(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], above_window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def FindWindowDisplayIndex(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def FindBottomMostVisibleWindowWithinBeginStack(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->ctypes.c_void_p: ...
def SetCurrentFont(font: ImFont)->None: ...
def GetDefaultFont()->ImFont: ...
def GetForegroundDrawList(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->ImDrawList: ...
def Initialize()->None: ...
def Shutdown()->None: ...
def UpdateInputEvents(trickle_fast_inputs: bool)->None: ...
def UpdateHoveredWindowAndCaptureFlags()->None: ...
def StartMouseMovingWindow(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def StartMouseMovingWindowOrNode(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], undock_floating_node: bool)->None: ...
def UpdateMouseMovingWindowNewFrame()->None: ...
def UpdateMouseMovingWindowEndFrame()->None: ...
def AddContextHook(context: ImGuiContext, hook: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def RemoveContextHook(context: ImGuiContext, hook_to_remove: int)->None: ...
def CallContextHooks(context: ImGuiContext, type: int)->None: ...
def TranslateWindowsInViewport(viewport: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], old_pos: Union[ImVec2, Tuple[float, float], None], new_pos: Union[ImVec2, Tuple[float, float], None])->None: ...
def ScaleWindowsInViewport(viewport: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], scale: float)->None: ...
def DestroyPlatformWindow(viewport: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def SetWindowViewport(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], viewport: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def SetCurrentViewport(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], viewport: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def GetViewportPlatformMonitor(viewport: ImGuiViewport)->ctypes.c_void_p: ...
def FindHoveredViewportFromPlatformWindowStack(mouse_platform_pos: Union[ImVec2, Tuple[float, float], None])->ctypes.c_void_p: ...
def MarkIniSettingsDirty()->None: ...
def MarkIniSettingsDirty_2(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def ClearIniSettings()->None: ...
def CreateNewWindowSettings(name: Union[str, bytes, None])->ctypes.c_void_p: ...
def FindWindowSettings(_id: int)->ctypes.c_void_p: ...
def FindOrCreateWindowSettings(name: Union[str, bytes, None])->ctypes.c_void_p: ...
def AddSettingsHandler(handler: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def RemoveSettingsHandler(type_name: Union[str, bytes, None])->None: ...
def FindSettingsHandler(type_name: Union[str, bytes, None])->ctypes.c_void_p: ...
def SetNextWindowScroll(scroll: Union[ImVec2, Tuple[float, float], None])->None: ...
def SetScrollX(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], scroll_x: float)->None: ...
def SetScrollY(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], scroll_y: float)->None: ...
def SetScrollFromPosX(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], local_x: float, center_x_ratio: float)->None: ...
def SetScrollFromPosY(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], local_y: float, center_y_ratio: float)->None: ...
def ScrollToItem(flags: int=0)->None: ...
def ScrollToRect(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], rect: ImRect, flags: int=0)->None: ...
def ScrollToRectEx(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], rect: ImRect, flags: int=0)->ImVec2: ...
def ScrollToBringRectIntoView(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], rect: ImRect)->None: ...
def GetItemID()->int: ...
def GetItemStatusFlags()->int: ...
def GetItemFlags()->int: ...
def GetActiveID()->int: ...
def GetFocusID()->int: ...
def SetActiveID(_id: int, window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def SetFocusID(_id: int, window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def ClearActiveID()->None: ...
def GetHoveredID()->int: ...
def SetHoveredID(_id: int)->None: ...
def KeepAliveID(_id: int)->None: ...
def MarkItemEdited(_id: int)->None: ...
def PushOverrideID(_id: int)->None: ...
def GetIDWithSeed(str_id_begin: Union[str, bytes, None], str_id_end: Union[str, bytes, None], seed: int)->int: ...
def ItemSize(size: Union[ImVec2, Tuple[float, float], None], text_baseline_y: float=-1.0)->None: ...
def ItemSize_2(bb: ImRect, text_baseline_y: float=-1.0)->None: ...
def ItemAdd(bb: ImRect, _id: int, nav_bb: ImRect=None, extra_flags: int=0)->bool: ...
def ItemHoverable(bb: ImRect, _id: int)->bool: ...
def IsClippedEx(bb: ImRect, _id: int)->bool: ...
def SetLastItemData(item_id: int, in_flags: int, status_flags: int, item_rect: ImRect)->None: ...
def CalcItemSize(size: Union[ImVec2, Tuple[float, float], None], default_w: float, default_h: float)->ImVec2: ...
def CalcWrapWidthForPos(pos: Union[ImVec2, Tuple[float, float], None], wrap_pos_x: float)->float: ...
def PushMultiItemsWidths(components: int, width_full: float)->None: ...
def IsItemToggledSelection()->bool: ...
def GetContentRegionMaxAbs()->ImVec2: ...
def ShrinkWidths(items: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], count: int, width_excess: float)->None: ...
def PushItemFlag(option: int, enabled: bool)->None: ...
def PopItemFlag()->None: ...
def FocusableItemRegister(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], _id: int)->bool: ...
def FocusableItemUnregister(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def LogBegin(type: int, auto_open_depth: int)->None: ...
def LogToBuffer(auto_open_depth: int=-1)->None: ...
def LogRenderedText(ref_pos: ImVec2, text: Union[str, bytes, None], text_end: Union[str, bytes, None]=None)->None: ...
def LogSetNextTextDecoration(prefix: Union[str, bytes, None], suffix: Union[str, bytes, None])->None: ...
def BeginChildEx(name: Union[str, bytes, None], _id: int, size_arg: Union[ImVec2, Tuple[float, float], None], border: bool, flags: int)->bool: ...
def OpenPopupEx(_id: int, popup_flags: int=ImGuiPopupFlags_None)->None: ...
def ClosePopupToLevel(remaining: int, restore_focus_to_window_under_popup: bool)->None: ...
def ClosePopupsOverWindow(ref_window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], restore_focus_to_window_under_popup: bool)->None: ...
def ClosePopupsExceptModals()->None: ...
def IsPopupOpen(_id: int, popup_flags: int)->bool: ...
def BeginPopupEx(_id: int, extra_flags: int)->bool: ...
def BeginTooltipEx(tooltip_flags: int, extra_window_flags: int)->None: ...
def GetPopupAllowedExtentRect(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->ImRect: ...
def GetTopMostPopupModal()->ctypes.c_void_p: ...
def GetTopMostAndVisiblePopupModal()->ctypes.c_void_p: ...
def FindBestWindowPosForPopup(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->ImVec2: ...
def FindBestWindowPosForPopupEx(ref_pos: Union[ImVec2, Tuple[float, float], None], size: Union[ImVec2, Tuple[float, float], None], last_dir: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], r_outer: ImRect, r_avoid: ImRect, policy: int)->ImVec2: ...
def BeginViewportSideBar(name: Union[str, bytes, None], viewport: ImGuiViewport, dir: int, size: float, window_flags: int)->bool: ...
def BeginMenuEx(label: Union[str, bytes, None], icon: Union[str, bytes, None], enabled: bool=True)->bool: ...
def MenuItemEx(label: Union[str, bytes, None], icon: Union[str, bytes, None], shortcut: Union[str, bytes, None]=None, selected: bool=False, enabled: bool=True)->bool: ...
def BeginComboPopup(popup_id: int, bb: ImRect, flags: int)->bool: ...
def BeginComboPreview()->bool: ...
def EndComboPreview()->None: ...
def NavInitWindow(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], force_reinit: bool)->None: ...
def NavInitRequestApplyResult()->None: ...
def NavMoveRequestButNoResultYet()->bool: ...
def NavMoveRequestSubmit(move_dir: int, clip_dir: int, move_flags: int, scroll_flags: int)->None: ...
def NavMoveRequestForward(move_dir: int, clip_dir: int, move_flags: int, scroll_flags: int)->None: ...
def NavMoveRequestResolveWithLastItem(result: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def NavMoveRequestCancel()->None: ...
def NavMoveRequestApplyResult()->None: ...
def NavMoveRequestTryWrapping(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], move_flags: int)->None: ...
def GetNavInputName(n: int)->str: ...
def GetNavInputAmount(n: int, mode: int)->float: ...
def GetNavInputAmount2d(dir_sources: int, mode: int, slow_factor: float=0.0, fast_factor: float=0.0)->ImVec2: ...
def CalcTypematicRepeatAmount(t0: float, t1: float, repeat_delay: float, repeat_rate: float)->int: ...
def ActivateItem(_id: int)->None: ...
def SetNavID(_id: int, nav_layer: int, focus_scope_id: int, rect_rel: ImRect)->None: ...
def PushFocusScope(_id: int)->None: ...
def PopFocusScope()->None: ...
def GetFocusedFocusScope()->int: ...
def GetFocusScope()->int: ...
def IsNamedKey(key: int)->bool: ...
def IsLegacyKey(key: int)->bool: ...
def IsGamepadKey(key: int)->bool: ...
def GetKeyData(key: int)->ImGuiKeyData: ...
def SetItemUsingMouseWheel()->None: ...
def SetActiveIdUsingNavAndKeys()->None: ...
def IsActiveIdUsingNavDir(dir: int)->bool: ...
def IsActiveIdUsingNavInput(input: int)->bool: ...
def IsActiveIdUsingKey(key: int)->bool: ...
def SetActiveIdUsingKey(key: int)->None: ...
def IsMouseDragPastThreshold(button: int, lock_threshold: float=-1.0)->bool: ...
def IsNavInputDown(n: int)->bool: ...
def IsNavInputTest(n: int, rm: int)->bool: ...
def GetMergedModFlags()->int: ...
def IsKeyPressedMap(key: int, repeat: bool=True)->bool: ...
def DockContextInitialize(ctx: ImGuiContext)->None: ...
def DockContextShutdown(ctx: ImGuiContext)->None: ...
def DockContextClearNodes(ctx: ImGuiContext, root_id: int, clear_settings_refs: bool)->None: ...
def DockContextRebuildNodes(ctx: ImGuiContext)->None: ...
def DockContextNewFrameUpdateUndocking(ctx: ImGuiContext)->None: ...
def DockContextNewFrameUpdateDocking(ctx: ImGuiContext)->None: ...
def DockContextEndFrame(ctx: ImGuiContext)->None: ...
def DockContextGenNodeID(ctx: ImGuiContext)->int: ...
def DockContextQueueDock(ctx: ImGuiContext, target: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], target_node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], payload: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], split_dir: int, split_ratio: float, split_outer: bool)->None: ...
def DockContextQueueUndockWindow(ctx: ImGuiContext, window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DockContextQueueUndockNode(ctx: ImGuiContext, node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DockContextCalcDropPosForDocking(target: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], target_node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], payload: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], split_dir: int, split_outer: bool, out_pos: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def DockNodeBeginAmendTabBar(node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def DockNodeEndAmendTabBar()->None: ...
def DockNodeGetRootNode(node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->ctypes.c_void_p: ...
def DockNodeIsInHierarchyOf(node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], parent: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def DockNodeGetDepth(node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def DockNodeGetWindowMenuButtonId(node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def GetWindowDockNode()->ctypes.c_void_p: ...
def GetWindowAlwaysWantOwnTabBar(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def BeginDocked(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def BeginDockableDragDropSource(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def BeginDockableDragDropTarget(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def SetWindowDock(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], dock_id: int, cond: int)->None: ...
def DockBuilderDockWindow(window_name: Union[str, bytes, None], node_id: int)->None: ...
def DockBuilderGetNode(node_id: int)->ctypes.c_void_p: ...
def DockBuilderGetCentralNode(node_id: int)->ctypes.c_void_p: ...
def DockBuilderAddNode(node_id: int=0, flags: int=0)->int: ...
def DockBuilderRemoveNode(node_id: int)->None: ...
def DockBuilderRemoveNodeDockedWindows(node_id: int, clear_settings_refs: bool=True)->None: ...
def DockBuilderRemoveNodeChildNodes(node_id: int)->None: ...
def DockBuilderSetNodePos(node_id: int, pos: Union[ImVec2, Tuple[float, float], None])->None: ...
def DockBuilderSetNodeSize(node_id: int, size: Union[ImVec2, Tuple[float, float], None])->None: ...
def DockBuilderSplitNode(node_id: int, split_dir: int, size_ratio_for_node_at_dir: float, out_id_at_dir: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_id_at_opposite_dir: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def DockBuilderCopyDockSpace(src_dockspace_id: int, dst_dockspace_id: int, in_window_remap_pairs: ImVector)->None: ...
def DockBuilderCopyNode(src_node_id: int, dst_node_id: int, out_node_remap_pairs: ImVector)->None: ...
def DockBuilderCopyWindowSettings(src_name: Union[str, bytes, None], dst_name: Union[str, bytes, None])->None: ...
def DockBuilderFinish(node_id: int)->None: ...
def BeginDragDropTargetCustom(bb: ImRect, _id: int)->bool: ...
def ClearDragDrop()->None: ...
def IsDragDropPayloadBeingAccepted()->bool: ...
def SetWindowClipRectBeforeSetChannel(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], clip_rect: ImRect)->None: ...
def BeginColumns(str_id: Union[str, bytes, None], count: int, flags: int=0)->None: ...
def EndColumns()->None: ...
def PushColumnClipRect(column_index: int)->None: ...
def PushColumnsBackground()->None: ...
def PopColumnsBackground()->None: ...
def GetColumnsID(str_id: Union[str, bytes, None], count: int)->int: ...
def FindOrCreateColumns(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], _id: int)->ctypes.c_void_p: ...
def GetColumnOffsetFromNorm(columns: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], offset_norm: float)->float: ...
def GetColumnNormFromOffset(columns: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], offset: float)->float: ...
def TableOpenContextMenu(column_n: int=-1)->None: ...
def TableSetColumnWidth(column_n: int, width: float)->None: ...
def TableSetColumnSortDirection(column_n: int, sort_direction: int, append_to_sort_specs: bool)->None: ...
def TableGetHoveredColumn()->int: ...
def TableGetHeaderRowHeight()->float: ...
def TablePushBackgroundChannel()->None: ...
def TablePopBackgroundChannel()->None: ...
def GetCurrentTable()->ctypes.c_void_p: ...
def TableFindByID(_id: int)->ctypes.c_void_p: ...
def BeginTableEx(name: Union[str, bytes, None], _id: int, columns_count: int, flags: int=0, outer_size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0), inner_width: float=0.0)->bool: ...
def TableBeginInitMemory(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], columns_count: int)->None: ...
def TableBeginApplyRequests(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableSetupDrawChannels(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableUpdateLayout(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableUpdateBorders(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableUpdateColumnsWeightFromWidth(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableDrawBorders(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableDrawContextMenu(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableMergeDrawChannels(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableGetInstanceData(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], instance_no: int)->ctypes.c_void_p: ...
def TableSortSpecsSanitize(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableSortSpecsBuild(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableGetColumnNextSortDirection(column: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def TableFixColumnSortDirection(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], column: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableGetColumnWidthAuto(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], column: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->float: ...
def TableBeginRow(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableEndRow(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableBeginCell(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], column_n: int)->None: ...
def TableEndCell(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableGetCellBgRect(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], column_n: int)->ImRect: ...
def TableGetColumnName(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], column_n: int)->str: ...
def TableGetColumnResizeID(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], column_n: int, instance_no: int=0)->int: ...
def TableGetMaxColumnWidth(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], column_n: int)->float: ...
def TableSetColumnWidthAutoSingle(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], column_n: int)->None: ...
def TableSetColumnWidthAutoAll(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableRemove(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableGcCompactTransientBuffers(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableGcCompactTransientBuffers_2(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableGcCompactSettings()->None: ...
def TableLoadSettings(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableSaveSettings(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableResetSettings(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TableGetBoundSettings(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->ctypes.c_void_p: ...
def TableSettingsAddSettingsHandler()->None: ...
def TableSettingsCreate(_id: int, columns_count: int)->ctypes.c_void_p: ...
def TableSettingsFindByID(_id: int)->ctypes.c_void_p: ...
def BeginTabBarEx(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], bb: ImRect, flags: int, dock_node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def TabBarFindTabByID(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], tab_id: int)->ctypes.c_void_p: ...
def TabBarFindMostRecentlySelectedTabForActiveWindow(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->ctypes.c_void_p: ...
def TabBarAddTab(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], tab_flags: int, window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TabBarRemoveTab(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], tab_id: int)->None: ...
def TabBarCloseTab(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], tab: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def TabBarQueueReorder(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], tab: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], offset: int)->None: ...
def TabBarQueueReorderFromMousePos(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], tab: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], mouse_pos: Union[ImVec2, Tuple[float, float], None])->None: ...
def TabBarProcessReorder(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def TabItemEx(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], label: Union[str, bytes, None], p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], flags: int, docked_window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def TabItemCalcSize(label: Union[str, bytes, None], has_close_button: bool)->ImVec2: ...
def TabItemBackground(draw_list: ImDrawList, bb: ImRect, flags: int, col: int)->None: ...
def TabItemLabelAndCloseButton(draw_list: ImDrawList, bb: ImRect, flags: int, frame_padding: Union[ImVec2, Tuple[float, float], None], label: Union[str, bytes, None], tab_id: int, close_button_id: int, is_contents_visible: bool, out_just_closed: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_text_clipped: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def RenderText(pos: Union[ImVec2, Tuple[float, float], None], text: Union[str, bytes, None], text_end: Union[str, bytes, None]=None, hide_text_after_hash: bool=True)->None: ...
def RenderTextWrapped(pos: Union[ImVec2, Tuple[float, float], None], text: Union[str, bytes, None], text_end: Union[str, bytes, None], wrap_width: float)->None: ...
def RenderTextClipped(pos_min: Union[ImVec2, Tuple[float, float], None], pos_max: Union[ImVec2, Tuple[float, float], None], text: Union[str, bytes, None], text_end: Union[str, bytes, None], text_size_if_known: ImVec2, align: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0), clip_rect: ImRect=None)->None: ...
def RenderTextClippedEx(draw_list: ImDrawList, pos_min: Union[ImVec2, Tuple[float, float], None], pos_max: Union[ImVec2, Tuple[float, float], None], text: Union[str, bytes, None], text_end: Union[str, bytes, None], text_size_if_known: ImVec2, align: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0), clip_rect: ImRect=None)->None: ...
def RenderTextEllipsis(draw_list: ImDrawList, pos_min: Union[ImVec2, Tuple[float, float], None], pos_max: Union[ImVec2, Tuple[float, float], None], clip_max_x: float, ellipsis_max_x: float, text: Union[str, bytes, None], text_end: Union[str, bytes, None], text_size_if_known: ImVec2)->None: ...
def RenderFrame(p_min: Union[ImVec2, Tuple[float, float], None], p_max: Union[ImVec2, Tuple[float, float], None], fill_col: int, border: bool=True, rounding: float=0.0)->None: ...
def RenderFrameBorder(p_min: Union[ImVec2, Tuple[float, float], None], p_max: Union[ImVec2, Tuple[float, float], None], rounding: float=0.0)->None: ...
def RenderColorRectWithAlphaCheckerboard(draw_list: ImDrawList, p_min: Union[ImVec2, Tuple[float, float], None], p_max: Union[ImVec2, Tuple[float, float], None], fill_col: int, grid_step: float, grid_off: Union[ImVec2, Tuple[float, float], None], rounding: float=0.0, flags: int=0)->None: ...
def RenderNavHighlight(bb: ImRect, _id: int, flags: int=ImGuiNavHighlightFlags_TypeDefault)->None: ...
def FindRenderedTextEnd(text: Union[str, bytes, None], text_end: Union[str, bytes, None]=None)->str: ...
def RenderMouseCursor(pos: Union[ImVec2, Tuple[float, float], None], scale: float, mouse_cursor: int, col_fill: int, col_border: int, col_shadow: int)->None: ...
def RenderArrow(draw_list: ImDrawList, pos: Union[ImVec2, Tuple[float, float], None], col: int, dir: int, scale: float=1.0)->None: ...
def RenderBullet(draw_list: ImDrawList, pos: Union[ImVec2, Tuple[float, float], None], col: int)->None: ...
def RenderCheckMark(draw_list: ImDrawList, pos: Union[ImVec2, Tuple[float, float], None], col: int, sz: float)->None: ...
def RenderArrowPointingAt(draw_list: ImDrawList, pos: Union[ImVec2, Tuple[float, float], None], half_sz: Union[ImVec2, Tuple[float, float], None], direction: int, col: int)->None: ...
def RenderArrowDockMenu(draw_list: ImDrawList, p_min: Union[ImVec2, Tuple[float, float], None], sz: float, col: int)->None: ...
def RenderRectFilledRangeH(draw_list: ImDrawList, rect: ImRect, col: int, x_start_norm: float, x_end_norm: float, rounding: float)->None: ...
def RenderRectFilledWithHole(draw_list: ImDrawList, outer: ImRect, inner: ImRect, col: int, rounding: float)->None: ...
def CalcRoundingFlagsForRectInRect(r_in: ImRect, r_outer: ImRect, threshold: float)->int: ...
def TextEx(text: Union[str, bytes, None], text_end: Union[str, bytes, None]=None, flags: int=0)->None: ...
def ButtonEx(label: Union[str, bytes, None], size_arg: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0), flags: int=0)->bool: ...
def CloseButton(_id: int, pos: Union[ImVec2, Tuple[float, float], None])->bool: ...
def CollapseButton(_id: int, pos: Union[ImVec2, Tuple[float, float], None], dock_node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def ArrowButtonEx(str_id: Union[str, bytes, None], dir: int, size_arg: Union[ImVec2, Tuple[float, float], None], flags: int=0)->bool: ...
def Scrollbar(axis: int)->None: ...
def ScrollbarEx(bb: ImRect, _id: int, axis: int, p_scroll_v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], avail_v: int, contents_v: int, flags: int)->bool: ...
def ImageButtonEx(_id: int, texture_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], size: Union[ImVec2, Tuple[float, float], None], uv0: Union[ImVec2, Tuple[float, float], None], uv1: Union[ImVec2, Tuple[float, float], None], padding: Union[ImVec2, Tuple[float, float], None], bg_col: ImVec4, tint_col: ImVec4)->bool: ...
def GetWindowScrollbarRect(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], axis: int)->ImRect: ...
def GetWindowScrollbarID(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], axis: int)->int: ...
def GetWindowResizeCornerID(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], n: int)->int: ...
def GetWindowResizeBorderID(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], dir: int)->int: ...
def SeparatorEx(flags: int)->None: ...
def ButtonBehavior(bb: ImRect, _id: int, out_hovered: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_held: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], flags: int=0)->bool: ...
def DragBehavior(_id: int, data_type: int, p_v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_speed: float, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None], flags: int)->bool: ...
def SliderBehavior(bb: ImRect, _id: int, data_type: int, p_v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None], flags: int, out_grab_bb: ImRect)->bool: ...
def SplitterBehavior(bb: ImRect, _id: int, axis: int, size1: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], size2: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], min_size1: float, min_size2: float, hover_extend: float=0.0, hover_visibility_delay: float=0.0, bg_col: int=0)->bool: ...
def TreeNodeBehavior(_id: int, flags: int, label: Union[str, bytes, None], label_end: Union[str, bytes, None]=None)->bool: ...
def TreeNodeBehaviorIsOpen(_id: int, flags: int=0)->bool: ...
def TreePushOverrideID(_id: int)->None: ...
def DataTypeGetInfo(data_type: int)->ctypes.c_void_p: ...
def DataTypeFormatString(buf: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], buf_size: int, data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None])->int: ...
def DataTypeApplyOp(data_type: int, op: int, output: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], arg_1: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], arg_2: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DataTypeApplyFromText(buf: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None])->bool: ...
def DataTypeCompare(data_type: int, arg_1: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], arg_2: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def DataTypeClamp(data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def TempInputText(bb: ImRect, _id: int, label: Union[str, bytes, None], buf: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], buf_size: int, flags: int)->bool: ...
def TempInputScalar(bb: ImRect, _id: int, label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None], p_clamp_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, p_clamp_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->bool: ...
def TempInputIsActive(_id: int)->bool: ...
def GetInputTextState(_id: int)->ctypes.c_void_p: ...
def ColorTooltip(text: Union[str, bytes, None], col: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], flags: int)->None: ...
def ColorEditOptionsPopup(col: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], flags: int)->None: ...
def ColorPickerOptionsPopup(ref_col: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], flags: int)->None: ...
def ShadeVertsLinearColorGradientKeepAlpha(draw_list: ImDrawList, vert_start_idx: int, vert_end_idx: int, gradient_p0: Union[ImVec2, Tuple[float, float], None], gradient_p1: Union[ImVec2, Tuple[float, float], None], col0: int, col1: int)->None: ...
def ShadeVertsLinearUV(draw_list: ImDrawList, vert_start_idx: int, vert_end_idx: int, a: Union[ImVec2, Tuple[float, float], None], b: Union[ImVec2, Tuple[float, float], None], uv_a: Union[ImVec2, Tuple[float, float], None], uv_b: Union[ImVec2, Tuple[float, float], None], clamp: bool)->None: ...
def GcCompactTransientMiscBuffers()->None: ...
def GcCompactTransientWindowBuffers(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def GcAwakeTransientWindowBuffers(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DebugDrawItemRect(col: int)->None: ...
def DebugStartItemPicker()->None: ...
def ShowFontAtlas(atlas: ImFontAtlas)->None: ...
def DebugHookIdInfo(_id: int, data_type: int, data_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], data_id_end: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DebugNodeColumns(columns: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DebugNodeDockNode(node: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], label: Union[str, bytes, None])->None: ...
def DebugNodeDrawList(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], viewport: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], draw_list: ImDrawList, label: Union[str, bytes, None])->None: ...
def DebugNodeDrawCmdShowMeshAndBoundingBox(out_draw_list: ImDrawList, draw_list: ImDrawList, draw_cmd: ImDrawCmd, show_mesh: bool, show_aabb: bool)->None: ...
def DebugNodeFont(font: ImFont)->None: ...
def DebugNodeTabBar(tab_bar: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], label: Union[str, bytes, None])->None: ...
def DebugNodeTable(table: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DebugNodeTableSettings(settings: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DebugNodeWindow(window: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], label: Union[str, bytes, None])->None: ...
def DebugNodeWindowSettings(settings: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DebugNodeWindowsList(windows: ImVector, label: Union[str, bytes, None])->None: ...
def DebugNodeWindowsListByBeginStackParent(windows: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], windows_size: int, parent_in_begin_stack: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DebugNodeViewport(viewport: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def DebugRenderViewportThumbnail(draw_list: ImDrawList, viewport: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], bb: ImRect)->None: ...
def ImFontAtlasGetBuilderForStbTruetype()->ctypes.c_void_p: ...
def ImFontAtlasBuildInit(atlas: ImFontAtlas)->None: ...
def ImFontAtlasBuildSetupFont(atlas: ImFontAtlas, font: ImFont, font_config: ImFontConfig, ascent: float, descent: float)->None: ...
def ImFontAtlasBuildPackCustomRects(atlas: ImFontAtlas, stbrp_context_opaque: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def ImFontAtlasBuildFinish(atlas: ImFontAtlas)->None: ...
def ImFontAtlasBuildRender8bppRectFromString(atlas: ImFontAtlas, x: int, y: int, w: int, h: int, in_str: Union[str, bytes, None], in_marker_char: int, in_marker_pixel_value: int)->None: ...
def ImFontAtlasBuildRender32bppRectFromString(atlas: ImFontAtlas, x: int, y: int, w: int, h: int, in_str: Union[str, bytes, None], in_marker_char: int, in_marker_pixel_value: int)->None: ...
def ImFontAtlasBuildMultiplyCalcLookupTable(out_table: Union[ctypes.Array, ctypes.c_void_p, None], in_multiply_factor: float)->None: ...
def ImFontAtlasBuildMultiplyRectAlpha8(table: Union[ctypes.Array, ctypes.c_void_p, None], pixels: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: int, y: int, w: int, h: int, stride: int)->None: ...
from enum import IntEnum

class ImGuiItemFlags_(IntEnum):
    NONE = 0x0
    NoTabStop = 0x1
    ButtonRepeat = 0x2
    Disabled = 0x4
    NoNav = 0x8
    NoNavDefaultFocus = 0x10
    SelectableDontClosePopup = 0x20
    MixedValue = 0x40
    ReadOnly = 0x80
    Inputable = 0x100

class ImGuiItemStatusFlags_(IntEnum):
    NONE = 0x0
    HoveredRect = 0x1
    HasDisplayRect = 0x2
    Edited = 0x4
    ToggledSelection = 0x8
    ToggledOpen = 0x10
    HasDeactivated = 0x20
    Deactivated = 0x40
    HoveredWindow = 0x80
    FocusedByTabbing = 0x100

class ImGuiInputTextFlagsPrivate_(IntEnum):
    ImGuiInputTextFlags_Multiline = 0x4000000
    ImGuiInputTextFlags_NoMarkEdited = 0x8000000
    ImGuiInputTextFlags_MergedItem = 0x10000000

class ImGuiButtonFlagsPrivate_(IntEnum):
    ImGuiButtonFlags_PressedOnClick = 0x10
    ImGuiButtonFlags_PressedOnClickRelease = 0x20
    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 0x40
    ImGuiButtonFlags_PressedOnRelease = 0x80
    ImGuiButtonFlags_PressedOnDoubleClick = 0x100
    ImGuiButtonFlags_PressedOnDragDropHold = 0x200
    ImGuiButtonFlags_Repeat = 0x400
    ImGuiButtonFlags_FlattenChildren = 0x800
    ImGuiButtonFlags_AllowItemOverlap = 0x1000
    ImGuiButtonFlags_DontClosePopups = 0x2000
    ImGuiButtonFlags_AlignTextBaseLine = 0x8000
    ImGuiButtonFlags_NoKeyModifiers = 0x10000
    ImGuiButtonFlags_NoHoldingActiveId = 0x20000
    ImGuiButtonFlags_NoNavFocus = 0x40000
    ImGuiButtonFlags_NoHoveredOnFocus = 0x80000
    ImGuiButtonFlags_PressedOnMask_ = 0x3f0
    ImGuiButtonFlags_PressedOnDefault_ = 0x20

class ImGuiComboFlagsPrivate_(IntEnum):
    ImGuiComboFlags_CustomPreview = 0x100000

class ImGuiSliderFlagsPrivate_(IntEnum):
    ImGuiSliderFlags_Vertical = 0x100000
    ImGuiSliderFlags_ReadOnly = 0x200000

class ImGuiSelectableFlagsPrivate_(IntEnum):
    ImGuiSelectableFlags_NoHoldingActiveID = 0x100000
    ImGuiSelectableFlags_SelectOnNav = 0x200000
    ImGuiSelectableFlags_SelectOnClick = 0x400000
    ImGuiSelectableFlags_SelectOnRelease = 0x800000
    ImGuiSelectableFlags_SpanAvailWidth = 0x1000000
    ImGuiSelectableFlags_DrawHoveredWhenHeld = 0x2000000
    ImGuiSelectableFlags_SetNavIdOnHover = 0x4000000
    ImGuiSelectableFlags_NoPadWithHalfSpacing = 0x8000000

class ImGuiTreeNodeFlagsPrivate_(IntEnum):
    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 0x100000

class ImGuiSeparatorFlags_(IntEnum):
    NONE = 0x0
    Horizontal = 0x1
    Vertical = 0x2
    SpanAllColumns = 0x4

class ImGuiTextFlags_(IntEnum):
    NONE = 0x0
    NoWidthForLargeClippedText = 0x1

class ImGuiTooltipFlags_(IntEnum):
    NONE = 0x0
    OverridePreviousTooltip = 0x1

class ImGuiLayoutType_(IntEnum):
    Horizontal = 0x0
    Vertical = 0x1

class ImGuiLogType(IntEnum):
    _None = 0x0
    _TTY = 0x1
    _File = 0x2
    _Buffer = 0x3
    _Clipboard = 0x4

class ImGuiAxis(IntEnum):
    _None = -0x1
    _X = 0x0
    _Y = 0x1

class ImGuiPlotType(IntEnum):
    _Lines = 0x0
    _Histogram = 0x1

class ImGuiPopupPositionPolicy(IntEnum):
    _Default = 0x0
    _ComboBox = 0x1
    _Tooltip = 0x2

class ImGuiDataTypePrivate_(IntEnum):
    ImGuiDataType_String = 0xb
    ImGuiDataType_Pointer = 0xc
    ImGuiDataType_ID = 0xd

class ImGuiNextWindowDataFlags_(IntEnum):
    NONE = 0x0
    HasPos = 0x1
    HasSize = 0x2
    HasContentSize = 0x4
    HasCollapsed = 0x8
    HasSizeConstraint = 0x10
    HasFocus = 0x20
    HasBgAlpha = 0x40
    HasScroll = 0x80
    HasViewport = 0x100
    HasDock = 0x200
    HasWindowClass = 0x400

class ImGuiNextItemDataFlags_(IntEnum):
    NONE = 0x0
    HasWidth = 0x1
    HasOpen = 0x2

class ImGuiKeyPrivate_(IntEnum):
    ImGuiKey_LegacyNativeKey_BEGIN = 0x0
    ImGuiKey_LegacyNativeKey_END = 0x200
    ImGuiKey_Gamepad_BEGIN = 0x269
    ImGuiKey_Gamepad_END = 0x281

class ImGuiInputEventType(IntEnum):
    _None = 0x0
    _MousePos = 0x1
    _MouseWheel = 0x2
    _MouseButton = 0x3
    _MouseViewport = 0x4
    _Key = 0x5
    _Text = 0x6
    _Focus = 0x7
    _COUNT = 0x8

class ImGuiInputSource(IntEnum):
    _None = 0x0
    _Mouse = 0x1
    _Keyboard = 0x2
    _Gamepad = 0x3
    _Clipboard = 0x4
    _Nav = 0x5
    _COUNT = 0x6

class ImGuiInputReadMode(IntEnum):
    _Down = 0x0
    _Pressed = 0x1
    _Released = 0x2
    _Repeat = 0x3
    _RepeatSlow = 0x4
    _RepeatFast = 0x5

class ImGuiActivateFlags_(IntEnum):
    NONE = 0x0
    PreferInput = 0x1
    PreferTweak = 0x2
    TryToPreserveState = 0x4

class ImGuiScrollFlags_(IntEnum):
    NONE = 0x0
    KeepVisibleEdgeX = 0x1
    KeepVisibleEdgeY = 0x2
    KeepVisibleCenterX = 0x4
    KeepVisibleCenterY = 0x8
    AlwaysCenterX = 0x10
    AlwaysCenterY = 0x20
    NoScrollParent = 0x40
    MaskX_ = 0x15
    MaskY_ = 0x2a

class ImGuiNavHighlightFlags_(IntEnum):
    NONE = 0x0
    TypeDefault = 0x1
    TypeThin = 0x2
    AlwaysDraw = 0x4
    NoRounding = 0x8

class ImGuiNavDirSourceFlags_(IntEnum):
    NONE = 0x0
    RawKeyboard = 0x1
    Keyboard = 0x2
    PadDPad = 0x4
    PadLStick = 0x8

class ImGuiNavMoveFlags_(IntEnum):
    NONE = 0x0
    LoopX = 0x1
    LoopY = 0x2
    WrapX = 0x4
    WrapY = 0x8
    AllowCurrentNavId = 0x10
    AlsoScoreVisibleSet = 0x20
    ScrollToEdgeY = 0x40
    Forwarded = 0x80
    DebugNoResult = 0x100
    FocusApi = 0x200
    Tabbing = 0x400
    Activate = 0x800
    DontSetNavHighlight = 0x1000

class ImGuiNavLayer(IntEnum):
    _Main = 0x0
    _Menu = 0x1
    _COUNT = 0x2

class ImGuiOldColumnFlags_(IntEnum):
    NONE = 0x0
    NoBorder = 0x1
    NoResize = 0x2
    NoPreserveWidths = 0x4
    NoForceWithinWindow = 0x8
    GrowParentContentsSize = 0x10
    ImGuiColumnsFlags_None = 0x0
    ImGuiColumnsFlags_NoBorder = 0x1
    ImGuiColumnsFlags_NoResize = 0x2
    ImGuiColumnsFlags_NoPreserveWidths = 0x4
    ImGuiColumnsFlags_NoForceWithinWindow = 0x8
    ImGuiColumnsFlags_GrowParentContentsSize = 0x10

class ImGuiDockNodeFlagsPrivate_(IntEnum):
    ImGuiDockNodeFlags_DockSpace = 0x400
    ImGuiDockNodeFlags_CentralNode = 0x800
    ImGuiDockNodeFlags_NoTabBar = 0x1000
    ImGuiDockNodeFlags_HiddenTabBar = 0x2000
    ImGuiDockNodeFlags_NoWindowMenuButton = 0x4000
    ImGuiDockNodeFlags_NoCloseButton = 0x8000
    ImGuiDockNodeFlags_NoDocking = 0x10000
    ImGuiDockNodeFlags_NoDockingSplitMe = 0x20000
    ImGuiDockNodeFlags_NoDockingSplitOther = 0x40000
    ImGuiDockNodeFlags_NoDockingOverMe = 0x80000
    ImGuiDockNodeFlags_NoDockingOverOther = 0x100000
    ImGuiDockNodeFlags_NoDockingOverEmpty = 0x200000
    ImGuiDockNodeFlags_NoResizeX = 0x400000
    ImGuiDockNodeFlags_NoResizeY = 0x800000
    ImGuiDockNodeFlags_SharedFlagsInheritMask_ = -0x1
    ImGuiDockNodeFlags_NoResizeFlagsMask_ = 0xc00020
    ImGuiDockNodeFlags_LocalFlagsMask_ = 0xc1fc70
    ImGuiDockNodeFlags_LocalFlagsTransferMask_ = 0xc1f870
    ImGuiDockNodeFlags_SavedFlagsMask_ = 0xc1fc20

class ImGuiDataAuthority_(IntEnum):
    Auto = 0x0
    DockNode = 0x1
    Window = 0x2

class ImGuiDockNodeState(IntEnum):
    _Unknown = 0x0
    _HostWindowHiddenBecauseSingleWindow = 0x1
    _HostWindowHiddenBecauseWindowsAreResizing = 0x2
    _HostWindowVisible = 0x3

class ImGuiWindowDockStyleCol(IntEnum):
    _Text = 0x0
    _Tab = 0x1
    _TabHovered = 0x2
    _TabActive = 0x3
    _TabUnfocused = 0x4
    _TabUnfocusedActive = 0x5
    _COUNT = 0x6

class ImGuiContextHookType(IntEnum):
    _NewFramePre = 0x0
    _NewFramePost = 0x1
    _EndFramePre = 0x2
    _EndFramePost = 0x3
    _RenderPre = 0x4
    _RenderPost = 0x5
    _Shutdown = 0x6
    _PendingRemoval__ = 0x7

class ImGuiTabBarFlagsPrivate_(IntEnum):
    ImGuiTabBarFlags_DockNode = 0x100000
    ImGuiTabBarFlags_IsFocused = 0x200000
    ImGuiTabBarFlags_SaveSettings = 0x400000

class ImGuiTabItemFlagsPrivate_(IntEnum):
    ImGuiTabItemFlags_SectionMask_ = 0xc0
    ImGuiTabItemFlags_NoCloseButton = 0x100000
    ImGuiTabItemFlags_Button = 0x200000
    ImGuiTabItemFlags_Unsorted = 0x400000
    ImGuiTabItemFlags_Preview = 0x800000

