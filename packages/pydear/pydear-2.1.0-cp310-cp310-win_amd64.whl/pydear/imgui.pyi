from typing import Type, Tuple, Union, Any, Iterable
import ctypes
from enum import IntEnum


def iterate(data: ctypes.c_void_p, t: Type[ctypes.Structure], count: int)->Iterable[ctypes.Structure]:
    p = ctypes.cast(data, ctypes.POINTER(t))
    for i in range(count):
        yield p[i]


class ImVector(ctypes.Structure):
    _fields_ = (
        ('Size', ctypes.c_int),
        ('Capacity', ctypes.c_int),
        ('Data', ctypes.c_void_p),
    )

    def each(self, t: Type[ctypes.Structure])->Iterable[ctypes.Structure]:
        return iterate(self.Data, t, self.Size)

class ImVec2(ctypes.Structure):
    x: float # FloatType: float
    y: float # FloatType: float

    def __iter__(self): ...
class ImVec4(ctypes.Structure):
    x: float # FloatType: float
    y: float # FloatType: float
    z: float # FloatType: float
    w: float # FloatType: float

    def __iter__(self): ...
class ImFont(ctypes.Structure):
    pass

class ImFontConfig(ctypes.Structure):
    FontData: ctypes.c_void_p # PointerType: void*
    FontDataSize: int # Int32Type: int
    FontDataOwnedByAtlas: bool # BoolType: bool
    FontNo: int # Int32Type: int
    SizePixels: float # FloatType: float
    OversampleH: int # Int32Type: int
    OversampleV: int # Int32Type: int
    PixelSnapH: bool # BoolType: bool
    GlyphExtraSpacing: ImVec2 # ImVec2WrapType: ImVec2
    GlyphOffset: ImVec2 # ImVec2WrapType: ImVec2
    GlyphRanges: ctypes.c_void_p # PointerType: unsigned short*
    GlyphMinAdvanceX: float # FloatType: float
    GlyphMaxAdvanceX: float # FloatType: float
    MergeMode: bool # BoolType: bool
    FontBuilderFlags: int # UInt32Type: unsigned int
    RasterizerMultiply: float # FloatType: float
    EllipsisChar: int # UInt16Type: unsigned short
    Name: ctypes.Array # ArrayType: char[40]
    DstFont: ImFont # PointerToStructType: ImFont*

class ImFontAtlasCustomRect(ctypes.Structure):
    Width: int # UInt16Type: unsigned short
    Height: int # UInt16Type: unsigned short
    X: int # UInt16Type: unsigned short
    Y: int # UInt16Type: unsigned short
    GlyphID: int # UInt32Type: unsigned int
    GlyphAdvanceX: float # FloatType: float
    GlyphOffset: ImVec2 # ImVec2WrapType: ImVec2
    Font: ImFont # PointerToStructType: ImFont*

class ImFontAtlas(ctypes.Structure):
    Flags: int # Int32Type: int
    TexID: ctypes.c_void_p # PointerType: void*
    TexDesiredWidth: int # Int32Type: int
    TexGlyphPadding: int # Int32Type: int
    Locked: bool # BoolType: bool
    TexReady: bool # BoolType: bool
    TexPixelsUseColors: bool # BoolType: bool
    TexPixelsAlpha8: ctypes.c_void_p # PointerType: unsigned char*
    TexPixelsRGBA32: ctypes.c_void_p # PointerType: unsigned int*
    TexWidth: int # Int32Type: int
    TexHeight: int # Int32Type: int
    TexUvScale: ImVec2 # ImVec2WrapType: ImVec2
    TexUvWhitePixel: ImVec2 # ImVec2WrapType: ImVec2
    Fonts: ImVector # ImVector: ImVector
    CustomRects: ImVector # ImVector: ImVector
    ConfigData: ImVector # ImVector: ImVector
    TexUvLines: ctypes.Array # ArrayType: ImVec4[64]
    FontBuilderIO: ctypes.c_void_p # PointerType: ImFontBuilderIO*
    FontBuilderFlags: int # UInt32Type: unsigned int
    PackIdMouseCursors: int # Int32Type: int
    PackIdLines: int # Int32Type: int

    def AddFont(self, font_cfg: ImFontConfig)->ImFont: ...
    def AddFontDefault(self, font_cfg: ImFontConfig=None)->ImFont: ...
    def AddFontFromFileTTF(self, filename: Union[str, bytes, None], size_pixels: float, font_cfg: ImFontConfig=None, glyph_ranges: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->ImFont: ...
    def AddFontFromMemoryTTF(self, font_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], font_size: int, size_pixels: float, font_cfg: ImFontConfig=None, glyph_ranges: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->ImFont: ...
    def AddFontFromMemoryCompressedTTF(self, compressed_font_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], compressed_font_size: int, size_pixels: float, font_cfg: ImFontConfig=None, glyph_ranges: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->ImFont: ...
    def AddFontFromMemoryCompressedBase85TTF(self, compressed_font_data_base85: Union[str, bytes, None], size_pixels: float, font_cfg: ImFontConfig=None, glyph_ranges: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->ImFont: ...
    def ClearInputData(self)->None: ...
    def ClearTexData(self)->None: ...
    def ClearFonts(self)->None: ...
    def Clear(self)->None: ...
    def Build(self)->bool: ...
    def GetTexDataAsAlpha8(self, out_pixels: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_width: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_height: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_bytes_per_pixel: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->None: ...
    def GetTexDataAsRGBA32(self, out_pixels: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_width: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_height: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_bytes_per_pixel: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->None: ...
    def IsBuilt(self)->bool: ...
    def SetTexID(self, _id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
    def GetGlyphRangesDefault(self)->ctypes.c_void_p: ...
    def GetGlyphRangesKorean(self)->ctypes.c_void_p: ...
    def GetGlyphRangesJapanese(self)->ctypes.c_void_p: ...
    def GetGlyphRangesChineseFull(self)->ctypes.c_void_p: ...
    def GetGlyphRangesChineseSimplifiedCommon(self)->ctypes.c_void_p: ...
    def GetGlyphRangesCyrillic(self)->ctypes.c_void_p: ...
    def GetGlyphRangesThai(self)->ctypes.c_void_p: ...
    def GetGlyphRangesVietnamese(self)->ctypes.c_void_p: ...
    def AddCustomRectRegular(self, width: int, height: int)->int: ...
    def AddCustomRectFontGlyph(self, font: ImFont, _id: int, width: int, height: int, advance_x: float, offset: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0))->int: ...
    def GetCustomRectByIndex(self, index: int)->ImFontAtlasCustomRect: ...
    def CalcCustomRectUV(self, rect: ImFontAtlasCustomRect, out_uv_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_uv_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
    def GetMouseCursorTexData(self, cursor: int, out_offset: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_size: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_uv_border: Union[ctypes.Array, ctypes.c_void_p, None], out_uv_fill: Union[ctypes.Array, ctypes.c_void_p, None])->bool: ...
class ImGuiKeyData(ctypes.Structure):
    Down: bool # BoolType: bool
    DownDuration: float # FloatType: float
    DownDurationPrev: float # FloatType: float
    AnalogValue: float # FloatType: float

class ImGuiIO(ctypes.Structure):
    ConfigFlags: int # Int32Type: int
    BackendFlags: int # Int32Type: int
    DisplaySize: ImVec2 # ImVec2WrapType: ImVec2
    DeltaTime: float # FloatType: float
    IniSavingRate: float # FloatType: float
    IniFilename: str # CStringType: const char *
    LogFilename: str # CStringType: const char *
    MouseDoubleClickTime: float # FloatType: float
    MouseDoubleClickMaxDist: float # FloatType: float
    MouseDragThreshold: float # FloatType: float
    KeyRepeatDelay: float # FloatType: float
    KeyRepeatRate: float # FloatType: float
    UserData: ctypes.c_void_p # PointerType: void*
    Fonts: ImFontAtlas # PointerToStructType: ImFontAtlas*
    FontGlobalScale: float # FloatType: float
    FontAllowUserScaling: bool # BoolType: bool
    FontDefault: ImFont # PointerToStructType: ImFont*
    DisplayFramebufferScale: ImVec2 # ImVec2WrapType: ImVec2
    ConfigDockingNoSplit: bool # BoolType: bool
    ConfigDockingWithShift: bool # BoolType: bool
    ConfigDockingAlwaysTabBar: bool # BoolType: bool
    ConfigDockingTransparentPayload: bool # BoolType: bool
    ConfigViewportsNoAutoMerge: bool # BoolType: bool
    ConfigViewportsNoTaskBarIcon: bool # BoolType: bool
    ConfigViewportsNoDecoration: bool # BoolType: bool
    ConfigViewportsNoDefaultParent: bool # BoolType: bool
    MouseDrawCursor: bool # BoolType: bool
    ConfigMacOSXBehaviors: bool # BoolType: bool
    ConfigInputTrickleEventQueue: bool # BoolType: bool
    ConfigInputTextCursorBlink: bool # BoolType: bool
    ConfigDragClickToInputText: bool # BoolType: bool
    ConfigWindowsResizeFromEdges: bool # BoolType: bool
    ConfigWindowsMoveFromTitleBarOnly: bool # BoolType: bool
    ConfigMemoryCompactTimer: float # FloatType: float
    BackendPlatformName: str # CStringType: const char *
    BackendRendererName: str # CStringType: const char *
    BackendPlatformUserData: ctypes.c_void_p # PointerType: void*
    BackendRendererUserData: ctypes.c_void_p # PointerType: void*
    BackendLanguageUserData: ctypes.c_void_p # PointerType: void*
    GetClipboardTextFn: ctypes.c_void_p # PointerType: void**
    SetClipboardTextFn: ctypes.c_void_p # PointerType: void**
    ClipboardUserData: ctypes.c_void_p # PointerType: void*
    SetPlatformImeDataFn: ctypes.c_void_p # PointerType: void**
    ImeWindowHandle: ctypes.c_void_p # PointerType: void*
    WantCaptureMouse: bool # BoolType: bool
    WantCaptureKeyboard: bool # BoolType: bool
    WantTextInput: bool # BoolType: bool
    WantSetMousePos: bool # BoolType: bool
    WantSaveIniSettings: bool # BoolType: bool
    NavActive: bool # BoolType: bool
    NavVisible: bool # BoolType: bool
    Framerate: float # FloatType: float
    MetricsRenderVertices: int # Int32Type: int
    MetricsRenderIndices: int # Int32Type: int
    MetricsRenderWindows: int # Int32Type: int
    MetricsActiveWindows: int # Int32Type: int
    MetricsActiveAllocations: int # Int32Type: int
    MouseDelta: ImVec2 # ImVec2WrapType: ImVec2
    KeyMap: ctypes.Array # ArrayType: int[645]
    KeysDown: ctypes.Array # ArrayType: bool[645]
    MousePos: ImVec2 # ImVec2WrapType: ImVec2
    MouseDown: ctypes.Array # ArrayType: bool[5]
    MouseWheel: float # FloatType: float
    MouseWheelH: float # FloatType: float
    MouseHoveredViewport: int # UInt32Type: unsigned int
    KeyCtrl: bool # BoolType: bool
    KeyShift: bool # BoolType: bool
    KeyAlt: bool # BoolType: bool
    KeySuper: bool # BoolType: bool
    NavInputs: ctypes.Array # ArrayType: float[20]
    KeyMods: int # Int32Type: int
    KeysData: ctypes.Array # ArrayType: ImGuiKeyData[645]
    WantCaptureMouseUnlessPopupClose: bool # BoolType: bool
    MousePosPrev: ImVec2 # ImVec2WrapType: ImVec2
    MouseClickedPos: ctypes.Array # ArrayType: ImVec2[5]
    MouseClickedTime: ctypes.Array # ArrayType: double[5]
    MouseClicked: ctypes.Array # ArrayType: bool[5]
    MouseDoubleClicked: ctypes.Array # ArrayType: bool[5]
    MouseClickedCount: ctypes.Array # ArrayType: unsigned short[5]
    MouseClickedLastCount: ctypes.Array # ArrayType: unsigned short[5]
    MouseReleased: ctypes.Array # ArrayType: bool[5]
    MouseDownOwned: ctypes.Array # ArrayType: bool[5]
    MouseDownOwnedUnlessPopupClose: ctypes.Array # ArrayType: bool[5]
    MouseDownDuration: ctypes.Array # ArrayType: float[5]
    MouseDownDurationPrev: ctypes.Array # ArrayType: float[5]
    MouseDragMaxDistanceAbs: ctypes.Array # ArrayType: ImVec2[5]
    MouseDragMaxDistanceSqr: ctypes.Array # ArrayType: float[5]
    NavInputsDownDuration: ctypes.Array # ArrayType: float[20]
    NavInputsDownDurationPrev: ctypes.Array # ArrayType: float[20]
    PenPressure: float # FloatType: float
    AppFocusLost: bool # BoolType: bool
    BackendUsingLegacyKeyArrays: int # Int8Type: char
    BackendUsingLegacyNavInputArray: bool # BoolType: bool
    InputQueueSurrogate: int # UInt16Type: unsigned short
    InputQueueCharacters: ImVector # ImVector: ImVector

    @property
    def Fonts(self)->'ImFontAtlas': ...
    def AddKeyEvent(self, key: int, down: bool)->None: ...
    def AddKeyAnalogEvent(self, key: int, down: bool, v: float)->None: ...
    def AddMousePosEvent(self, x: float, y: float)->None: ...
    def AddMouseButtonEvent(self, button: int, down: bool)->None: ...
    def AddMouseWheelEvent(self, wh_x: float, wh_y: float)->None: ...
    def AddMouseViewportEvent(self, _id: int)->None: ...
    def AddFocusEvent(self, focused: bool)->None: ...
    def AddInputCharacter(self, c: int)->None: ...
    def AddInputCharacterUTF16(self, c: int)->None: ...
    def AddInputCharactersUTF8(self, str: Union[str, bytes, None])->None: ...
    def ClearInputCharacters(self)->None: ...
    def ClearInputKeys(self)->None: ...
    def SetKeyEventNativeData(self, key: int, native_keycode: int, native_scancode: int, native_legacy_index: int=-1)->None: ...
class ImDrawCmd(ctypes.Structure):
    ClipRect: ImVec4 # ImVec4WrapType: ImVec4
    TextureId: ctypes.c_void_p # PointerType: void*
    VtxOffset: int # UInt32Type: unsigned int
    IdxOffset: int # UInt32Type: unsigned int
    ElemCount: int # UInt32Type: unsigned int
    UserCallback: ctypes.c_void_p # PointerType: void**
    UserCallbackData: ctypes.c_void_p # PointerType: void*

class ImDrawData(ctypes.Structure):
    Valid: bool # BoolType: bool
    CmdListsCount: int # Int32Type: int
    TotalIdxCount: int # Int32Type: int
    TotalVtxCount: int # Int32Type: int
    CmdLists: ctypes.c_void_p # PointerType: ImDrawList**
    DisplayPos: ImVec2 # ImVec2WrapType: ImVec2
    DisplaySize: ImVec2 # ImVec2WrapType: ImVec2
    FramebufferScale: ImVec2 # ImVec2WrapType: ImVec2
    OwnerViewport: ImGuiViewport # PointerToStructType: ImGuiViewport*

class ImDrawListSplitter(ctypes.Structure):
    _Current: int # Int32Type: int
    _Count: int # Int32Type: int
    _Channels: ImVector # ImVector: ImVector

class ImDrawCmdHeader(ctypes.Structure):
    ClipRect: ImVec4 # ImVec4WrapType: ImVec4
    TextureId: ctypes.c_void_p # PointerType: void*
    VtxOffset: int # UInt32Type: unsigned int

class ImDrawList(ctypes.Structure):
    CmdBuffer: ImVector # ImVector: ImVector
    IdxBuffer: ImVector # ImVector: ImVector
    VtxBuffer: ImVector # ImVector: ImVector
    Flags: int # Int32Type: int
    _VtxCurrentIdx: int # UInt32Type: unsigned int
    _Data: ctypes.c_void_p # PointerType: ImDrawListSharedData*
    _OwnerName: str # CStringType: const char *
    _VtxWritePtr: ctypes.c_void_p # PointerType: ImDrawVert*
    _IdxWritePtr: ctypes.c_void_p # PointerType: unsigned short*
    _ClipRectStack: ImVector # ImVector: ImVector
    _TextureIdStack: ImVector # ImVector: ImVector
    _Path: ImVector # ImVector: ImVector
    _CmdHeader: ImDrawCmdHeader # StructType: ImDrawCmdHeader
    _Splitter: ImDrawListSplitter # StructType: ImDrawListSplitter
    _FringeScale: float # FloatType: float

class ImGuiViewport(ctypes.Structure):
    ID: int # UInt32Type: unsigned int
    Flags: int # Int32Type: int
    Pos: ImVec2 # ImVec2WrapType: ImVec2
    Size: ImVec2 # ImVec2WrapType: ImVec2
    WorkPos: ImVec2 # ImVec2WrapType: ImVec2
    WorkSize: ImVec2 # ImVec2WrapType: ImVec2
    DpiScale: float # FloatType: float
    ParentViewportId: int # UInt32Type: unsigned int
    DrawData: ImDrawData # PointerToStructType: ImDrawData*
    RendererUserData: ctypes.c_void_p # PointerType: void*
    PlatformUserData: ctypes.c_void_p # PointerType: void*
    PlatformHandle: ctypes.c_void_p # PointerType: void*
    PlatformHandleRaw: ctypes.c_void_p # PointerType: void*
    PlatformRequestMove: bool # BoolType: bool
    PlatformRequestResize: bool # BoolType: bool
    PlatformRequestClose: bool # BoolType: bool

    def GetCenter(self)->ImVec2: ...
    def GetWorkCenter(self)->ImVec2: ...
class ImGuiStyle(ctypes.Structure):
    pass

class ImGuiWindowClass(ctypes.Structure):
    pass

def CreateContext(shared_font_atlas: ImFontAtlas=None)->ImGuiContext: ...
def DestroyContext(ctx: ImGuiContext=None)->None: ...
def GetCurrentContext()->ImGuiContext: ...
def SetCurrentContext(ctx: ImGuiContext)->None: ...
def GetIO()->ImGuiIO: ...
def GetStyle()->ImGuiStyle: ...
def NewFrame()->None: ...
def EndFrame()->None: ...
def Render()->None: ...
def GetDrawData()->ImDrawData: ...
def ShowDemoWindow(p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->None: ...
def ShowMetricsWindow(p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->None: ...
def ShowStackToolWindow(p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->None: ...
def ShowAboutWindow(p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->None: ...
def ShowStyleEditor(ref: ImGuiStyle=None)->None: ...
def ShowStyleSelector(label: Union[str, bytes, None])->bool: ...
def ShowFontSelector(label: Union[str, bytes, None])->None: ...
def ShowUserGuide()->None: ...
def GetVersion()->str: ...
def StyleColorsDark(dst: ImGuiStyle=None)->None: ...
def StyleColorsLight(dst: ImGuiStyle=None)->None: ...
def StyleColorsClassic(dst: ImGuiStyle=None)->None: ...
def Begin(name: Union[str, bytes, None], p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, flags: int=0)->bool: ...
def End()->None: ...
def BeginChild(str_id: Union[str, bytes, None], size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0), border: bool=False, flags: int=0)->bool: ...
def BeginChild_2(_id: int, size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0), border: bool=False, flags: int=0)->bool: ...
def EndChild()->None: ...
def IsWindowAppearing()->bool: ...
def IsWindowCollapsed()->bool: ...
def IsWindowFocused(flags: int=0)->bool: ...
def IsWindowHovered(flags: int=0)->bool: ...
def GetWindowDrawList()->ImDrawList: ...
def GetWindowDpiScale()->float: ...
def GetWindowPos()->ImVec2: ...
def GetWindowSize()->ImVec2: ...
def GetWindowWidth()->float: ...
def GetWindowHeight()->float: ...
def GetWindowViewport()->ImGuiViewport: ...
def SetNextWindowPos(pos: Union[ImVec2, Tuple[float, float], None], cond: int=0, pivot: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0))->None: ...
def SetNextWindowSize(size: Union[ImVec2, Tuple[float, float], None], cond: int=0)->None: ...
def SetNextWindowContentSize(size: Union[ImVec2, Tuple[float, float], None])->None: ...
def SetNextWindowCollapsed(collapsed: bool, cond: int=0)->None: ...
def SetNextWindowFocus()->None: ...
def SetNextWindowBgAlpha(alpha: float)->None: ...
def SetNextWindowViewport(viewport_id: int)->None: ...
def SetWindowPos(pos: Union[ImVec2, Tuple[float, float], None], cond: int=0)->None: ...
def SetWindowSize(size: Union[ImVec2, Tuple[float, float], None], cond: int=0)->None: ...
def SetWindowCollapsed(collapsed: bool, cond: int=0)->None: ...
def SetWindowFocus()->None: ...
def SetWindowFontScale(scale: float)->None: ...
def SetWindowPos_2(name: Union[str, bytes, None], pos: Union[ImVec2, Tuple[float, float], None], cond: int=0)->None: ...
def SetWindowSize_2(name: Union[str, bytes, None], size: Union[ImVec2, Tuple[float, float], None], cond: int=0)->None: ...
def SetWindowCollapsed_2(name: Union[str, bytes, None], collapsed: bool, cond: int=0)->None: ...
def SetWindowFocus_2(name: Union[str, bytes, None])->None: ...
def GetContentRegionAvail()->ImVec2: ...
def GetContentRegionMax()->ImVec2: ...
def GetWindowContentRegionMin()->ImVec2: ...
def GetWindowContentRegionMax()->ImVec2: ...
def GetScrollX()->float: ...
def GetScrollY()->float: ...
def SetScrollX(scroll_x: float)->None: ...
def SetScrollY(scroll_y: float)->None: ...
def GetScrollMaxX()->float: ...
def GetScrollMaxY()->float: ...
def SetScrollHereX(center_x_ratio: float=0.5)->None: ...
def SetScrollHereY(center_y_ratio: float=0.5)->None: ...
def SetScrollFromPosX(local_x: float, center_x_ratio: float=0.5)->None: ...
def SetScrollFromPosY(local_y: float, center_y_ratio: float=0.5)->None: ...
def PushFont(font: ImFont)->None: ...
def PopFont()->None: ...
def PushStyleColor(idx: int, col: int)->None: ...
def PushStyleColor_2(idx: int, col: ImVec4)->None: ...
def PopStyleColor(count: int=1)->None: ...
def PushStyleVar(idx: int, val: float)->None: ...
def PushStyleVar_2(idx: int, val: Union[ImVec2, Tuple[float, float], None])->None: ...
def PopStyleVar(count: int=1)->None: ...
def PushAllowKeyboardFocus(allow_keyboard_focus: bool)->None: ...
def PopAllowKeyboardFocus()->None: ...
def PushButtonRepeat(repeat: bool)->None: ...
def PopButtonRepeat()->None: ...
def PushItemWidth(item_width: float)->None: ...
def PopItemWidth()->None: ...
def SetNextItemWidth(item_width: float)->None: ...
def CalcItemWidth()->float: ...
def PushTextWrapPos(wrap_local_pos_x: float=0.0)->None: ...
def PopTextWrapPos()->None: ...
def GetFont()->ImFont: ...
def GetFontSize()->float: ...
def GetFontTexUvWhitePixel()->ImVec2: ...
def GetColorU32(idx: int, alpha_mul: float=1.0)->int: ...
def GetColorU32_2(col: ImVec4)->int: ...
def GetColorU32_3(col: int)->int: ...
def GetStyleColorVec4(idx: int)->ImVec4: ...
def Separator()->None: ...
def SameLine(offset_from_start_x: float=0.0, spacing: float=-1.0)->None: ...
def NewLine()->None: ...
def Spacing()->None: ...
def Dummy(size: Union[ImVec2, Tuple[float, float], None])->None: ...
def Indent(indent_w: float=0.0)->None: ...
def Unindent(indent_w: float=0.0)->None: ...
def BeginGroup()->None: ...
def EndGroup()->None: ...
def GetCursorPos()->ImVec2: ...
def GetCursorPosX()->float: ...
def GetCursorPosY()->float: ...
def SetCursorPos(local_pos: Union[ImVec2, Tuple[float, float], None])->None: ...
def SetCursorPosX(local_x: float)->None: ...
def SetCursorPosY(local_y: float)->None: ...
def GetCursorStartPos()->ImVec2: ...
def GetCursorScreenPos()->ImVec2: ...
def SetCursorScreenPos(pos: Union[ImVec2, Tuple[float, float], None])->None: ...
def AlignTextToFramePadding()->None: ...
def GetTextLineHeight()->float: ...
def GetTextLineHeightWithSpacing()->float: ...
def GetFrameHeight()->float: ...
def GetFrameHeightWithSpacing()->float: ...
def PushID(str_id: Union[str, bytes, None])->None: ...
def PushID_2(str_id_begin: Union[str, bytes, None], str_id_end: Union[str, bytes, None])->None: ...
def PushID_3(ptr_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def PushID_4(int_id: int)->None: ...
def PopID()->None: ...
def GetID(str_id: Union[str, bytes, None])->int: ...
def GetID_2(str_id_begin: Union[str, bytes, None], str_id_end: Union[str, bytes, None])->int: ...
def GetID_3(ptr_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def TextUnformatted(text: Union[str, bytes, None], text_end: Union[str, bytes, None]=None)->None: ...
def Text(fmt: Union[str, bytes, None])->None: ...
def TextColored(col: ImVec4, fmt: Union[str, bytes, None])->None: ...
def TextDisabled(fmt: Union[str, bytes, None])->None: ...
def TextWrapped(fmt: Union[str, bytes, None])->None: ...
def LabelText(label: Union[str, bytes, None], fmt: Union[str, bytes, None])->None: ...
def BulletText(fmt: Union[str, bytes, None])->None: ...
def Button(label: Union[str, bytes, None], size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0))->bool: ...
def SmallButton(label: Union[str, bytes, None])->bool: ...
def InvisibleButton(str_id: Union[str, bytes, None], size: Union[ImVec2, Tuple[float, float], None], flags: int=0)->bool: ...
def ArrowButton(str_id: Union[str, bytes, None], dir: int)->bool: ...
def Image(user_texture_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], size: Union[ImVec2, Tuple[float, float], None], uv0: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0), uv1: Union[ImVec2, Tuple[float, float], None]=ImVec2(1,1), tint_col: ImVec4=ImVec4(1,1,1,1), border_col: ImVec4=ImVec4(0,0,0,0))->None: ...
def ImageButton(user_texture_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], size: Union[ImVec2, Tuple[float, float], None], uv0: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0), uv1: Union[ImVec2, Tuple[float, float], None]=ImVec2(1,1), frame_padding: int=-1, bg_col: ImVec4=ImVec4(0,0,0,0), tint_col: ImVec4=ImVec4(1,1,1,1))->bool: ...
def Checkbox(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def RadioButton(label: Union[str, bytes, None], active: bool)->bool: ...
def RadioButton_2(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_button: int)->bool: ...
def ProgressBar(fraction: float, size_arg: Union[ImVec2, Tuple[float, float], None]=ImVec2(-1.175494351e-38,0), overlay: Union[str, bytes, None]=None)->None: ...
def Bullet()->None: ...
def BeginCombo(label: Union[str, bytes, None], preview_value: Union[str, bytes, None], flags: int=0)->bool: ...
def EndCombo()->None: ...
def DragFloat(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def DragFloat2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def DragFloat3(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def DragFloat4(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def DragFloatRange2(label: Union[str, bytes, None], v_current_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_current_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format: Union[str, bytes, None]=b"%.3f", format_max: Union[str, bytes, None]=None, flags: int=0)->bool: ...
def DragInt(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_speed: float=1.0, v_min: int=0, v_max: int=0, format: Union[str, bytes, None]=b"%d", flags: int=0)->bool: ...
def DragInt2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_speed: float=1.0, v_min: int=0, v_max: int=0, format: Union[str, bytes, None]=b"%d", flags: int=0)->bool: ...
def DragInt3(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_speed: float=1.0, v_min: int=0, v_max: int=0, format: Union[str, bytes, None]=b"%d", flags: int=0)->bool: ...
def DragInt4(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_speed: float=1.0, v_min: int=0, v_max: int=0, format: Union[str, bytes, None]=b"%d", flags: int=0)->bool: ...
def DragIntRange2(label: Union[str, bytes, None], v_current_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_current_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_speed: float=1.0, v_min: int=0, v_max: int=0, format: Union[str, bytes, None]=b"%d", format_max: Union[str, bytes, None]=None, flags: int=0)->bool: ...
def DragScalar(label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_speed: float=1.0, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, format: Union[str, bytes, None]=None, flags: int=0)->bool: ...
def DragScalarN(label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], components: int, v_speed: float=1.0, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, format: Union[str, bytes, None]=None, flags: int=0)->bool: ...
def SliderFloat(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_min: float, v_max: float, format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def SliderFloat2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_min: float, v_max: float, format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def SliderFloat3(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_min: float, v_max: float, format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def SliderFloat4(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_min: float, v_max: float, format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def SliderAngle(label: Union[str, bytes, None], v_rad: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_degrees_min: float=-360.0, v_degrees_max: float=+360.0, format: Union[str, bytes, None]=b"%.0f deg", flags: int=0)->bool: ...
def SliderInt(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_min: int, v_max: int, format: Union[str, bytes, None]=b"%d", flags: int=0)->bool: ...
def SliderInt2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_min: int, v_max: int, format: Union[str, bytes, None]=b"%d", flags: int=0)->bool: ...
def SliderInt3(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_min: int, v_max: int, format: Union[str, bytes, None]=b"%d", flags: int=0)->bool: ...
def SliderInt4(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_min: int, v_max: int, format: Union[str, bytes, None]=b"%d", flags: int=0)->bool: ...
def SliderScalar(label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None]=None, flags: int=0)->bool: ...
def SliderScalarN(label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], components: int, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None]=None, flags: int=0)->bool: ...
def VSliderFloat(label: Union[str, bytes, None], size: Union[ImVec2, Tuple[float, float], None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_min: float, v_max: float, format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def VSliderInt(label: Union[str, bytes, None], size: Union[ImVec2, Tuple[float, float], None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_min: int, v_max: int, format: Union[str, bytes, None]=b"%d", flags: int=0)->bool: ...
def VSliderScalar(label: Union[str, bytes, None], size: Union[ImVec2, Tuple[float, float], None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None]=None, flags: int=0)->bool: ...
def InputFloat(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], step: float=0.0, step_fast: float=0.0, format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def InputFloat2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def InputFloat3(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def InputFloat4(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], format: Union[str, bytes, None]=b"%.3f", flags: int=0)->bool: ...
def InputInt(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], step: int=1, step_fast: int=100, flags: int=0)->bool: ...
def InputInt2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], flags: int=0)->bool: ...
def InputInt3(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], flags: int=0)->bool: ...
def InputInt4(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], flags: int=0)->bool: ...
def InputDouble(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], step: float=0.0, step_fast: float=0.0, format: Union[str, bytes, None]=b"%.6f", flags: int=0)->bool: ...
def InputScalar(label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_step: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, p_step_fast: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, format: Union[str, bytes, None]=None, flags: int=0)->bool: ...
def InputScalarN(label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], components: int, p_step: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, p_step_fast: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, format: Union[str, bytes, None]=None, flags: int=0)->bool: ...
def ColorEdit3(label: Union[str, bytes, None], col: Union[ctypes.Array, ctypes.c_void_p, None], flags: int=0)->bool: ...
def ColorEdit4(label: Union[str, bytes, None], col: Union[ctypes.Array, ctypes.c_void_p, None], flags: int=0)->bool: ...
def ColorPicker3(label: Union[str, bytes, None], col: Union[ctypes.Array, ctypes.c_void_p, None], flags: int=0)->bool: ...
def ColorPicker4(label: Union[str, bytes, None], col: Union[ctypes.Array, ctypes.c_void_p, None], flags: int=0, ref_col: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->bool: ...
def ColorButton(desc_id: Union[str, bytes, None], col: ImVec4, flags: int=0, size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0))->bool: ...
def SetColorEditOptions(flags: int)->None: ...
def TreeNode(label: Union[str, bytes, None])->bool: ...
def TreeNode_2(str_id: Union[str, bytes, None], fmt: Union[str, bytes, None])->bool: ...
def TreeNode_3(ptr_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], fmt: Union[str, bytes, None])->bool: ...
def TreeNodeEx(label: Union[str, bytes, None], flags: int=0)->bool: ...
def TreeNodeEx_2(str_id: Union[str, bytes, None], flags: int, fmt: Union[str, bytes, None])->bool: ...
def TreeNodeEx_3(ptr_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], flags: int, fmt: Union[str, bytes, None])->bool: ...
def TreePush(str_id: Union[str, bytes, None])->None: ...
def TreePush_2(ptr_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->None: ...
def TreePop()->None: ...
def GetTreeNodeToLabelSpacing()->float: ...
def CollapsingHeader(label: Union[str, bytes, None], flags: int=0)->bool: ...
def CollapsingHeader_2(label: Union[str, bytes, None], p_visible: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], flags: int=0)->bool: ...
def SetNextItemOpen(is_open: bool, cond: int=0)->None: ...
def Selectable(label: Union[str, bytes, None], selected: bool=False, flags: int=0, size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0))->bool: ...
def Selectable_2(label: Union[str, bytes, None], p_selected: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], flags: int=0, size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0))->bool: ...
def BeginListBox(label: Union[str, bytes, None], size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0))->bool: ...
def EndListBox()->None: ...
def PlotHistogram(label: Union[str, bytes, None], values: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], values_count: int, values_offset: int=0, overlay_text: Union[str, bytes, None]=None, scale_min: float=3.402823466e+38, scale_max: float=3.402823466e+38, graph_size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0), stride: int=sizeof(float))->None: ...
def Value(prefix: Union[str, bytes, None], b: bool)->None: ...
def Value_2(prefix: Union[str, bytes, None], v: int)->None: ...
def Value_3(prefix: Union[str, bytes, None], v: int)->None: ...
def Value_4(prefix: Union[str, bytes, None], v: float, float_format: Union[str, bytes, None]=None)->None: ...
def BeginMenuBar()->bool: ...
def EndMenuBar()->None: ...
def BeginMainMenuBar()->bool: ...
def EndMainMenuBar()->None: ...
def BeginMenu(label: Union[str, bytes, None], enabled: bool=True)->bool: ...
def EndMenu()->None: ...
def MenuItem(label: Union[str, bytes, None], shortcut: Union[str, bytes, None]=None, selected: bool=False, enabled: bool=True)->bool: ...
def MenuItem_2(label: Union[str, bytes, None], shortcut: Union[str, bytes, None], p_selected: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], enabled: bool=True)->bool: ...
def BeginTooltip()->None: ...
def EndTooltip()->None: ...
def SetTooltip(fmt: Union[str, bytes, None])->None: ...
def BeginPopup(str_id: Union[str, bytes, None], flags: int=0)->bool: ...
def BeginPopupModal(name: Union[str, bytes, None], p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, flags: int=0)->bool: ...
def EndPopup()->None: ...
def OpenPopup(str_id: Union[str, bytes, None], popup_flags: int=0)->None: ...
def OpenPopup_2(_id: int, popup_flags: int=0)->None: ...
def OpenPopupOnItemClick(str_id: Union[str, bytes, None]=None, popup_flags: int=1)->None: ...
def CloseCurrentPopup()->None: ...
def BeginPopupContextItem(str_id: Union[str, bytes, None]=None, popup_flags: int=1)->bool: ...
def BeginPopupContextWindow(str_id: Union[str, bytes, None]=None, popup_flags: int=1)->bool: ...
def BeginPopupContextVoid(str_id: Union[str, bytes, None]=None, popup_flags: int=1)->bool: ...
def IsPopupOpen(str_id: Union[str, bytes, None], flags: int=0)->bool: ...
def BeginTable(str_id: Union[str, bytes, None], column: int, flags: int=0, outer_size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0.0,0.0), inner_width: float=0.0)->bool: ...
def EndTable()->None: ...
def TableNextRow(row_flags: int=0, min_row_height: float=0.0)->None: ...
def TableNextColumn()->bool: ...
def TableSetColumnIndex(column_n: int)->bool: ...
def TableSetupColumn(label: Union[str, bytes, None], flags: int=0, init_width_or_weight: float=0.0, user_id: int=0)->None: ...
def TableSetupScrollFreeze(cols: int, rows: int)->None: ...
def TableHeadersRow()->None: ...
def TableHeader(label: Union[str, bytes, None])->None: ...
def TableGetSortSpecs()->ctypes.c_void_p: ...
def TableGetColumnCount()->int: ...
def TableGetColumnIndex()->int: ...
def TableGetRowIndex()->int: ...
def TableGetColumnName(column_n: int=-1)->str: ...
def TableGetColumnFlags(column_n: int=-1)->int: ...
def TableSetColumnEnabled(column_n: int, v: bool)->None: ...
def TableSetBgColor(target: int, color: int, column_n: int=-1)->None: ...
def Columns(count: int=1, _id: Union[str, bytes, None]=None, border: bool=True)->None: ...
def NextColumn()->None: ...
def GetColumnIndex()->int: ...
def GetColumnWidth(column_index: int=-1)->float: ...
def SetColumnWidth(column_index: int, width: float)->None: ...
def GetColumnOffset(column_index: int=-1)->float: ...
def SetColumnOffset(column_index: int, offset_x: float)->None: ...
def GetColumnsCount()->int: ...
def BeginTabBar(str_id: Union[str, bytes, None], flags: int=0)->bool: ...
def EndTabBar()->None: ...
def BeginTabItem(label: Union[str, bytes, None], p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, flags: int=0)->bool: ...
def EndTabItem()->None: ...
def TabItemButton(label: Union[str, bytes, None], flags: int=0)->bool: ...
def SetTabItemClosed(tab_or_docked_window_label: Union[str, bytes, None])->None: ...
def DockSpace(_id: int, size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0), flags: int=0, window_class: ImGuiWindowClass=None)->int: ...
def DockSpaceOverViewport(viewport: ImGuiViewport=None, flags: int=0, window_class: ImGuiWindowClass=None)->int: ...
def SetNextWindowDockID(dock_id: int, cond: int=0)->None: ...
def SetNextWindowClass(window_class: ImGuiWindowClass)->None: ...
def GetWindowDockID()->int: ...
def IsWindowDocked()->bool: ...
def LogToTTY(auto_open_depth: int=-1)->None: ...
def LogToFile(auto_open_depth: int=-1, filename: Union[str, bytes, None]=None)->None: ...
def LogToClipboard(auto_open_depth: int=-1)->None: ...
def LogFinish()->None: ...
def LogButtons()->None: ...
def LogText(fmt: Union[str, bytes, None])->None: ...
def BeginDragDropSource(flags: int=0)->bool: ...
def SetDragDropPayload(type: Union[str, bytes, None], data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], sz: int, cond: int=0)->bool: ...
def EndDragDropSource()->None: ...
def BeginDragDropTarget()->bool: ...
def AcceptDragDropPayload(type: Union[str, bytes, None], flags: int=0)->ctypes.c_void_p: ...
def EndDragDropTarget()->None: ...
def GetDragDropPayload()->ctypes.c_void_p: ...
def BeginDisabled(disabled: bool=True)->None: ...
def EndDisabled()->None: ...
def PushClipRect(clip_rect_min: Union[ImVec2, Tuple[float, float], None], clip_rect_max: Union[ImVec2, Tuple[float, float], None], intersect_with_current_clip_rect: bool)->None: ...
def PopClipRect()->None: ...
def SetItemDefaultFocus()->None: ...
def SetKeyboardFocusHere(offset: int=0)->None: ...
def IsItemHovered(flags: int=0)->bool: ...
def IsItemActive()->bool: ...
def IsItemFocused()->bool: ...
def IsItemClicked(mouse_button: int=0)->bool: ...
def IsItemVisible()->bool: ...
def IsItemEdited()->bool: ...
def IsItemActivated()->bool: ...
def IsItemDeactivated()->bool: ...
def IsItemDeactivatedAfterEdit()->bool: ...
def IsItemToggledOpen()->bool: ...
def IsAnyItemHovered()->bool: ...
def IsAnyItemActive()->bool: ...
def IsAnyItemFocused()->bool: ...
def GetItemRectMin()->ImVec2: ...
def GetItemRectMax()->ImVec2: ...
def GetItemRectSize()->ImVec2: ...
def SetItemAllowOverlap()->None: ...
def GetMainViewport()->ImGuiViewport: ...
def GetBackgroundDrawList()->ImDrawList: ...
def GetForegroundDrawList()->ImDrawList: ...
def GetBackgroundDrawList_2(viewport: ImGuiViewport)->ImDrawList: ...
def GetForegroundDrawList_2(viewport: ImGuiViewport)->ImDrawList: ...
def IsRectVisible(size: Union[ImVec2, Tuple[float, float], None])->bool: ...
def IsRectVisible_2(rect_min: Union[ImVec2, Tuple[float, float], None], rect_max: Union[ImVec2, Tuple[float, float], None])->bool: ...
def GetTime()->float: ...
def GetFrameCount()->int: ...
def GetDrawListSharedData()->ctypes.c_void_p: ...
def GetStyleColorName(idx: int)->str: ...
def BeginChildFrame(_id: int, size: Union[ImVec2, Tuple[float, float], None], flags: int=0)->bool: ...
def EndChildFrame()->None: ...
def CalcTextSize(text: Union[str, bytes, None], text_end: Union[str, bytes, None]=None, hide_text_after_double_hash: bool=False, wrap_width: float=-1.0)->ImVec2: ...
def ColorConvertU32ToFloat4(_in: int)->ImVec4: ...
def ColorConvertFloat4ToU32(_in: ImVec4)->int: ...
def ColorConvertRGBtoHSV(r: float, g: float, b: float, out_h: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_s: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def ColorConvertHSVtoRGB(h: float, s: float, v: float, out_r: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_g: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_b: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def IsKeyDown(key: int)->bool: ...
def IsKeyPressed(key: int, repeat: bool=True)->bool: ...
def IsKeyReleased(key: int)->bool: ...
def GetKeyPressedAmount(key: int, repeat_delay: float, rate: float)->int: ...
def GetKeyName(key: int)->str: ...
def CaptureKeyboardFromApp(want_capture_keyboard_value: bool=True)->None: ...
def IsMouseDown(button: int)->bool: ...
def IsMouseClicked(button: int, repeat: bool=False)->bool: ...
def IsMouseReleased(button: int)->bool: ...
def IsMouseDoubleClicked(button: int)->bool: ...
def GetMouseClickedCount(button: int)->int: ...
def IsMouseHoveringRect(r_min: Union[ImVec2, Tuple[float, float], None], r_max: Union[ImVec2, Tuple[float, float], None], clip: bool=True)->bool: ...
def IsMousePosValid(mouse_pos: ImVec2=None)->bool: ...
def IsAnyMouseDown()->bool: ...
def GetMousePos()->ImVec2: ...
def GetMousePosOnOpeningCurrentPopup()->ImVec2: ...
def IsMouseDragging(button: int, lock_threshold: float=-1.0)->bool: ...
def GetMouseDragDelta(button: int=0, lock_threshold: float=-1.0)->ImVec2: ...
def ResetMouseDragDelta(button: int=0)->None: ...
def GetMouseCursor()->int: ...
def SetMouseCursor(cursor_type: int)->None: ...
def CaptureMouseFromApp(want_capture_mouse_value: bool=True)->None: ...
def GetClipboardText()->str: ...
def SetClipboardText(text: Union[str, bytes, None])->None: ...
def LoadIniSettingsFromDisk(ini_filename: Union[str, bytes, None])->None: ...
def LoadIniSettingsFromMemory(ini_data: Union[str, bytes, None], ini_size: int=0)->None: ...
def SaveIniSettingsToDisk(ini_filename: Union[str, bytes, None])->None: ...
def SaveIniSettingsToMemory(out_ini_size: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->str: ...
def DebugCheckVersionAndDataLayout(version_str: Union[str, bytes, None], sz_io: int, sz_style: int, sz_vec2: int, sz_vec4: int, sz_drawvert: int, sz_drawidx: int)->bool: ...
def MemAlloc(size: int)->ctypes.c_void_p: ...
def MemFree(ptr: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def GetPlatformIO()->ctypes.c_void_p: ...
def UpdatePlatformWindows()->None: ...
def RenderPlatformWindowsDefault(platform_render_arg: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, renderer_render_arg: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->None: ...
def DestroyPlatformWindows()->None: ...
def FindViewportByID(_id: int)->ImGuiViewport: ...
def FindViewportByPlatformHandle(platform_handle: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->ImGuiViewport: ...
def GetKeyIndex(key: int)->int: ...
def CalcListClipping(items_count: int, items_height: float, out_items_display_start: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], out_items_display_end: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def GetWindowContentRegionWidth()->float: ...
def ListBoxHeader(label: Union[str, bytes, None], items_count: int, height_in_items: int=-1)->bool: ...
def ListBoxHeader_2(label: Union[str, bytes, None], size: Union[ImVec2, Tuple[float, float], None]=ImVec2(0,0))->bool: ...
def ListBoxFooter()->None: ...
def OpenPopupContextItem(str_id: Union[str, bytes, None]=None, mb: int=1)->None: ...
def DragScalar_2(label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_speed: float, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None], power: float)->bool: ...
def DragScalarN_2(label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], components: int, v_speed: float, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None], power: float)->bool: ...
def DragFloat_2(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_speed: float, v_min: float, v_max: float, format: Union[str, bytes, None], power: float)->bool: ...
def DragFloat2_2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_speed: float, v_min: float, v_max: float, format: Union[str, bytes, None], power: float)->bool: ...
def DragFloat3_2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_speed: float, v_min: float, v_max: float, format: Union[str, bytes, None], power: float)->bool: ...
def DragFloat4_2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_speed: float, v_min: float, v_max: float, format: Union[str, bytes, None], power: float)->bool: ...
def SliderScalar_2(label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None], power: float)->bool: ...
def SliderScalarN_2(label: Union[str, bytes, None], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], components: int, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], format: Union[str, bytes, None], power: float)->bool: ...
def SliderFloat_2(label: Union[str, bytes, None], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], v_min: float, v_max: float, format: Union[str, bytes, None], power: float)->bool: ...
def SliderFloat2_2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_min: float, v_max: float, format: Union[str, bytes, None], power: float)->bool: ...
def SliderFloat3_2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_min: float, v_max: float, format: Union[str, bytes, None], power: float)->bool: ...
def SliderFloat4_2(label: Union[str, bytes, None], v: Union[ctypes.Array, ctypes.c_void_p, None], v_min: float, v_max: float, format: Union[str, bytes, None], power: float)->bool: ...
def BeginPopupContextWindow_2(str_id: Union[str, bytes, None], mb: int, over_items: bool)->bool: ...
from enum import IntEnum

class ImGuiWindowFlags_(IntEnum):
    NONE = 0x0
    NoTitleBar = 0x1
    NoResize = 0x2
    NoMove = 0x4
    NoScrollbar = 0x8
    NoScrollWithMouse = 0x10
    NoCollapse = 0x20
    AlwaysAutoResize = 0x40
    NoBackground = 0x80
    NoSavedSettings = 0x100
    NoMouseInputs = 0x200
    MenuBar = 0x400
    HorizontalScrollbar = 0x800
    NoFocusOnAppearing = 0x1000
    NoBringToFrontOnFocus = 0x2000
    AlwaysVerticalScrollbar = 0x4000
    AlwaysHorizontalScrollbar = 0x8000
    AlwaysUseWindowPadding = 0x10000
    NoNavInputs = 0x40000
    NoNavFocus = 0x80000
    UnsavedDocument = 0x100000
    NoDocking = 0x200000
    NoNav = 0xc0000
    NoDecoration = 0x2b
    NoInputs = 0xc0200
    NavFlattened = 0x800000
    ChildWindow = 0x1000000
    Tooltip = 0x2000000
    Popup = 0x4000000
    Modal = 0x8000000
    ChildMenu = 0x10000000
    DockNodeHost = 0x20000000

class ImGuiInputTextFlags_(IntEnum):
    NONE = 0x0
    CharsDecimal = 0x1
    CharsHexadecimal = 0x2
    CharsUppercase = 0x4
    CharsNoBlank = 0x8
    AutoSelectAll = 0x10
    EnterReturnsTrue = 0x20
    CallbackCompletion = 0x40
    CallbackHistory = 0x80
    CallbackAlways = 0x100
    CallbackCharFilter = 0x200
    AllowTabInput = 0x400
    CtrlEnterForNewLine = 0x800
    NoHorizontalScroll = 0x1000
    AlwaysOverwrite = 0x2000
    ReadOnly = 0x4000
    Password = 0x8000
    NoUndoRedo = 0x10000
    CharsScientific = 0x20000
    CallbackResize = 0x40000
    CallbackEdit = 0x80000
    AlwaysInsertMode = 0x2000

class ImGuiTreeNodeFlags_(IntEnum):
    NONE = 0x0
    Selected = 0x1
    Framed = 0x2
    AllowItemOverlap = 0x4
    NoTreePushOnOpen = 0x8
    NoAutoOpenOnLog = 0x10
    DefaultOpen = 0x20
    OpenOnDoubleClick = 0x40
    OpenOnArrow = 0x80
    Leaf = 0x100
    Bullet = 0x200
    FramePadding = 0x400
    SpanAvailWidth = 0x800
    SpanFullWidth = 0x1000
    NavLeftJumpsBackHere = 0x2000
    CollapsingHeader = 0x1a

class ImGuiPopupFlags_(IntEnum):
    NONE = 0x0
    MouseButtonLeft = 0x0
    MouseButtonRight = 0x1
    MouseButtonMiddle = 0x2
    MouseButtonMask_ = 0x1f
    MouseButtonDefault_ = 0x1
    NoOpenOverExistingPopup = 0x20
    NoOpenOverItems = 0x40
    AnyPopupId = 0x80
    AnyPopupLevel = 0x100
    AnyPopup = 0x180

class ImGuiSelectableFlags_(IntEnum):
    NONE = 0x0
    DontClosePopups = 0x1
    SpanAllColumns = 0x2
    AllowDoubleClick = 0x4
    Disabled = 0x8
    AllowItemOverlap = 0x10

class ImGuiComboFlags_(IntEnum):
    NONE = 0x0
    PopupAlignLeft = 0x1
    HeightSmall = 0x2
    HeightRegular = 0x4
    HeightLarge = 0x8
    HeightLargest = 0x10
    NoArrowButton = 0x20
    NoPreview = 0x40
    HeightMask_ = 0x1e

class ImGuiTabBarFlags_(IntEnum):
    NONE = 0x0
    Reorderable = 0x1
    AutoSelectNewTabs = 0x2
    TabListPopupButton = 0x4
    NoCloseWithMiddleMouseButton = 0x8
    NoTabListScrollingButtons = 0x10
    NoTooltip = 0x20
    FittingPolicyResizeDown = 0x40
    FittingPolicyScroll = 0x80
    FittingPolicyMask_ = 0xc0
    FittingPolicyDefault_ = 0x40

class ImGuiTabItemFlags_(IntEnum):
    NONE = 0x0
    UnsavedDocument = 0x1
    SetSelected = 0x2
    NoCloseWithMiddleMouseButton = 0x4
    NoPushId = 0x8
    NoTooltip = 0x10
    NoReorder = 0x20
    Leading = 0x40
    Trailing = 0x80

class ImGuiTableFlags_(IntEnum):
    NONE = 0x0
    Resizable = 0x1
    Reorderable = 0x2
    Hideable = 0x4
    Sortable = 0x8
    NoSavedSettings = 0x10
    ContextMenuInBody = 0x20
    RowBg = 0x40
    BordersInnerH = 0x80
    BordersOuterH = 0x100
    BordersInnerV = 0x200
    BordersOuterV = 0x400
    BordersH = 0x180
    BordersV = 0x600
    BordersInner = 0x280
    BordersOuter = 0x500
    Borders = 0x780
    NoBordersInBody = 0x800
    NoBordersInBodyUntilResize = 0x1000
    SizingFixedFit = 0x2000
    SizingFixedSame = 0x4000
    SizingStretchProp = 0x6000
    SizingStretchSame = 0x8000
    NoHostExtendX = 0x10000
    NoHostExtendY = 0x20000
    NoKeepColumnsVisible = 0x40000
    PreciseWidths = 0x80000
    NoClip = 0x100000
    PadOuterX = 0x200000
    NoPadOuterX = 0x400000
    NoPadInnerX = 0x800000
    ScrollX = 0x1000000
    ScrollY = 0x2000000
    SortMulti = 0x4000000
    SortTristate = 0x8000000
    SizingMask_ = 0xe000

class ImGuiTableColumnFlags_(IntEnum):
    NONE = 0x0
    Disabled = 0x1
    DefaultHide = 0x2
    DefaultSort = 0x4
    WidthStretch = 0x8
    WidthFixed = 0x10
    NoResize = 0x20
    NoReorder = 0x40
    NoHide = 0x80
    NoClip = 0x100
    NoSort = 0x200
    NoSortAscending = 0x400
    NoSortDescending = 0x800
    NoHeaderLabel = 0x1000
    NoHeaderWidth = 0x2000
    PreferSortAscending = 0x4000
    PreferSortDescending = 0x8000
    IndentEnable = 0x10000
    IndentDisable = 0x20000
    IsEnabled = 0x1000000
    IsVisible = 0x2000000
    IsSorted = 0x4000000
    IsHovered = 0x8000000
    WidthMask_ = 0x18
    IndentMask_ = 0x30000
    StatusMask_ = 0xf000000
    NoDirectResize_ = 0x40000000

class ImGuiTableRowFlags_(IntEnum):
    NONE = 0x0
    Headers = 0x1

class ImGuiTableBgTarget_(IntEnum):
    NONE = 0x0
    RowBg0 = 0x1
    RowBg1 = 0x2
    CellBg = 0x3

class ImGuiFocusedFlags_(IntEnum):
    NONE = 0x0
    ChildWindows = 0x1
    RootWindow = 0x2
    AnyWindow = 0x4
    NoPopupHierarchy = 0x8
    DockHierarchy = 0x10
    RootAndChildWindows = 0x3

class ImGuiHoveredFlags_(IntEnum):
    NONE = 0x0
    ChildWindows = 0x1
    RootWindow = 0x2
    AnyWindow = 0x4
    NoPopupHierarchy = 0x8
    DockHierarchy = 0x10
    AllowWhenBlockedByPopup = 0x20
    AllowWhenBlockedByActiveItem = 0x80
    AllowWhenOverlapped = 0x100
    AllowWhenDisabled = 0x200
    NoNavOverride = 0x400
    RectOnly = 0x1a0
    RootAndChildWindows = 0x3

class ImGuiDockNodeFlags_(IntEnum):
    NONE = 0x0
    KeepAliveOnly = 0x1
    NoDockingInCentralNode = 0x4
    PassthruCentralNode = 0x8
    NoSplit = 0x10
    NoResize = 0x20
    AutoHideTabBar = 0x40

class ImGuiDragDropFlags_(IntEnum):
    NONE = 0x0
    SourceNoPreviewTooltip = 0x1
    SourceNoDisableHover = 0x2
    SourceNoHoldToOpenOthers = 0x4
    SourceAllowNullID = 0x8
    SourceExtern = 0x10
    SourceAutoExpirePayload = 0x20
    AcceptBeforeDelivery = 0x400
    AcceptNoDrawDefaultRect = 0x800
    AcceptNoPreviewTooltip = 0x1000
    AcceptPeekOnly = 0xc00

class ImGuiDataType_(IntEnum):
    S8 = 0x0
    U8 = 0x1
    S16 = 0x2
    U16 = 0x3
    S32 = 0x4
    U32 = 0x5
    S64 = 0x6
    U64 = 0x7
    Float = 0x8
    Double = 0x9
    COUNT = 0xa

class ImGuiDir_(IntEnum):
    NONE = -0x1
    Left = 0x0
    Right = 0x1
    Up = 0x2
    Down = 0x3
    COUNT = 0x4

class ImGuiSortDirection_(IntEnum):
    NONE = 0x0
    Ascending = 0x1
    Descending = 0x2

class ImGuiKey_(IntEnum):
    NONE = 0x0
    Tab = 0x200
    LeftArrow = 0x201
    RightArrow = 0x202
    UpArrow = 0x203
    DownArrow = 0x204
    PageUp = 0x205
    PageDown = 0x206
    Home = 0x207
    End = 0x208
    Insert = 0x209
    Delete = 0x20a
    Backspace = 0x20b
    Space = 0x20c
    Enter = 0x20d
    Escape = 0x20e
    LeftCtrl = 0x20f
    LeftShift = 0x210
    LeftAlt = 0x211
    LeftSuper = 0x212
    RightCtrl = 0x213
    RightShift = 0x214
    RightAlt = 0x215
    RightSuper = 0x216
    Menu = 0x217
    _0 = 0x218
    _1 = 0x219
    _2 = 0x21a
    _3 = 0x21b
    _4 = 0x21c
    _5 = 0x21d
    _6 = 0x21e
    _7 = 0x21f
    _8 = 0x220
    _9 = 0x221
    A = 0x222
    B = 0x223
    C = 0x224
    D = 0x225
    E = 0x226
    F = 0x227
    G = 0x228
    H = 0x229
    I = 0x22a
    J = 0x22b
    K = 0x22c
    L = 0x22d
    M = 0x22e
    N = 0x22f
    O = 0x230
    P = 0x231
    Q = 0x232
    R = 0x233
    S = 0x234
    T = 0x235
    U = 0x236
    V = 0x237
    W = 0x238
    X = 0x239
    Y = 0x23a
    Z = 0x23b
    F1 = 0x23c
    F2 = 0x23d
    F3 = 0x23e
    F4 = 0x23f
    F5 = 0x240
    F6 = 0x241
    F7 = 0x242
    F8 = 0x243
    F9 = 0x244
    F10 = 0x245
    F11 = 0x246
    F12 = 0x247
    Apostrophe = 0x248
    Comma = 0x249
    Minus = 0x24a
    Period = 0x24b
    Slash = 0x24c
    Semicolon = 0x24d
    Equal = 0x24e
    LeftBracket = 0x24f
    Backslash = 0x250
    RightBracket = 0x251
    GraveAccent = 0x252
    CapsLock = 0x253
    ScrollLock = 0x254
    NumLock = 0x255
    PrintScreen = 0x256
    Pause = 0x257
    Keypad0 = 0x258
    Keypad1 = 0x259
    Keypad2 = 0x25a
    Keypad3 = 0x25b
    Keypad4 = 0x25c
    Keypad5 = 0x25d
    Keypad6 = 0x25e
    Keypad7 = 0x25f
    Keypad8 = 0x260
    Keypad9 = 0x261
    KeypadDecimal = 0x262
    KeypadDivide = 0x263
    KeypadMultiply = 0x264
    KeypadSubtract = 0x265
    KeypadAdd = 0x266
    KeypadEnter = 0x267
    KeypadEqual = 0x268
    GamepadStart = 0x269
    GamepadBack = 0x26a
    GamepadFaceUp = 0x26b
    GamepadFaceDown = 0x26c
    GamepadFaceLeft = 0x26d
    GamepadFaceRight = 0x26e
    GamepadDpadUp = 0x26f
    GamepadDpadDown = 0x270
    GamepadDpadLeft = 0x271
    GamepadDpadRight = 0x272
    GamepadL1 = 0x273
    GamepadR1 = 0x274
    GamepadL2 = 0x275
    GamepadR2 = 0x276
    GamepadL3 = 0x277
    GamepadR3 = 0x278
    GamepadLStickUp = 0x279
    GamepadLStickDown = 0x27a
    GamepadLStickLeft = 0x27b
    GamepadLStickRight = 0x27c
    GamepadRStickUp = 0x27d
    GamepadRStickDown = 0x27e
    GamepadRStickLeft = 0x27f
    GamepadRStickRight = 0x280
    ModCtrl = 0x281
    ModShift = 0x282
    ModAlt = 0x283
    ModSuper = 0x284
    COUNT = 0x285
    NamedKey_BEGIN = 0x200
    NamedKey_END = 0x285
    NamedKey_COUNT = 0x85
    KeysData_SIZE = 0x285
    KeysData_OFFSET = 0x0
    KeyPadEnter = 0x267

class ImGuiModFlags_(IntEnum):
    NONE = 0x0
    Ctrl = 0x1
    Shift = 0x2
    Alt = 0x4
    Super = 0x8

class ImGuiNavInput_(IntEnum):
    Activate = 0x0
    Cancel = 0x1
    Input = 0x2
    Menu = 0x3
    DpadLeft = 0x4
    DpadRight = 0x5
    DpadUp = 0x6
    DpadDown = 0x7
    LStickLeft = 0x8
    LStickRight = 0x9
    LStickUp = 0xa
    LStickDown = 0xb
    FocusPrev = 0xc
    FocusNext = 0xd
    TweakSlow = 0xe
    TweakFast = 0xf
    KeyLeft_ = 0x10
    KeyRight_ = 0x11
    KeyUp_ = 0x12
    KeyDown_ = 0x13
    COUNT = 0x14

class ImGuiConfigFlags_(IntEnum):
    NONE = 0x0
    NavEnableKeyboard = 0x1
    NavEnableGamepad = 0x2
    NavEnableSetMousePos = 0x4
    NavNoCaptureKeyboard = 0x8
    NoMouse = 0x10
    NoMouseCursorChange = 0x20
    DockingEnable = 0x40
    ViewportsEnable = 0x400
    DpiEnableScaleViewports = 0x4000
    DpiEnableScaleFonts = 0x8000
    IsSRGB = 0x100000
    IsTouchScreen = 0x200000

class ImGuiBackendFlags_(IntEnum):
    NONE = 0x0
    HasGamepad = 0x1
    HasMouseCursors = 0x2
    HasSetMousePos = 0x4
    RendererHasVtxOffset = 0x8
    PlatformHasViewports = 0x400
    HasMouseHoveredViewport = 0x800
    RendererHasViewports = 0x1000

class ImGuiCol_(IntEnum):
    Text = 0x0
    TextDisabled = 0x1
    WindowBg = 0x2
    ChildBg = 0x3
    PopupBg = 0x4
    Border = 0x5
    BorderShadow = 0x6
    FrameBg = 0x7
    FrameBgHovered = 0x8
    FrameBgActive = 0x9
    TitleBg = 0xa
    TitleBgActive = 0xb
    TitleBgCollapsed = 0xc
    MenuBarBg = 0xd
    ScrollbarBg = 0xe
    ScrollbarGrab = 0xf
    ScrollbarGrabHovered = 0x10
    ScrollbarGrabActive = 0x11
    CheckMark = 0x12
    SliderGrab = 0x13
    SliderGrabActive = 0x14
    Button = 0x15
    ButtonHovered = 0x16
    ButtonActive = 0x17
    Header = 0x18
    HeaderHovered = 0x19
    HeaderActive = 0x1a
    Separator = 0x1b
    SeparatorHovered = 0x1c
    SeparatorActive = 0x1d
    ResizeGrip = 0x1e
    ResizeGripHovered = 0x1f
    ResizeGripActive = 0x20
    Tab = 0x21
    TabHovered = 0x22
    TabActive = 0x23
    TabUnfocused = 0x24
    TabUnfocusedActive = 0x25
    DockingPreview = 0x26
    DockingEmptyBg = 0x27
    PlotLines = 0x28
    PlotLinesHovered = 0x29
    PlotHistogram = 0x2a
    PlotHistogramHovered = 0x2b
    TableHeaderBg = 0x2c
    TableBorderStrong = 0x2d
    TableBorderLight = 0x2e
    TableRowBg = 0x2f
    TableRowBgAlt = 0x30
    TextSelectedBg = 0x31
    DragDropTarget = 0x32
    NavHighlight = 0x33
    NavWindowingHighlight = 0x34
    NavWindowingDimBg = 0x35
    ModalWindowDimBg = 0x36
    COUNT = 0x37

class ImGuiStyleVar_(IntEnum):
    Alpha = 0x0
    DisabledAlpha = 0x1
    WindowPadding = 0x2
    WindowRounding = 0x3
    WindowBorderSize = 0x4
    WindowMinSize = 0x5
    WindowTitleAlign = 0x6
    ChildRounding = 0x7
    ChildBorderSize = 0x8
    PopupRounding = 0x9
    PopupBorderSize = 0xa
    FramePadding = 0xb
    FrameRounding = 0xc
    FrameBorderSize = 0xd
    ItemSpacing = 0xe
    ItemInnerSpacing = 0xf
    IndentSpacing = 0x10
    CellPadding = 0x11
    ScrollbarSize = 0x12
    ScrollbarRounding = 0x13
    GrabMinSize = 0x14
    GrabRounding = 0x15
    TabRounding = 0x16
    ButtonTextAlign = 0x17
    SelectableTextAlign = 0x18
    COUNT = 0x19

class ImGuiButtonFlags_(IntEnum):
    NONE = 0x0
    MouseButtonLeft = 0x1
    MouseButtonRight = 0x2
    MouseButtonMiddle = 0x4
    MouseButtonMask_ = 0x7
    MouseButtonDefault_ = 0x1

class ImGuiColorEditFlags_(IntEnum):
    NONE = 0x0
    NoAlpha = 0x2
    NoPicker = 0x4
    NoOptions = 0x8
    NoSmallPreview = 0x10
    NoInputs = 0x20
    NoTooltip = 0x40
    NoLabel = 0x80
    NoSidePreview = 0x100
    NoDragDrop = 0x200
    NoBorder = 0x400
    AlphaBar = 0x10000
    AlphaPreview = 0x20000
    AlphaPreviewHalf = 0x40000
    HDR = 0x80000
    DisplayRGB = 0x100000
    DisplayHSV = 0x200000
    DisplayHex = 0x400000
    Uint8 = 0x800000
    Float = 0x1000000
    PickerHueBar = 0x2000000
    PickerHueWheel = 0x4000000
    InputRGB = 0x8000000
    InputHSV = 0x10000000
    DefaultOptions_ = 0xa900000
    DisplayMask_ = 0x700000
    DataTypeMask_ = 0x1800000
    PickerMask_ = 0x6000000
    InputMask_ = 0x18000000

class ImGuiSliderFlags_(IntEnum):
    NONE = 0x0
    AlwaysClamp = 0x10
    Logarithmic = 0x20
    NoRoundToFormat = 0x40
    NoInput = 0x80
    InvalidMask_ = 0x7000000f
    ClampOnInput = 0x10

class ImGuiMouseButton_(IntEnum):
    Left = 0x0
    Right = 0x1
    Middle = 0x2
    COUNT = 0x5

class ImGuiMouseCursor_(IntEnum):
    NONE = -0x1
    Arrow = 0x0
    TextInput = 0x1
    ResizeAll = 0x2
    ResizeNS = 0x3
    ResizeEW = 0x4
    ResizeNESW = 0x5
    ResizeNWSE = 0x6
    Hand = 0x7
    NotAllowed = 0x8
    COUNT = 0x9

class ImGuiCond_(IntEnum):
    NONE = 0x0
    Always = 0x1
    Once = 0x2
    FirstUseEver = 0x4
    Appearing = 0x8

class ImDrawFlags_(IntEnum):
    NONE = 0x0
    Closed = 0x1
    RoundCornersTopLeft = 0x10
    RoundCornersTopRight = 0x20
    RoundCornersBottomLeft = 0x40
    RoundCornersBottomRight = 0x80
    RoundCornersNone = 0x100
    RoundCornersTop = 0x30
    RoundCornersBottom = 0xc0
    RoundCornersLeft = 0x50
    RoundCornersRight = 0xa0
    RoundCornersAll = 0xf0
    RoundCornersDefault_ = 0xf0
    RoundCornersMask_ = 0x1f0

class ImDrawListFlags_(IntEnum):
    NONE = 0x0
    AntiAliasedLines = 0x1
    AntiAliasedLinesUseTex = 0x2
    AntiAliasedFill = 0x4
    AllowVtxOffset = 0x8

class ImFontAtlasFlags_(IntEnum):
    NONE = 0x0
    NoPowerOfTwoHeight = 0x1
    NoMouseCursors = 0x2
    NoBakedLines = 0x4

class ImGuiViewportFlags_(IntEnum):
    NONE = 0x0
    IsPlatformWindow = 0x1
    IsPlatformMonitor = 0x2
    OwnedByApp = 0x4
    NoDecoration = 0x8
    NoTaskBarIcon = 0x10
    NoFocusOnAppearing = 0x20
    NoFocusOnClick = 0x40
    NoInputs = 0x80
    NoRendererClear = 0x100
    TopMost = 0x200
    Minimized = 0x400
    NoAutoMerge = 0x800
    CanHostOtherWindows = 0x1000

class ImDrawCornerFlags_(IntEnum):
    NONE = 0x100
    TopLeft = 0x10
    TopRight = 0x20
    BotLeft = 0x40
    BotRight = 0x80
    All = 0xf0
    Top = 0x30
    Bot = 0xc0
    Left = 0x50
    Right = 0xa0

class ImGuiKeyModFlags_(IntEnum):
    NONE = 0x0
    Ctrl = 0x1
    Shift = 0x2
    Alt = 0x4
    Super = 0x8

