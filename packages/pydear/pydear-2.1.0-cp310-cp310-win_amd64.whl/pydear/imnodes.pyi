from typing import Type, Tuple, Union, Any, Iterable
import ctypes
from enum import IntEnum
def SetImGuiContext(ctx: ImGuiContext)->None: ...
def CreateContext()->ctypes.c_void_p: ...
def DestroyContext(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->None: ...
def GetCurrentContext()->ctypes.c_void_p: ...
def SetCurrentContext(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def EditorContextCreate()->ctypes.c_void_p: ...
def EditorContextFree(_2592888943: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def EditorContextSet(_3231982692: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def EditorContextGetPanning()->ImVec2: ...
def EditorContextResetPanning(pos: Union[ImVec2, Tuple[float, float], None])->None: ...
def EditorContextMoveToNode(node_id: int)->None: ...
def GetIO()->ctypes.c_void_p: ...
def GetStyle()->ctypes.c_void_p: ...
def StyleColorsDark()->None: ...
def StyleColorsClassic()->None: ...
def StyleColorsLight()->None: ...
def BeginNodeEditor()->None: ...
def EndNodeEditor()->None: ...
def PushColorStyle(item: int, color: int)->None: ...
def PopColorStyle()->None: ...
def PushStyleVar(style_item: int, value: float)->None: ...
def PushStyleVar_2(style_item: int, value: Union[ImVec2, Tuple[float, float], None])->None: ...
def PopStyleVar(count: int=1)->None: ...
def BeginNode(_id: int)->None: ...
def EndNode()->None: ...
def GetNodeDimensions(_id: int)->ImVec2: ...
def BeginNodeTitleBar()->None: ...
def EndNodeTitleBar()->None: ...
def BeginInputAttribute(_id: int, shape: int=ImNodesPinShape_CircleFilled)->None: ...
def EndInputAttribute()->None: ...
def BeginOutputAttribute(_id: int, shape: int=ImNodesPinShape_CircleFilled)->None: ...
def EndOutputAttribute()->None: ...
def BeginStaticAttribute(_id: int)->None: ...
def EndStaticAttribute()->None: ...
def PushAttributeFlag(flag: int)->None: ...
def PopAttributeFlag()->None: ...
def Link(_id: int, start_attribute_id: int, end_attribute_id: int)->None: ...
def SetNodeDraggable(node_id: int, draggable: bool)->None: ...
def SetNodeScreenSpacePos(node_id: int, screen_space_pos: Union[ImVec2, Tuple[float, float], None])->None: ...
def SetNodeEditorSpacePos(node_id: int, editor_space_pos: Union[ImVec2, Tuple[float, float], None])->None: ...
def SetNodeGridSpacePos(node_id: int, grid_pos: Union[ImVec2, Tuple[float, float], None])->None: ...
def GetNodeScreenSpacePos(node_id: int)->ImVec2: ...
def GetNodeEditorSpacePos(node_id: int)->ImVec2: ...
def GetNodeGridSpacePos(node_id: int)->ImVec2: ...
def SnapNodeToGrid(node_id: int)->None: ...
def IsEditorHovered()->bool: ...
def IsNodeHovered(node_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def IsLinkHovered(link_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def IsPinHovered(attribute_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def NumSelectedNodes()->int: ...
def NumSelectedLinks()->int: ...
def GetSelectedNodes(node_ids: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def GetSelectedLinks(link_ids: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def ClearNodeSelection()->None: ...
def ClearLinkSelection()->None: ...
def SelectNode(node_id: int)->None: ...
def ClearNodeSelection_2(node_id: int)->None: ...
def IsNodeSelected(node_id: int)->bool: ...
def SelectLink(link_id: int)->None: ...
def ClearLinkSelection_2(link_id: int)->None: ...
def IsLinkSelected(link_id: int)->bool: ...
def IsAttributeActive()->bool: ...
def IsAnyAttributeActive(attribute_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->bool: ...
def IsLinkStarted(started_at_attribute_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def IsLinkDropped(started_at_attribute_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None, including_detached_links: bool=True)->bool: ...
def IsLinkCreated(started_at_attribute_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], ended_at_attribute_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], created_from_snap: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->bool: ...
def IsLinkCreated_2(started_at_node_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], started_at_attribute_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], ended_at_node_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], ended_at_attribute_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], created_from_snap: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->bool: ...
def IsLinkDestroyed(link_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->bool: ...
def SaveCurrentEditorStateToIniString(data_size: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->str: ...
def SaveEditorStateToIniString(editor: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], data_size: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None]=None)->str: ...
def LoadCurrentEditorStateFromIniString(data: Union[str, bytes, None], data_size: int)->None: ...
def LoadEditorStateFromIniString(editor: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], data: Union[str, bytes, None], data_size: int)->None: ...
def SaveCurrentEditorStateToIniFile(file_name: Union[str, bytes, None])->None: ...
def SaveEditorStateToIniFile(editor: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], file_name: Union[str, bytes, None])->None: ...
def LoadCurrentEditorStateFromIniFile(file_name: Union[str, bytes, None])->None: ...
def LoadEditorStateFromIniFile(editor: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], file_name: Union[str, bytes, None])->None: ...
from enum import IntEnum

class ImNodesCol_(IntEnum):
    NodeBackground = 0x0
    NodeBackgroundHovered = 0x1
    NodeBackgroundSelected = 0x2
    NodeOutline = 0x3
    TitleBar = 0x4
    TitleBarHovered = 0x5
    TitleBarSelected = 0x6
    Link = 0x7
    LinkHovered = 0x8
    LinkSelected = 0x9
    Pin = 0xa
    PinHovered = 0xb
    BoxSelector = 0xc
    BoxSelectorOutline = 0xd
    GridBackground = 0xe
    GridLine = 0xf
    GridLinePrimary = 0x10
    MiniMapBackground = 0x11
    MiniMapBackgroundHovered = 0x12
    MiniMapOutline = 0x13
    MiniMapOutlineHovered = 0x14
    MiniMapNodeBackground = 0x15
    MiniMapNodeBackgroundHovered = 0x16
    MiniMapNodeBackgroundSelected = 0x17
    MiniMapNodeOutline = 0x18
    MiniMapLink = 0x19
    MiniMapLinkSelected = 0x1a
    MiniMapCanvas = 0x1b
    MiniMapCanvasOutline = 0x1c
    COUNT = 0x1d

class ImNodesStyleVar_(IntEnum):
    GridSpacing = 0x0
    NodeCornerRounding = 0x1
    NodePadding = 0x2
    NodeBorderThickness = 0x3
    LinkThickness = 0x4
    LinkLineSegmentsPerLength = 0x5
    LinkHoverDistance = 0x6
    PinCircleRadius = 0x7
    PinQuadSideLength = 0x8
    PinTriangleSideLength = 0x9
    PinLineThickness = 0xa
    PinHoverRadius = 0xb
    PinOffset = 0xc
    MiniMapPadding = 0xd
    MiniMapOffset = 0xe
    COUNT = 0xf

class ImNodesStyleFlags_(IntEnum):
    NONE = 0x0
    NodeOutline = 0x1
    GridLines = 0x4
    GridLinesPrimary = 0x8
    GridSnapping = 0x10

class ImNodesPinShape_(IntEnum):
    Circle = 0x0
    CircleFilled = 0x1
    Triangle = 0x2
    TriangleFilled = 0x3
    Quad = 0x4
    QuadFilled = 0x5

class ImNodesAttributeFlags_(IntEnum):
    NONE = 0x0
    EnableLinkDetachWithDragClick = 0x1
    EnableLinkCreationOnSnap = 0x2

class ImNodesMiniMapLocation_(IntEnum):
    BottomLeft = 0x0
    BottomRight = 0x1
    TopLeft = 0x2
    TopRight = 0x3

