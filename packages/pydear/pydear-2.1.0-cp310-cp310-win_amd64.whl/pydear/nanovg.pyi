from typing import Type, Tuple, Union, Any, Iterable
import ctypes
from enum import IntEnum
class NVGcolor(ctypes.Structure):
    _2528434172: _2528434172 # StructType: 

class NVGpaint(ctypes.Structure):
    xform: ctypes.Array # ArrayType: float[6]
    extent: ctypes.Array # ArrayType: float[2]
    radius: float # FloatType: float
    feather: float # FloatType: float
    innerColor: NVGcolor # StructType: NVGcolor
    outerColor: NVGcolor # StructType: NVGcolor
    image: int # Int32Type: int

class NVGtextRow(ctypes.Structure):
    start: str # CStringType: const char *
    end: str # CStringType: const char *
    next: str # CStringType: const char *
    width: float # FloatType: float
    minx: float # FloatType: float
    maxx: float # FloatType: float

class NVGglyphPosition(ctypes.Structure):
    str: str # CStringType: const char *
    x: float # FloatType: float
    minx: float # FloatType: float
    maxx: float # FloatType: float

class NVGdrawData(ctypes.Structure):
    view: ctypes.Array # ArrayType: float[2]
    drawData: GLNVGcall # PointerToStructType: GLNVGcall*
    drawCount: int # SizeType: size_t
    pUniform: ctypes.c_void_p # PointerType: void*
    uniformByteSize: int # Int32Type: int
    pVertex: NVGvertex # PointerToStructType: NVGvertex*
    vertexCount: int # Int32Type: int
    pPath: GLNVGpath # PointerToStructType: GLNVGpath*

class NVGparams(ctypes.Structure):
    userPtr: ctypes.c_void_p # PointerType: void*
    edgeAntiAlias: int # Int32Type: int
    renderCreateTexture: ctypes.c_void_p # PointerType: void**
    renderDeleteTexture: ctypes.c_void_p # PointerType: void**
    renderUpdateTexture: ctypes.c_void_p # PointerType: void**
    renderGetTexture: ctypes.c_void_p # PointerType: void**
    renderUniformSize: ctypes.c_void_p # PointerType: void**
    _flags: int # Int32Type: int
    _draw: ctypes.c_void_p # PointerType: class NVGDrawImpl*

class NVGvertex(ctypes.Structure):
    x: float # FloatType: float
    y: float # FloatType: float
    u: float # FloatType: float
    v: float # FloatType: float

class NVGtextureInfo(ctypes.Structure):
    _id: int # Int32Type: int
    _handle: int # UInt32Type: unsigned int
    _width: int # Int32Type: int
    _height: int # Int32Type: int
    _type: int # Int32Type: int
    _flags: int # Int32Type: int

class NVGcompositeOperationState(ctypes.Structure):
    srcRGB: int # EnumType: NVGblendFactor
    dstRGB: int # EnumType: NVGblendFactor
    srcAlpha: int # EnumType: NVGblendFactor
    dstAlpha: int # EnumType: NVGblendFactor

class GLNVGpath(ctypes.Structure):
    fillOffset: int # Int32Type: int
    fillCount: int # Int32Type: int
    strokeOffset: int # Int32Type: int
    strokeCount: int # Int32Type: int

class GLNVGcall(ctypes.Structure):
    type: int # Int32Type: int
    image: int # Int32Type: int
    pathOffset: int # Int32Type: int
    pathCount: int # Int32Type: int
    triangleOffset: int # Int32Type: int
    triangleCount: int # Int32Type: int
    uniformOffset: int # Int32Type: int
    blendFunc: NVGcompositeOperationState # StructType: NVGcompositeOperationState

class GLNVGfragUniforms(ctypes.Structure):
    scissorMat: ctypes.Array # ArrayType: float[12]
    paintMat: ctypes.Array # ArrayType: float[12]
    innerCol: NVGcolor # StructType: NVGcolor
    outerCol: NVGcolor # StructType: NVGcolor
    scissorExt: ctypes.Array # ArrayType: float[2]
    scissorScale: ctypes.Array # ArrayType: float[2]
    extent: ctypes.Array # ArrayType: float[2]
    radius: float # FloatType: float
    feather: float # FloatType: float
    strokeMult: float # FloatType: float
    strokeThr: float # FloatType: float
    texType: int # Int32Type: int
    type: int # Int32Type: int

def nvgBeginFrame(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], windowWidth: float, windowHeight: float, devicePixelRatio: float)->None: ...
def nvgCancelFrame(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgGlobalCompositeOperation(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], op: int)->None: ...
def nvgGlobalCompositeBlendFunc(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], sfactor: int, dfactor: int)->None: ...
def nvgGlobalCompositeBlendFuncSeparate(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int)->None: ...
def nvgRGB(r: int, g: int, b: int)->NVGcolor: ...
def nvgRGBf(r: float, g: float, b: float)->NVGcolor: ...
def nvgRGBA(r: int, g: int, b: int, a: int)->NVGcolor: ...
def nvgRGBAf(r: float, g: float, b: float, a: float)->NVGcolor: ...
def nvgLerpRGBA(c0: NVGcolor, c1: NVGcolor, u: float)->NVGcolor: ...
def nvgTransRGBA(c0: NVGcolor, a: int)->NVGcolor: ...
def nvgTransRGBAf(c0: NVGcolor, a: float)->NVGcolor: ...
def nvgHSL(h: float, s: float, l: float)->NVGcolor: ...
def nvgHSLA(h: float, s: float, l: float, a: int)->NVGcolor: ...
def nvgSave(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgRestore(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgReset(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgShapeAntiAlias(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], enabled: int)->None: ...
def nvgStrokeColor(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], color: NVGcolor)->None: ...
def nvgStrokePaint(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], paint: NVGpaint)->None: ...
def nvgFillColor(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], color: NVGcolor)->None: ...
def nvgFillPaint(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], paint: NVGpaint)->None: ...
def nvgMiterLimit(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], limit: float)->None: ...
def nvgStrokeWidth(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], size: float)->None: ...
def nvgLineCap(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], cap: int)->None: ...
def nvgLineJoin(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], join: int)->None: ...
def nvgGlobalAlpha(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], alpha: float)->None: ...
def nvgResetTransform(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgTransform(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], a: float, b: float, c: float, d: float, e: float, f: float)->None: ...
def nvgTranslate(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float)->None: ...
def nvgRotate(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], angle: float)->None: ...
def nvgSkewX(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], angle: float)->None: ...
def nvgSkewY(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], angle: float)->None: ...
def nvgScale(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float)->None: ...
def nvgCurrentTransform(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], xform: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgTransformIdentity(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgTransformTranslate(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], tx: float, ty: float)->None: ...
def nvgTransformScale(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], sx: float, sy: float)->None: ...
def nvgTransformRotate(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], a: float)->None: ...
def nvgTransformSkewX(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], a: float)->None: ...
def nvgTransformSkewY(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], a: float)->None: ...
def nvgTransformMultiply(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], src: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgTransformPremultiply(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], src: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgTransformInverse(dst: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], src: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def nvgTransformPoint(dstx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], dsty: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], xform: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], srcx: float, srcy: float)->None: ...
def nvgDegToRad(deg: float)->float: ...
def nvgRadToDeg(rad: float)->float: ...
def nvgCreateImage(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], filename: Union[str, bytes, None], imageFlags: int)->int: ...
def nvgCreateImageMem(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], imageFlags: int, data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], ndata: int)->int: ...
def nvgCreateImageRGBA(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], w: int, h: int, imageFlags: int, data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->int: ...
def nvgUpdateImage(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], image: int, data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgImageSize(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], image: int, w: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], h: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgDeleteImage(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], image: int)->None: ...
def nvgLinearGradient(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], sx: float, sy: float, ex: float, ey: float, icol: NVGcolor, ocol: NVGcolor)->NVGpaint: ...
def nvgBoxGradient(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, w: float, h: float, r: float, f: float, icol: NVGcolor, ocol: NVGcolor)->NVGpaint: ...
def nvgRadialGradient(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], cx: float, cy: float, inr: float, outr: float, icol: NVGcolor, ocol: NVGcolor)->NVGpaint: ...
def nvgImagePattern(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], ox: float, oy: float, ex: float, ey: float, angle: float, image: int, alpha: float)->NVGpaint: ...
def nvgScissor(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, w: float, h: float)->None: ...
def nvgIntersectScissor(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, w: float, h: float)->None: ...
def nvgResetScissor(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgBeginPath(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgMoveTo(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float)->None: ...
def nvgLineTo(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float)->None: ...
def nvgBezierTo(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], c1x: float, c1y: float, c2x: float, c2y: float, x: float, y: float)->None: ...
def nvgQuadTo(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], cx: float, cy: float, x: float, y: float)->None: ...
def nvgArcTo(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x1: float, y1: float, x2: float, y2: float, radius: float)->None: ...
def nvgClosePath(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgPathWinding(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], dir: int)->None: ...
def nvgArc(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], cx: float, cy: float, r: float, a0: float, a1: float, dir: int)->None: ...
def nvgRect(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, w: float, h: float)->None: ...
def nvgRoundedRect(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, w: float, h: float, r: float)->None: ...
def nvgRoundedRectVarying(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, w: float, h: float, radTopLeft: float, radTopRight: float, radBottomRight: float, radBottomLeft: float)->None: ...
def nvgEllipse(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], cx: float, cy: float, rx: float, ry: float)->None: ...
def nvgCircle(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], cx: float, cy: float, r: float)->None: ...
def nvgFill(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgStroke(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgCreateFont(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], name: Union[str, bytes, None], filename: Union[str, bytes, None])->int: ...
def nvgCreateFontAtIndex(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], name: Union[str, bytes, None], filename: Union[str, bytes, None], fontIndex: int)->int: ...
def nvgCreateFontMem(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], name: Union[str, bytes, None], data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], ndata: int, freeData: int)->int: ...
def nvgCreateFontMemAtIndex(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], name: Union[str, bytes, None], data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], ndata: int, freeData: int, fontIndex: int)->int: ...
def nvgFindFont(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], name: Union[str, bytes, None])->int: ...
def nvgAddFallbackFontId(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], baseFont: int, fallbackFont: int)->int: ...
def nvgAddFallbackFont(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], baseFont: Union[str, bytes, None], fallbackFont: Union[str, bytes, None])->int: ...
def nvgResetFallbackFontsId(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], baseFont: int)->None: ...
def nvgResetFallbackFonts(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], baseFont: Union[str, bytes, None])->None: ...
def nvgFontSize(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], size: float)->None: ...
def nvgFontBlur(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], blur: float)->None: ...
def nvgTextLetterSpacing(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], spacing: float)->None: ...
def nvgTextLineHeight(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], lineHeight: float)->None: ...
def nvgTextAlign(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], align: int)->None: ...
def nvgFontFaceId(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], font: int)->None: ...
def nvgFontFace(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], font: Union[str, bytes, None])->None: ...
def nvgText(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, string: Union[str, bytes, None], end: Union[str, bytes, None])->float: ...
def nvgTextBox(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, breakRowWidth: float, string: Union[str, bytes, None], end: Union[str, bytes, None])->None: ...
def nvgTextBounds(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, string: Union[str, bytes, None], end: Union[str, bytes, None], bounds: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->float: ...
def nvgTextBoxBounds(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, breakRowWidth: float, string: Union[str, bytes, None], end: Union[str, bytes, None], bounds: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgTextGlyphPositions(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], x: float, y: float, string: Union[str, bytes, None], end: Union[str, bytes, None], positions: NVGglyphPosition, maxPositions: int)->int: ...
def nvgTextMetrics(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], ascender: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], descender: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], lineh: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgTextBreakLines(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None], string: Union[str, bytes, None], end: Union[str, bytes, None], breakRowWidth: float, rows: NVGtextRow, maxRows: int)->int: ...
def nvgCreate(flags: int)->ctypes.c_void_p: ...
def nvgDelete(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgParams(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->NVGparams: ...
def nvgDebugDumpPathCache(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->None: ...
def nvgGetDrawData(ctx: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure, None])->NVGdrawData: ...
from enum import IntEnum

class NVGcreateFlags(IntEnum):
    NVG_ANTIALIAS = 0x1
    NVG_STENCIL_STROKES = 0x2
    NVG_DEBUG = 0x4

class NVGwinding(IntEnum):
    NVG_CCW = 0x1
    NVG_CW = 0x2

class NVGsolidity(IntEnum):
    NVG_SOLID = 0x1
    NVG_HOLE = 0x2

class NVGlineCap(IntEnum):
    NVG_BUTT = 0x0
    NVG_ROUND = 0x1
    NVG_SQUARE = 0x2
    NVG_BEVEL = 0x3
    NVG_MITER = 0x4

class NVGalign(IntEnum):
    NVG_ALIGN_LEFT = 0x1
    NVG_ALIGN_CENTER = 0x2
    NVG_ALIGN_RIGHT = 0x4
    NVG_ALIGN_TOP = 0x8
    NVG_ALIGN_MIDDLE = 0x10
    NVG_ALIGN_BOTTOM = 0x20
    NVG_ALIGN_BASELINE = 0x40

class NVGblendFactor(IntEnum):
    NVG_INVALID = 0x0
    NVG_ZERO = 0x1
    NVG_ONE = 0x2
    NVG_SRC_COLOR = 0x4
    NVG_ONE_MINUS_SRC_COLOR = 0x8
    NVG_DST_COLOR = 0x10
    NVG_ONE_MINUS_DST_COLOR = 0x20
    NVG_SRC_ALPHA = 0x40
    NVG_ONE_MINUS_SRC_ALPHA = 0x80
    NVG_DST_ALPHA = 0x100
    NVG_ONE_MINUS_DST_ALPHA = 0x200
    NVG_SRC_ALPHA_SATURATE = 0x400

class NVGcompositeOperation(IntEnum):
    NVG_SOURCE_OVER = 0x0
    NVG_SOURCE_IN = 0x1
    NVG_SOURCE_OUT = 0x2
    NVG_ATOP = 0x3
    NVG_DESTINATION_OVER = 0x4
    NVG_DESTINATION_IN = 0x5
    NVG_DESTINATION_OUT = 0x6
    NVG_DESTINATION_ATOP = 0x7
    NVG_LIGHTER = 0x8
    NVG_COPY = 0x9
    NVG_XOR = 0xa

class NVGimageFlags(IntEnum):
    NVG_IMAGE_GENERATE_MIPMAPS = 0x1
    NVG_IMAGE_REPEATX = 0x2
    NVG_IMAGE_REPEATY = 0x4
    NVG_IMAGE_FLIPY = 0x8
    NVG_IMAGE_PREMULTIPLIED = 0x10
    NVG_IMAGE_NEAREST = 0x20

class NVGtexture(IntEnum):
    NVG_TEXTURE_ALPHA = 0x1
    NVG_TEXTURE_RGBA = 0x2

class GLNVGcallType(IntEnum):
    GLNVG_NONE = 0x0
    GLNVG_FILL = 0x1
    GLNVG_CONVEXFILL = 0x2
    GLNVG_STROKE = 0x3
    GLNVG_TRIANGLES = 0x4

class GLNVGshaderType(IntEnum):
    NSVG_SHADER_FILLGRAD = 0x0
    NSVG_SHADER_FILLIMG = 0x1
    NSVG_SHADER_SIMPLE = 0x2
    NSVG_SHADER_IMG = 0x3

